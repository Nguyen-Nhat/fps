// Code generated by ent, DO NOT EDIT.

package processingfile

import (
	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileURL), v))
	})
}

// ResultFileURL applies equality check predicate on the "result_file_url" field. It's identical to ResultFileURLEQ.
func ResultFileURL(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultFileURL), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// NumberTaskInFile applies equality check predicate on the "number_task_in_file" field. It's identical to NumberTaskInFileEQ.
func NumberTaskInFile(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberTaskInFile), v))
	})
}

// StatsTotalRow applies equality check predicate on the "stats_total_row" field. It's identical to StatsTotalRowEQ.
func StatsTotalRow(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalSuccess applies equality check predicate on the "stats_total_success" field. It's identical to StatsTotalSuccessEQ.
func StatsTotalSuccess(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatsTotalSuccess), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientID), v))
	})
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...int64) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientID), v...))
	})
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...int64) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientID), v...))
	})
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientID), v))
	})
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientID), v))
	})
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientID), v))
	})
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v int64) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientID), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileURL), v))
	})
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileURL), v))
	})
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFileURL), v...))
	})
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFileURL), v...))
	})
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileURL), v))
	})
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileURL), v))
	})
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileURL), v))
	})
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileURL), v))
	})
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileURL), v))
	})
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileURL), v))
	})
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileURL), v))
	})
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileURL), v))
	})
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileURL), v))
	})
}

// ResultFileURLEQ applies the EQ predicate on the "result_file_url" field.
func ResultFileURLEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLNEQ applies the NEQ predicate on the "result_file_url" field.
func ResultFileURLNEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLIn applies the In predicate on the "result_file_url" field.
func ResultFileURLIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResultFileURL), v...))
	})
}

// ResultFileURLNotIn applies the NotIn predicate on the "result_file_url" field.
func ResultFileURLNotIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResultFileURL), v...))
	})
}

// ResultFileURLGT applies the GT predicate on the "result_file_url" field.
func ResultFileURLGT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLGTE applies the GTE predicate on the "result_file_url" field.
func ResultFileURLGTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLLT applies the LT predicate on the "result_file_url" field.
func ResultFileURLLT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLLTE applies the LTE predicate on the "result_file_url" field.
func ResultFileURLLTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLContains applies the Contains predicate on the "result_file_url" field.
func ResultFileURLContains(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLHasPrefix applies the HasPrefix predicate on the "result_file_url" field.
func ResultFileURLHasPrefix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLHasSuffix applies the HasSuffix predicate on the "result_file_url" field.
func ResultFileURLHasSuffix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLEqualFold applies the EqualFold predicate on the "result_file_url" field.
func ResultFileURLEqualFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResultFileURL), v))
	})
}

// ResultFileURLContainsFold applies the ContainsFold predicate on the "result_file_url" field.
func ResultFileURLContainsFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResultFileURL), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int16) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int16) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int16) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// NumberTaskInFileEQ applies the EQ predicate on the "number_task_in_file" field.
func NumberTaskInFileEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberTaskInFile), v))
	})
}

// NumberTaskInFileNEQ applies the NEQ predicate on the "number_task_in_file" field.
func NumberTaskInFileNEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberTaskInFile), v))
	})
}

// NumberTaskInFileIn applies the In predicate on the "number_task_in_file" field.
func NumberTaskInFileIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNumberTaskInFile), v...))
	})
}

// NumberTaskInFileNotIn applies the NotIn predicate on the "number_task_in_file" field.
func NumberTaskInFileNotIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNumberTaskInFile), v...))
	})
}

// NumberTaskInFileGT applies the GT predicate on the "number_task_in_file" field.
func NumberTaskInFileGT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberTaskInFile), v))
	})
}

// NumberTaskInFileGTE applies the GTE predicate on the "number_task_in_file" field.
func NumberTaskInFileGTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberTaskInFile), v))
	})
}

// NumberTaskInFileLT applies the LT predicate on the "number_task_in_file" field.
func NumberTaskInFileLT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberTaskInFile), v))
	})
}

// NumberTaskInFileLTE applies the LTE predicate on the "number_task_in_file" field.
func NumberTaskInFileLTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberTaskInFile), v))
	})
}

// StatsTotalRowEQ applies the EQ predicate on the "stats_total_row" field.
func StatsTotalRowEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalRowNEQ applies the NEQ predicate on the "stats_total_row" field.
func StatsTotalRowNEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalRowIn applies the In predicate on the "stats_total_row" field.
func StatsTotalRowIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatsTotalRow), v...))
	})
}

// StatsTotalRowNotIn applies the NotIn predicate on the "stats_total_row" field.
func StatsTotalRowNotIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatsTotalRow), v...))
	})
}

// StatsTotalRowGT applies the GT predicate on the "stats_total_row" field.
func StatsTotalRowGT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalRowGTE applies the GTE predicate on the "stats_total_row" field.
func StatsTotalRowGTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalRowLT applies the LT predicate on the "stats_total_row" field.
func StatsTotalRowLT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalRowLTE applies the LTE predicate on the "stats_total_row" field.
func StatsTotalRowLTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatsTotalRow), v))
	})
}

// StatsTotalSuccessEQ applies the EQ predicate on the "stats_total_success" field.
func StatsTotalSuccessEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatsTotalSuccess), v))
	})
}

// StatsTotalSuccessNEQ applies the NEQ predicate on the "stats_total_success" field.
func StatsTotalSuccessNEQ(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatsTotalSuccess), v))
	})
}

// StatsTotalSuccessIn applies the In predicate on the "stats_total_success" field.
func StatsTotalSuccessIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatsTotalSuccess), v...))
	})
}

// StatsTotalSuccessNotIn applies the NotIn predicate on the "stats_total_success" field.
func StatsTotalSuccessNotIn(vs ...int32) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatsTotalSuccess), v...))
	})
}

// StatsTotalSuccessGT applies the GT predicate on the "stats_total_success" field.
func StatsTotalSuccessGT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatsTotalSuccess), v))
	})
}

// StatsTotalSuccessGTE applies the GTE predicate on the "stats_total_success" field.
func StatsTotalSuccessGTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatsTotalSuccess), v))
	})
}

// StatsTotalSuccessLT applies the LT predicate on the "stats_total_success" field.
func StatsTotalSuccessLT(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatsTotalSuccess), v))
	})
}

// StatsTotalSuccessLTE applies the LTE predicate on the "stats_total_success" field.
func StatsTotalSuccessLTE(v int32) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatsTotalSuccess), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ProcessingFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessingFile) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessingFile) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessingFile) predicate.ProcessingFile {
	return predicate.ProcessingFile(func(s *sql.Selector) {
		p(s.Not())
	})
}
