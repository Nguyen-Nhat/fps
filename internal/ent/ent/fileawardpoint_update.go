// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/fileawardpoint"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// FileAwardPointUpdate is the builder for updating FileAwardPoint entities.
type FileAwardPointUpdate struct {
	config
	hooks    []Hook
	mutation *FileAwardPointMutation
}

// Where appends a list predicates to the FileAwardPointUpdate builder.
func (fapu *FileAwardPointUpdate) Where(ps ...predicate.FileAwardPoint) *FileAwardPointUpdate {
	fapu.mutation.Where(ps...)
	return fapu
}

// SetMerchantID sets the "merchant_id" field.
func (fapu *FileAwardPointUpdate) SetMerchantID(i int64) *FileAwardPointUpdate {
	fapu.mutation.ResetMerchantID()
	fapu.mutation.SetMerchantID(i)
	return fapu
}

// AddMerchantID adds i to the "merchant_id" field.
func (fapu *FileAwardPointUpdate) AddMerchantID(i int64) *FileAwardPointUpdate {
	fapu.mutation.AddMerchantID(i)
	return fapu
}

// SetDisplayName sets the "display_name" field.
func (fapu *FileAwardPointUpdate) SetDisplayName(s string) *FileAwardPointUpdate {
	fapu.mutation.SetDisplayName(s)
	return fapu
}

// SetFileURL sets the "file_url" field.
func (fapu *FileAwardPointUpdate) SetFileURL(s string) *FileAwardPointUpdate {
	fapu.mutation.SetFileURL(s)
	return fapu
}

// SetResultFileURL sets the "result_file_url" field.
func (fapu *FileAwardPointUpdate) SetResultFileURL(s string) *FileAwardPointUpdate {
	fapu.mutation.SetResultFileURL(s)
	return fapu
}

// SetStatus sets the "status" field.
func (fapu *FileAwardPointUpdate) SetStatus(i int16) *FileAwardPointUpdate {
	fapu.mutation.ResetStatus()
	fapu.mutation.SetStatus(i)
	return fapu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fapu *FileAwardPointUpdate) SetNillableStatus(i *int16) *FileAwardPointUpdate {
	if i != nil {
		fapu.SetStatus(*i)
	}
	return fapu
}

// AddStatus adds i to the "status" field.
func (fapu *FileAwardPointUpdate) AddStatus(i int16) *FileAwardPointUpdate {
	fapu.mutation.AddStatus(i)
	return fapu
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (fapu *FileAwardPointUpdate) SetStatsTotalRow(i int32) *FileAwardPointUpdate {
	fapu.mutation.ResetStatsTotalRow()
	fapu.mutation.SetStatsTotalRow(i)
	return fapu
}

// SetNillableStatsTotalRow sets the "stats_total_row" field if the given value is not nil.
func (fapu *FileAwardPointUpdate) SetNillableStatsTotalRow(i *int32) *FileAwardPointUpdate {
	if i != nil {
		fapu.SetStatsTotalRow(*i)
	}
	return fapu
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (fapu *FileAwardPointUpdate) AddStatsTotalRow(i int32) *FileAwardPointUpdate {
	fapu.mutation.AddStatsTotalRow(i)
	return fapu
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (fapu *FileAwardPointUpdate) SetStatsTotalSuccess(i int32) *FileAwardPointUpdate {
	fapu.mutation.ResetStatsTotalSuccess()
	fapu.mutation.SetStatsTotalSuccess(i)
	return fapu
}

// SetNillableStatsTotalSuccess sets the "stats_total_success" field if the given value is not nil.
func (fapu *FileAwardPointUpdate) SetNillableStatsTotalSuccess(i *int32) *FileAwardPointUpdate {
	if i != nil {
		fapu.SetStatsTotalSuccess(*i)
	}
	return fapu
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (fapu *FileAwardPointUpdate) AddStatsTotalSuccess(i int32) *FileAwardPointUpdate {
	fapu.mutation.AddStatsTotalSuccess(i)
	return fapu
}

// SetCreatedAt sets the "created_at" field.
func (fapu *FileAwardPointUpdate) SetCreatedAt(t time.Time) *FileAwardPointUpdate {
	fapu.mutation.SetCreatedAt(t)
	return fapu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fapu *FileAwardPointUpdate) SetNillableCreatedAt(t *time.Time) *FileAwardPointUpdate {
	if t != nil {
		fapu.SetCreatedAt(*t)
	}
	return fapu
}

// SetUpdatedAt sets the "updated_at" field.
func (fapu *FileAwardPointUpdate) SetUpdatedAt(t time.Time) *FileAwardPointUpdate {
	fapu.mutation.SetUpdatedAt(t)
	return fapu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fapu *FileAwardPointUpdate) SetNillableUpdatedAt(t *time.Time) *FileAwardPointUpdate {
	if t != nil {
		fapu.SetUpdatedAt(*t)
	}
	return fapu
}

// SetCreatedBy sets the "created_by" field.
func (fapu *FileAwardPointUpdate) SetCreatedBy(s string) *FileAwardPointUpdate {
	fapu.mutation.SetCreatedBy(s)
	return fapu
}

// SetUpdatedBy sets the "updated_by" field.
func (fapu *FileAwardPointUpdate) SetUpdatedBy(s string) *FileAwardPointUpdate {
	fapu.mutation.SetUpdatedBy(s)
	return fapu
}

// Mutation returns the FileAwardPointMutation object of the builder.
func (fapu *FileAwardPointUpdate) Mutation() *FileAwardPointMutation {
	return fapu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fapu *FileAwardPointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fapu.hooks) == 0 {
		if err = fapu.check(); err != nil {
			return 0, err
		}
		affected, err = fapu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileAwardPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fapu.check(); err != nil {
				return 0, err
			}
			fapu.mutation = mutation
			affected, err = fapu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fapu.hooks) - 1; i >= 0; i-- {
			if fapu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fapu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fapu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fapu *FileAwardPointUpdate) SaveX(ctx context.Context) int {
	affected, err := fapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fapu *FileAwardPointUpdate) Exec(ctx context.Context) error {
	_, err := fapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fapu *FileAwardPointUpdate) ExecX(ctx context.Context) {
	if err := fapu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fapu *FileAwardPointUpdate) check() error {
	if v, ok := fapu.mutation.DisplayName(); ok {
		if err := fileawardpoint.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.display_name": %w`, err)}
		}
	}
	if v, ok := fapu.mutation.FileURL(); ok {
		if err := fileawardpoint.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.file_url": %w`, err)}
		}
	}
	if v, ok := fapu.mutation.ResultFileURL(); ok {
		if err := fileawardpoint.ResultFileURLValidator(v); err != nil {
			return &ValidationError{Name: "result_file_url", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.result_file_url": %w`, err)}
		}
	}
	return nil
}

func (fapu *FileAwardPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileawardpoint.Table,
			Columns: fileawardpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileawardpoint.FieldID,
			},
		},
	}
	if ps := fapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fapu.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: fileawardpoint.FieldMerchantID,
		})
	}
	if value, ok := fapu.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: fileawardpoint.FieldMerchantID,
		})
	}
	if value, ok := fapu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldDisplayName,
		})
	}
	if value, ok := fapu.mutation.FileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldFileURL,
		})
	}
	if value, ok := fapu.mutation.ResultFileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldResultFileURL,
		})
	}
	if value, ok := fapu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: fileawardpoint.FieldStatus,
		})
	}
	if value, ok := fapu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: fileawardpoint.FieldStatus,
		})
	}
	if value, ok := fapu.mutation.StatsTotalRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalRow,
		})
	}
	if value, ok := fapu.mutation.AddedStatsTotalRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalRow,
		})
	}
	if value, ok := fapu.mutation.StatsTotalSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalSuccess,
		})
	}
	if value, ok := fapu.mutation.AddedStatsTotalSuccess(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalSuccess,
		})
	}
	if value, ok := fapu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileawardpoint.FieldCreatedAt,
		})
	}
	if value, ok := fapu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileawardpoint.FieldUpdatedAt,
		})
	}
	if value, ok := fapu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldCreatedBy,
		})
	}
	if value, ok := fapu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileawardpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FileAwardPointUpdateOne is the builder for updating a single FileAwardPoint entity.
type FileAwardPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileAwardPointMutation
}

// SetMerchantID sets the "merchant_id" field.
func (fapuo *FileAwardPointUpdateOne) SetMerchantID(i int64) *FileAwardPointUpdateOne {
	fapuo.mutation.ResetMerchantID()
	fapuo.mutation.SetMerchantID(i)
	return fapuo
}

// AddMerchantID adds i to the "merchant_id" field.
func (fapuo *FileAwardPointUpdateOne) AddMerchantID(i int64) *FileAwardPointUpdateOne {
	fapuo.mutation.AddMerchantID(i)
	return fapuo
}

// SetDisplayName sets the "display_name" field.
func (fapuo *FileAwardPointUpdateOne) SetDisplayName(s string) *FileAwardPointUpdateOne {
	fapuo.mutation.SetDisplayName(s)
	return fapuo
}

// SetFileURL sets the "file_url" field.
func (fapuo *FileAwardPointUpdateOne) SetFileURL(s string) *FileAwardPointUpdateOne {
	fapuo.mutation.SetFileURL(s)
	return fapuo
}

// SetResultFileURL sets the "result_file_url" field.
func (fapuo *FileAwardPointUpdateOne) SetResultFileURL(s string) *FileAwardPointUpdateOne {
	fapuo.mutation.SetResultFileURL(s)
	return fapuo
}

// SetStatus sets the "status" field.
func (fapuo *FileAwardPointUpdateOne) SetStatus(i int16) *FileAwardPointUpdateOne {
	fapuo.mutation.ResetStatus()
	fapuo.mutation.SetStatus(i)
	return fapuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fapuo *FileAwardPointUpdateOne) SetNillableStatus(i *int16) *FileAwardPointUpdateOne {
	if i != nil {
		fapuo.SetStatus(*i)
	}
	return fapuo
}

// AddStatus adds i to the "status" field.
func (fapuo *FileAwardPointUpdateOne) AddStatus(i int16) *FileAwardPointUpdateOne {
	fapuo.mutation.AddStatus(i)
	return fapuo
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (fapuo *FileAwardPointUpdateOne) SetStatsTotalRow(i int32) *FileAwardPointUpdateOne {
	fapuo.mutation.ResetStatsTotalRow()
	fapuo.mutation.SetStatsTotalRow(i)
	return fapuo
}

// SetNillableStatsTotalRow sets the "stats_total_row" field if the given value is not nil.
func (fapuo *FileAwardPointUpdateOne) SetNillableStatsTotalRow(i *int32) *FileAwardPointUpdateOne {
	if i != nil {
		fapuo.SetStatsTotalRow(*i)
	}
	return fapuo
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (fapuo *FileAwardPointUpdateOne) AddStatsTotalRow(i int32) *FileAwardPointUpdateOne {
	fapuo.mutation.AddStatsTotalRow(i)
	return fapuo
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (fapuo *FileAwardPointUpdateOne) SetStatsTotalSuccess(i int32) *FileAwardPointUpdateOne {
	fapuo.mutation.ResetStatsTotalSuccess()
	fapuo.mutation.SetStatsTotalSuccess(i)
	return fapuo
}

// SetNillableStatsTotalSuccess sets the "stats_total_success" field if the given value is not nil.
func (fapuo *FileAwardPointUpdateOne) SetNillableStatsTotalSuccess(i *int32) *FileAwardPointUpdateOne {
	if i != nil {
		fapuo.SetStatsTotalSuccess(*i)
	}
	return fapuo
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (fapuo *FileAwardPointUpdateOne) AddStatsTotalSuccess(i int32) *FileAwardPointUpdateOne {
	fapuo.mutation.AddStatsTotalSuccess(i)
	return fapuo
}

// SetCreatedAt sets the "created_at" field.
func (fapuo *FileAwardPointUpdateOne) SetCreatedAt(t time.Time) *FileAwardPointUpdateOne {
	fapuo.mutation.SetCreatedAt(t)
	return fapuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fapuo *FileAwardPointUpdateOne) SetNillableCreatedAt(t *time.Time) *FileAwardPointUpdateOne {
	if t != nil {
		fapuo.SetCreatedAt(*t)
	}
	return fapuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fapuo *FileAwardPointUpdateOne) SetUpdatedAt(t time.Time) *FileAwardPointUpdateOne {
	fapuo.mutation.SetUpdatedAt(t)
	return fapuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fapuo *FileAwardPointUpdateOne) SetNillableUpdatedAt(t *time.Time) *FileAwardPointUpdateOne {
	if t != nil {
		fapuo.SetUpdatedAt(*t)
	}
	return fapuo
}

// SetCreatedBy sets the "created_by" field.
func (fapuo *FileAwardPointUpdateOne) SetCreatedBy(s string) *FileAwardPointUpdateOne {
	fapuo.mutation.SetCreatedBy(s)
	return fapuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fapuo *FileAwardPointUpdateOne) SetUpdatedBy(s string) *FileAwardPointUpdateOne {
	fapuo.mutation.SetUpdatedBy(s)
	return fapuo
}

// Mutation returns the FileAwardPointMutation object of the builder.
func (fapuo *FileAwardPointUpdateOne) Mutation() *FileAwardPointMutation {
	return fapuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fapuo *FileAwardPointUpdateOne) Select(field string, fields ...string) *FileAwardPointUpdateOne {
	fapuo.fields = append([]string{field}, fields...)
	return fapuo
}

// Save executes the query and returns the updated FileAwardPoint entity.
func (fapuo *FileAwardPointUpdateOne) Save(ctx context.Context) (*FileAwardPoint, error) {
	var (
		err  error
		node *FileAwardPoint
	)
	if len(fapuo.hooks) == 0 {
		if err = fapuo.check(); err != nil {
			return nil, err
		}
		node, err = fapuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileAwardPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fapuo.check(); err != nil {
				return nil, err
			}
			fapuo.mutation = mutation
			node, err = fapuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fapuo.hooks) - 1; i >= 0; i-- {
			if fapuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fapuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fapuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FileAwardPoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FileAwardPointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fapuo *FileAwardPointUpdateOne) SaveX(ctx context.Context) *FileAwardPoint {
	node, err := fapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fapuo *FileAwardPointUpdateOne) Exec(ctx context.Context) error {
	_, err := fapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fapuo *FileAwardPointUpdateOne) ExecX(ctx context.Context) {
	if err := fapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fapuo *FileAwardPointUpdateOne) check() error {
	if v, ok := fapuo.mutation.DisplayName(); ok {
		if err := fileawardpoint.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.display_name": %w`, err)}
		}
	}
	if v, ok := fapuo.mutation.FileURL(); ok {
		if err := fileawardpoint.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.file_url": %w`, err)}
		}
	}
	if v, ok := fapuo.mutation.ResultFileURL(); ok {
		if err := fileawardpoint.ResultFileURLValidator(v); err != nil {
			return &ValidationError{Name: "result_file_url", err: fmt.Errorf(`ent: validator failed for field "FileAwardPoint.result_file_url": %w`, err)}
		}
	}
	return nil
}

func (fapuo *FileAwardPointUpdateOne) sqlSave(ctx context.Context) (_node *FileAwardPoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileawardpoint.Table,
			Columns: fileawardpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileawardpoint.FieldID,
			},
		},
	}
	id, ok := fapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileAwardPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileawardpoint.FieldID)
		for _, f := range fields {
			if !fileawardpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fileawardpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fapuo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: fileawardpoint.FieldMerchantID,
		})
	}
	if value, ok := fapuo.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: fileawardpoint.FieldMerchantID,
		})
	}
	if value, ok := fapuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldDisplayName,
		})
	}
	if value, ok := fapuo.mutation.FileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldFileURL,
		})
	}
	if value, ok := fapuo.mutation.ResultFileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldResultFileURL,
		})
	}
	if value, ok := fapuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: fileawardpoint.FieldStatus,
		})
	}
	if value, ok := fapuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: fileawardpoint.FieldStatus,
		})
	}
	if value, ok := fapuo.mutation.StatsTotalRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalRow,
		})
	}
	if value, ok := fapuo.mutation.AddedStatsTotalRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalRow,
		})
	}
	if value, ok := fapuo.mutation.StatsTotalSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalSuccess,
		})
	}
	if value, ok := fapuo.mutation.AddedStatsTotalSuccess(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fileawardpoint.FieldStatsTotalSuccess,
		})
	}
	if value, ok := fapuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileawardpoint.FieldCreatedAt,
		})
	}
	if value, ok := fapuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileawardpoint.FieldUpdatedAt,
		})
	}
	if value, ok := fapuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldCreatedBy,
		})
	}
	if value, ok := fapuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileawardpoint.FieldUpdatedBy,
		})
	}
	_node = &FileAwardPoint{config: fapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileawardpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
