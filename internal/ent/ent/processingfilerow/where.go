// Code generated by ent, DO NOT EDIT.

package processingfilerow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// RowIndex applies equality check predicate on the "row_index" field. It's identical to RowIndexEQ.
func RowIndex(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowIndex), v))
	})
}

// RowDataRaw applies equality check predicate on the "row_data_raw" field. It's identical to RowDataRawEQ.
func RowDataRaw(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowDataRaw), v))
	})
}

// TaskIndex applies equality check predicate on the "task_index" field. It's identical to TaskIndexEQ.
func TaskIndex(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// TaskMapping applies equality check predicate on the "task_mapping" field. It's identical to TaskMappingEQ.
func TaskMapping(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskMapping), v))
	})
}

// TaskDependsOn applies equality check predicate on the "task_depends_on" field. It's identical to TaskDependsOnEQ.
func TaskDependsOn(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskDependsOn), v))
	})
}

// GroupByValue applies equality check predicate on the "group_by_value" field. It's identical to GroupByValueEQ.
func GroupByValue(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupByValue), v))
	})
}

// TaskRequestCurl applies equality check predicate on the "task_request_curl" field. It's identical to TaskRequestCurlEQ.
func TaskRequestCurl(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestRaw applies equality check predicate on the "task_request_raw" field. It's identical to TaskRequestRawEQ.
func TaskRequestRaw(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskResponseRaw applies equality check predicate on the "task_response_raw" field. It's identical to TaskResponseRawEQ.
func TaskResponseRaw(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskResponseRaw), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ErrorDisplay applies equality check predicate on the "error_display" field. It's identical to ErrorDisplayEQ.
func ErrorDisplay(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDisplay), v))
	})
}

// ExecutedTime applies equality check predicate on the "executed_time" field. It's identical to ExecutedTimeEQ.
func ExecutedTime(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutedTime), v))
	})
}

// ResultAsync applies equality check predicate on the "result_async" field. It's identical to ResultAsyncEQ.
func ResultAsync(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultAsync), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// ReceiveResponseAt applies equality check predicate on the "receive_response_at" field. It's identical to ReceiveResponseAtEQ.
func ReceiveResponseAt(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResultAsyncAt applies equality check predicate on the "receive_result_async_at" field. It's identical to ReceiveResultAsyncAtEQ.
func ReceiveResultAsyncAt(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileID), v))
	})
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int64) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFileID), v...))
	})
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int64) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFileID), v...))
	})
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileID), v))
	})
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileID), v))
	})
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileID), v))
	})
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileID), v))
	})
}

// RowIndexEQ applies the EQ predicate on the "row_index" field.
func RowIndexEQ(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowIndex), v))
	})
}

// RowIndexNEQ applies the NEQ predicate on the "row_index" field.
func RowIndexNEQ(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRowIndex), v))
	})
}

// RowIndexIn applies the In predicate on the "row_index" field.
func RowIndexIn(vs ...int32) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRowIndex), v...))
	})
}

// RowIndexNotIn applies the NotIn predicate on the "row_index" field.
func RowIndexNotIn(vs ...int32) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRowIndex), v...))
	})
}

// RowIndexGT applies the GT predicate on the "row_index" field.
func RowIndexGT(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRowIndex), v))
	})
}

// RowIndexGTE applies the GTE predicate on the "row_index" field.
func RowIndexGTE(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRowIndex), v))
	})
}

// RowIndexLT applies the LT predicate on the "row_index" field.
func RowIndexLT(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRowIndex), v))
	})
}

// RowIndexLTE applies the LTE predicate on the "row_index" field.
func RowIndexLTE(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRowIndex), v))
	})
}

// RowDataRawEQ applies the EQ predicate on the "row_data_raw" field.
func RowDataRawEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawNEQ applies the NEQ predicate on the "row_data_raw" field.
func RowDataRawNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawIn applies the In predicate on the "row_data_raw" field.
func RowDataRawIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRowDataRaw), v...))
	})
}

// RowDataRawNotIn applies the NotIn predicate on the "row_data_raw" field.
func RowDataRawNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRowDataRaw), v...))
	})
}

// RowDataRawGT applies the GT predicate on the "row_data_raw" field.
func RowDataRawGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawGTE applies the GTE predicate on the "row_data_raw" field.
func RowDataRawGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawLT applies the LT predicate on the "row_data_raw" field.
func RowDataRawLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawLTE applies the LTE predicate on the "row_data_raw" field.
func RowDataRawLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawContains applies the Contains predicate on the "row_data_raw" field.
func RowDataRawContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawHasPrefix applies the HasPrefix predicate on the "row_data_raw" field.
func RowDataRawHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawHasSuffix applies the HasSuffix predicate on the "row_data_raw" field.
func RowDataRawHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawEqualFold applies the EqualFold predicate on the "row_data_raw" field.
func RowDataRawEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRowDataRaw), v))
	})
}

// RowDataRawContainsFold applies the ContainsFold predicate on the "row_data_raw" field.
func RowDataRawContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRowDataRaw), v))
	})
}

// TaskIndexEQ applies the EQ predicate on the "task_index" field.
func TaskIndexEQ(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexNEQ applies the NEQ predicate on the "task_index" field.
func TaskIndexNEQ(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexIn applies the In predicate on the "task_index" field.
func TaskIndexIn(vs ...int32) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexNotIn applies the NotIn predicate on the "task_index" field.
func TaskIndexNotIn(vs ...int32) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexGT applies the GT predicate on the "task_index" field.
func TaskIndexGT(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexGTE applies the GTE predicate on the "task_index" field.
func TaskIndexGTE(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLT applies the LT predicate on the "task_index" field.
func TaskIndexLT(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLTE applies the LTE predicate on the "task_index" field.
func TaskIndexLTE(v int32) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskIndex), v))
	})
}

// TaskMappingEQ applies the EQ predicate on the "task_mapping" field.
func TaskMappingEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingNEQ applies the NEQ predicate on the "task_mapping" field.
func TaskMappingNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingIn applies the In predicate on the "task_mapping" field.
func TaskMappingIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskMapping), v...))
	})
}

// TaskMappingNotIn applies the NotIn predicate on the "task_mapping" field.
func TaskMappingNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskMapping), v...))
	})
}

// TaskMappingGT applies the GT predicate on the "task_mapping" field.
func TaskMappingGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingGTE applies the GTE predicate on the "task_mapping" field.
func TaskMappingGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingLT applies the LT predicate on the "task_mapping" field.
func TaskMappingLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingLTE applies the LTE predicate on the "task_mapping" field.
func TaskMappingLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingContains applies the Contains predicate on the "task_mapping" field.
func TaskMappingContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingHasPrefix applies the HasPrefix predicate on the "task_mapping" field.
func TaskMappingHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingHasSuffix applies the HasSuffix predicate on the "task_mapping" field.
func TaskMappingHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingEqualFold applies the EqualFold predicate on the "task_mapping" field.
func TaskMappingEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskMapping), v))
	})
}

// TaskMappingContainsFold applies the ContainsFold predicate on the "task_mapping" field.
func TaskMappingContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskMapping), v))
	})
}

// TaskDependsOnEQ applies the EQ predicate on the "task_depends_on" field.
func TaskDependsOnEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnNEQ applies the NEQ predicate on the "task_depends_on" field.
func TaskDependsOnNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnIn applies the In predicate on the "task_depends_on" field.
func TaskDependsOnIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskDependsOn), v...))
	})
}

// TaskDependsOnNotIn applies the NotIn predicate on the "task_depends_on" field.
func TaskDependsOnNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskDependsOn), v...))
	})
}

// TaskDependsOnGT applies the GT predicate on the "task_depends_on" field.
func TaskDependsOnGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnGTE applies the GTE predicate on the "task_depends_on" field.
func TaskDependsOnGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnLT applies the LT predicate on the "task_depends_on" field.
func TaskDependsOnLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnLTE applies the LTE predicate on the "task_depends_on" field.
func TaskDependsOnLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnContains applies the Contains predicate on the "task_depends_on" field.
func TaskDependsOnContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnHasPrefix applies the HasPrefix predicate on the "task_depends_on" field.
func TaskDependsOnHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnHasSuffix applies the HasSuffix predicate on the "task_depends_on" field.
func TaskDependsOnHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnEqualFold applies the EqualFold predicate on the "task_depends_on" field.
func TaskDependsOnEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskDependsOn), v))
	})
}

// TaskDependsOnContainsFold applies the ContainsFold predicate on the "task_depends_on" field.
func TaskDependsOnContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskDependsOn), v))
	})
}

// GroupByValueEQ applies the EQ predicate on the "group_by_value" field.
func GroupByValueEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueNEQ applies the NEQ predicate on the "group_by_value" field.
func GroupByValueNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueIn applies the In predicate on the "group_by_value" field.
func GroupByValueIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupByValue), v...))
	})
}

// GroupByValueNotIn applies the NotIn predicate on the "group_by_value" field.
func GroupByValueNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupByValue), v...))
	})
}

// GroupByValueGT applies the GT predicate on the "group_by_value" field.
func GroupByValueGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueGTE applies the GTE predicate on the "group_by_value" field.
func GroupByValueGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueLT applies the LT predicate on the "group_by_value" field.
func GroupByValueLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueLTE applies the LTE predicate on the "group_by_value" field.
func GroupByValueLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueContains applies the Contains predicate on the "group_by_value" field.
func GroupByValueContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueHasPrefix applies the HasPrefix predicate on the "group_by_value" field.
func GroupByValueHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueHasSuffix applies the HasSuffix predicate on the "group_by_value" field.
func GroupByValueHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueEqualFold applies the EqualFold predicate on the "group_by_value" field.
func GroupByValueEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueContainsFold applies the ContainsFold predicate on the "group_by_value" field.
func GroupByValueContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupByValue), v))
	})
}

// TaskRequestCurlEQ applies the EQ predicate on the "task_request_curl" field.
func TaskRequestCurlEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlNEQ applies the NEQ predicate on the "task_request_curl" field.
func TaskRequestCurlNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlIn applies the In predicate on the "task_request_curl" field.
func TaskRequestCurlIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskRequestCurl), v...))
	})
}

// TaskRequestCurlNotIn applies the NotIn predicate on the "task_request_curl" field.
func TaskRequestCurlNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskRequestCurl), v...))
	})
}

// TaskRequestCurlGT applies the GT predicate on the "task_request_curl" field.
func TaskRequestCurlGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlGTE applies the GTE predicate on the "task_request_curl" field.
func TaskRequestCurlGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlLT applies the LT predicate on the "task_request_curl" field.
func TaskRequestCurlLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlLTE applies the LTE predicate on the "task_request_curl" field.
func TaskRequestCurlLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlContains applies the Contains predicate on the "task_request_curl" field.
func TaskRequestCurlContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlHasPrefix applies the HasPrefix predicate on the "task_request_curl" field.
func TaskRequestCurlHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlHasSuffix applies the HasSuffix predicate on the "task_request_curl" field.
func TaskRequestCurlHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlEqualFold applies the EqualFold predicate on the "task_request_curl" field.
func TaskRequestCurlEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestCurlContainsFold applies the ContainsFold predicate on the "task_request_curl" field.
func TaskRequestCurlContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskRequestCurl), v))
	})
}

// TaskRequestRawEQ applies the EQ predicate on the "task_request_raw" field.
func TaskRequestRawEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawNEQ applies the NEQ predicate on the "task_request_raw" field.
func TaskRequestRawNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawIn applies the In predicate on the "task_request_raw" field.
func TaskRequestRawIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskRequestRaw), v...))
	})
}

// TaskRequestRawNotIn applies the NotIn predicate on the "task_request_raw" field.
func TaskRequestRawNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskRequestRaw), v...))
	})
}

// TaskRequestRawGT applies the GT predicate on the "task_request_raw" field.
func TaskRequestRawGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawGTE applies the GTE predicate on the "task_request_raw" field.
func TaskRequestRawGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawLT applies the LT predicate on the "task_request_raw" field.
func TaskRequestRawLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawLTE applies the LTE predicate on the "task_request_raw" field.
func TaskRequestRawLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawContains applies the Contains predicate on the "task_request_raw" field.
func TaskRequestRawContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawHasPrefix applies the HasPrefix predicate on the "task_request_raw" field.
func TaskRequestRawHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawHasSuffix applies the HasSuffix predicate on the "task_request_raw" field.
func TaskRequestRawHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawEqualFold applies the EqualFold predicate on the "task_request_raw" field.
func TaskRequestRawEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskRequestRawContainsFold applies the ContainsFold predicate on the "task_request_raw" field.
func TaskRequestRawContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskRequestRaw), v))
	})
}

// TaskResponseRawEQ applies the EQ predicate on the "task_response_raw" field.
func TaskResponseRawEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawNEQ applies the NEQ predicate on the "task_response_raw" field.
func TaskResponseRawNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawIn applies the In predicate on the "task_response_raw" field.
func TaskResponseRawIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskResponseRaw), v...))
	})
}

// TaskResponseRawNotIn applies the NotIn predicate on the "task_response_raw" field.
func TaskResponseRawNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskResponseRaw), v...))
	})
}

// TaskResponseRawGT applies the GT predicate on the "task_response_raw" field.
func TaskResponseRawGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawGTE applies the GTE predicate on the "task_response_raw" field.
func TaskResponseRawGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawLT applies the LT predicate on the "task_response_raw" field.
func TaskResponseRawLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawLTE applies the LTE predicate on the "task_response_raw" field.
func TaskResponseRawLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawContains applies the Contains predicate on the "task_response_raw" field.
func TaskResponseRawContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawHasPrefix applies the HasPrefix predicate on the "task_response_raw" field.
func TaskResponseRawHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawHasSuffix applies the HasSuffix predicate on the "task_response_raw" field.
func TaskResponseRawHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawEqualFold applies the EqualFold predicate on the "task_response_raw" field.
func TaskResponseRawEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskResponseRaw), v))
	})
}

// TaskResponseRawContainsFold applies the ContainsFold predicate on the "task_response_raw" field.
func TaskResponseRawContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskResponseRaw), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int16) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int16) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int16) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ErrorDisplayEQ applies the EQ predicate on the "error_display" field.
func ErrorDisplayEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayNEQ applies the NEQ predicate on the "error_display" field.
func ErrorDisplayNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayIn applies the In predicate on the "error_display" field.
func ErrorDisplayIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldErrorDisplay), v...))
	})
}

// ErrorDisplayNotIn applies the NotIn predicate on the "error_display" field.
func ErrorDisplayNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldErrorDisplay), v...))
	})
}

// ErrorDisplayGT applies the GT predicate on the "error_display" field.
func ErrorDisplayGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayGTE applies the GTE predicate on the "error_display" field.
func ErrorDisplayGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayLT applies the LT predicate on the "error_display" field.
func ErrorDisplayLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayLTE applies the LTE predicate on the "error_display" field.
func ErrorDisplayLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayContains applies the Contains predicate on the "error_display" field.
func ErrorDisplayContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayHasPrefix applies the HasPrefix predicate on the "error_display" field.
func ErrorDisplayHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayHasSuffix applies the HasSuffix predicate on the "error_display" field.
func ErrorDisplayHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayEqualFold applies the EqualFold predicate on the "error_display" field.
func ErrorDisplayEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayContainsFold applies the ContainsFold predicate on the "error_display" field.
func ErrorDisplayContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorDisplay), v))
	})
}

// ExecutedTimeEQ applies the EQ predicate on the "executed_time" field.
func ExecutedTimeEQ(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeNEQ applies the NEQ predicate on the "executed_time" field.
func ExecutedTimeNEQ(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeIn applies the In predicate on the "executed_time" field.
func ExecutedTimeIn(vs ...int64) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExecutedTime), v...))
	})
}

// ExecutedTimeNotIn applies the NotIn predicate on the "executed_time" field.
func ExecutedTimeNotIn(vs ...int64) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExecutedTime), v...))
	})
}

// ExecutedTimeGT applies the GT predicate on the "executed_time" field.
func ExecutedTimeGT(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeGTE applies the GTE predicate on the "executed_time" field.
func ExecutedTimeGTE(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeLT applies the LT predicate on the "executed_time" field.
func ExecutedTimeLT(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeLTE applies the LTE predicate on the "executed_time" field.
func ExecutedTimeLTE(v int64) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExecutedTime), v))
	})
}

// ResultAsyncEQ applies the EQ predicate on the "result_async" field.
func ResultAsyncEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncNEQ applies the NEQ predicate on the "result_async" field.
func ResultAsyncNEQ(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncIn applies the In predicate on the "result_async" field.
func ResultAsyncIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResultAsync), v...))
	})
}

// ResultAsyncNotIn applies the NotIn predicate on the "result_async" field.
func ResultAsyncNotIn(vs ...string) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResultAsync), v...))
	})
}

// ResultAsyncGT applies the GT predicate on the "result_async" field.
func ResultAsyncGT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncGTE applies the GTE predicate on the "result_async" field.
func ResultAsyncGTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncLT applies the LT predicate on the "result_async" field.
func ResultAsyncLT(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncLTE applies the LTE predicate on the "result_async" field.
func ResultAsyncLTE(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncContains applies the Contains predicate on the "result_async" field.
func ResultAsyncContains(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncHasPrefix applies the HasPrefix predicate on the "result_async" field.
func ResultAsyncHasPrefix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncHasSuffix applies the HasSuffix predicate on the "result_async" field.
func ResultAsyncHasSuffix(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncIsNil applies the IsNil predicate on the "result_async" field.
func ResultAsyncIsNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResultAsync)))
	})
}

// ResultAsyncNotNil applies the NotNil predicate on the "result_async" field.
func ResultAsyncNotNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResultAsync)))
	})
}

// ResultAsyncEqualFold applies the EqualFold predicate on the "result_async" field.
func ResultAsyncEqualFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResultAsync), v))
	})
}

// ResultAsyncContainsFold applies the ContainsFold predicate on the "result_async" field.
func ResultAsyncContainsFold(v string) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResultAsync), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// ReceiveResponseAtEQ applies the EQ predicate on the "receive_response_at" field.
func ReceiveResponseAtEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtNEQ applies the NEQ predicate on the "receive_response_at" field.
func ReceiveResponseAtNEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtIn applies the In predicate on the "receive_response_at" field.
func ReceiveResponseAtIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiveResponseAt), v...))
	})
}

// ReceiveResponseAtNotIn applies the NotIn predicate on the "receive_response_at" field.
func ReceiveResponseAtNotIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiveResponseAt), v...))
	})
}

// ReceiveResponseAtGT applies the GT predicate on the "receive_response_at" field.
func ReceiveResponseAtGT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtGTE applies the GTE predicate on the "receive_response_at" field.
func ReceiveResponseAtGTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtLT applies the LT predicate on the "receive_response_at" field.
func ReceiveResponseAtLT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtLTE applies the LTE predicate on the "receive_response_at" field.
func ReceiveResponseAtLTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiveResponseAt), v))
	})
}

// ReceiveResponseAtIsNil applies the IsNil predicate on the "receive_response_at" field.
func ReceiveResponseAtIsNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiveResponseAt)))
	})
}

// ReceiveResponseAtNotNil applies the NotNil predicate on the "receive_response_at" field.
func ReceiveResponseAtNotNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiveResponseAt)))
	})
}

// ReceiveResultAsyncAtEQ applies the EQ predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtNEQ applies the NEQ predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtNEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtIn applies the In predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiveResultAsyncAt), v...))
	})
}

// ReceiveResultAsyncAtNotIn applies the NotIn predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtNotIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiveResultAsyncAt), v...))
	})
}

// ReceiveResultAsyncAtGT applies the GT predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtGT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtGTE applies the GTE predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtGTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtLT applies the LT predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtLT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtLTE applies the LTE predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtLTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiveResultAsyncAt), v))
	})
}

// ReceiveResultAsyncAtIsNil applies the IsNil predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtIsNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiveResultAsyncAt)))
	})
}

// ReceiveResultAsyncAtNotNil applies the NotNil predicate on the "receive_result_async_at" field.
func ReceiveResultAsyncAtNotNil() predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiveResultAsyncAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcessingFileRow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessingFileRow) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessingFileRow) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessingFileRow) predicate.ProcessingFileRow {
	return predicate.ProcessingFileRow(func(s *sql.Selector) {
		p(s.Not())
	})
}
