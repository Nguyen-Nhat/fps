// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfilerow"
)

// ProcessingFileRowCreate is the builder for creating a ProcessingFileRow entity.
type ProcessingFileRowCreate struct {
	config
	mutation *ProcessingFileRowMutation
	hooks    []Hook
}

// SetFileID sets the "file_id" field.
func (pfrc *ProcessingFileRowCreate) SetFileID(i int64) *ProcessingFileRowCreate {
	pfrc.mutation.SetFileID(i)
	return pfrc
}

// SetRowIndex sets the "row_index" field.
func (pfrc *ProcessingFileRowCreate) SetRowIndex(i int32) *ProcessingFileRowCreate {
	pfrc.mutation.SetRowIndex(i)
	return pfrc
}

// SetRowDataRaw sets the "row_data_raw" field.
func (pfrc *ProcessingFileRowCreate) SetRowDataRaw(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetRowDataRaw(s)
	return pfrc
}

// SetTaskIndex sets the "task_index" field.
func (pfrc *ProcessingFileRowCreate) SetTaskIndex(i int32) *ProcessingFileRowCreate {
	pfrc.mutation.SetTaskIndex(i)
	return pfrc
}

// SetTaskMapping sets the "task_mapping" field.
func (pfrc *ProcessingFileRowCreate) SetTaskMapping(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetTaskMapping(s)
	return pfrc
}

// SetTaskDependsOn sets the "task_depends_on" field.
func (pfrc *ProcessingFileRowCreate) SetTaskDependsOn(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetTaskDependsOn(s)
	return pfrc
}

// SetTaskRequestRaw sets the "task_request_raw" field.
func (pfrc *ProcessingFileRowCreate) SetTaskRequestRaw(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetTaskRequestRaw(s)
	return pfrc
}

// SetTaskResponseRaw sets the "task_response_raw" field.
func (pfrc *ProcessingFileRowCreate) SetTaskResponseRaw(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetTaskResponseRaw(s)
	return pfrc
}

// SetStatus sets the "status" field.
func (pfrc *ProcessingFileRowCreate) SetStatus(i int16) *ProcessingFileRowCreate {
	pfrc.mutation.SetStatus(i)
	return pfrc
}

// SetErrorDisplay sets the "error_display" field.
func (pfrc *ProcessingFileRowCreate) SetErrorDisplay(s string) *ProcessingFileRowCreate {
	pfrc.mutation.SetErrorDisplay(s)
	return pfrc
}

// SetExecutedTime sets the "executed_time" field.
func (pfrc *ProcessingFileRowCreate) SetExecutedTime(i int64) *ProcessingFileRowCreate {
	pfrc.mutation.SetExecutedTime(i)
	return pfrc
}

// SetCreatedAt sets the "created_at" field.
func (pfrc *ProcessingFileRowCreate) SetCreatedAt(t time.Time) *ProcessingFileRowCreate {
	pfrc.mutation.SetCreatedAt(t)
	return pfrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfrc *ProcessingFileRowCreate) SetNillableCreatedAt(t *time.Time) *ProcessingFileRowCreate {
	if t != nil {
		pfrc.SetCreatedAt(*t)
	}
	return pfrc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfrc *ProcessingFileRowCreate) SetUpdatedAt(t time.Time) *ProcessingFileRowCreate {
	pfrc.mutation.SetUpdatedAt(t)
	return pfrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfrc *ProcessingFileRowCreate) SetNillableUpdatedAt(t *time.Time) *ProcessingFileRowCreate {
	if t != nil {
		pfrc.SetUpdatedAt(*t)
	}
	return pfrc
}

// Mutation returns the ProcessingFileRowMutation object of the builder.
func (pfrc *ProcessingFileRowCreate) Mutation() *ProcessingFileRowMutation {
	return pfrc.mutation
}

// Save creates the ProcessingFileRow in the database.
func (pfrc *ProcessingFileRowCreate) Save(ctx context.Context) (*ProcessingFileRow, error) {
	var (
		err  error
		node *ProcessingFileRow
	)
	pfrc.defaults()
	if len(pfrc.hooks) == 0 {
		if err = pfrc.check(); err != nil {
			return nil, err
		}
		node, err = pfrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessingFileRowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfrc.check(); err != nil {
				return nil, err
			}
			pfrc.mutation = mutation
			if node, err = pfrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pfrc.hooks) - 1; i >= 0; i-- {
			if pfrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pfrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pfrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcessingFileRow)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcessingFileRowMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pfrc *ProcessingFileRowCreate) SaveX(ctx context.Context) *ProcessingFileRow {
	v, err := pfrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfrc *ProcessingFileRowCreate) Exec(ctx context.Context) error {
	_, err := pfrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfrc *ProcessingFileRowCreate) ExecX(ctx context.Context) {
	if err := pfrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfrc *ProcessingFileRowCreate) defaults() {
	if _, ok := pfrc.mutation.CreatedAt(); !ok {
		v := processingfilerow.DefaultCreatedAt()
		pfrc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfrc.mutation.UpdatedAt(); !ok {
		v := processingfilerow.DefaultUpdatedAt()
		pfrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfrc *ProcessingFileRowCreate) check() error {
	if _, ok := pfrc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "ProcessingFileRow.file_id"`)}
	}
	if _, ok := pfrc.mutation.RowIndex(); !ok {
		return &ValidationError{Name: "row_index", err: errors.New(`ent: missing required field "ProcessingFileRow.row_index"`)}
	}
	if _, ok := pfrc.mutation.RowDataRaw(); !ok {
		return &ValidationError{Name: "row_data_raw", err: errors.New(`ent: missing required field "ProcessingFileRow.row_data_raw"`)}
	}
	if _, ok := pfrc.mutation.TaskIndex(); !ok {
		return &ValidationError{Name: "task_index", err: errors.New(`ent: missing required field "ProcessingFileRow.task_index"`)}
	}
	if _, ok := pfrc.mutation.TaskMapping(); !ok {
		return &ValidationError{Name: "task_mapping", err: errors.New(`ent: missing required field "ProcessingFileRow.task_mapping"`)}
	}
	if _, ok := pfrc.mutation.TaskDependsOn(); !ok {
		return &ValidationError{Name: "task_depends_on", err: errors.New(`ent: missing required field "ProcessingFileRow.task_depends_on"`)}
	}
	if _, ok := pfrc.mutation.TaskRequestRaw(); !ok {
		return &ValidationError{Name: "task_request_raw", err: errors.New(`ent: missing required field "ProcessingFileRow.task_request_raw"`)}
	}
	if _, ok := pfrc.mutation.TaskResponseRaw(); !ok {
		return &ValidationError{Name: "task_response_raw", err: errors.New(`ent: missing required field "ProcessingFileRow.task_response_raw"`)}
	}
	if _, ok := pfrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcessingFileRow.status"`)}
	}
	if _, ok := pfrc.mutation.ErrorDisplay(); !ok {
		return &ValidationError{Name: "error_display", err: errors.New(`ent: missing required field "ProcessingFileRow.error_display"`)}
	}
	if _, ok := pfrc.mutation.ExecutedTime(); !ok {
		return &ValidationError{Name: "executed_time", err: errors.New(`ent: missing required field "ProcessingFileRow.executed_time"`)}
	}
	if _, ok := pfrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessingFileRow.created_at"`)}
	}
	if _, ok := pfrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessingFileRow.updated_at"`)}
	}
	return nil
}

func (pfrc *ProcessingFileRowCreate) sqlSave(ctx context.Context) (*ProcessingFileRow, error) {
	_node, _spec := pfrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pfrc *ProcessingFileRowCreate) createSpec() (*ProcessingFileRow, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessingFileRow{config: pfrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: processingfilerow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: processingfilerow.FieldID,
			},
		}
	)
	if value, ok := pfrc.mutation.FileID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: processingfilerow.FieldFileID,
		})
		_node.FileID = value
	}
	if value, ok := pfrc.mutation.RowIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfilerow.FieldRowIndex,
		})
		_node.RowIndex = value
	}
	if value, ok := pfrc.mutation.RowDataRaw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldRowDataRaw,
		})
		_node.RowDataRaw = value
	}
	if value, ok := pfrc.mutation.TaskIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfilerow.FieldTaskIndex,
		})
		_node.TaskIndex = value
	}
	if value, ok := pfrc.mutation.TaskMapping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldTaskMapping,
		})
		_node.TaskMapping = value
	}
	if value, ok := pfrc.mutation.TaskDependsOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldTaskDependsOn,
		})
		_node.TaskDependsOn = value
	}
	if value, ok := pfrc.mutation.TaskRequestRaw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldTaskRequestRaw,
		})
		_node.TaskRequestRaw = value
	}
	if value, ok := pfrc.mutation.TaskResponseRaw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldTaskResponseRaw,
		})
		_node.TaskResponseRaw = value
	}
	if value, ok := pfrc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfilerow.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pfrc.mutation.ErrorDisplay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerow.FieldErrorDisplay,
		})
		_node.ErrorDisplay = value
	}
	if value, ok := pfrc.mutation.ExecutedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: processingfilerow.FieldExecutedTime,
		})
		_node.ExecutedTime = value
	}
	if value, ok := pfrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfilerow.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pfrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfilerow.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessingFileRowCreateBulk is the builder for creating many ProcessingFileRow entities in bulk.
type ProcessingFileRowCreateBulk struct {
	config
	builders []*ProcessingFileRowCreate
}

// Save creates the ProcessingFileRow entities in the database.
func (pfrcb *ProcessingFileRowCreateBulk) Save(ctx context.Context) ([]*ProcessingFileRow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pfrcb.builders))
	nodes := make([]*ProcessingFileRow, len(pfrcb.builders))
	mutators := make([]Mutator, len(pfrcb.builders))
	for i := range pfrcb.builders {
		func(i int, root context.Context) {
			builder := pfrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessingFileRowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfrcb *ProcessingFileRowCreateBulk) SaveX(ctx context.Context) []*ProcessingFileRow {
	v, err := pfrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfrcb *ProcessingFileRowCreateBulk) Exec(ctx context.Context) error {
	_, err := pfrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfrcb *ProcessingFileRowCreateBulk) ExecX(ctx context.Context) {
	if err := pfrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
