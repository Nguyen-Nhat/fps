// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/fpsclient"
)

// FpsClientCreate is the builder for creating a FpsClient entity.
type FpsClientCreate struct {
	config
	mutation *FpsClientMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (fcc *FpsClientCreate) SetClientID(i int32) *FpsClientCreate {
	fcc.mutation.SetClientID(i)
	return fcc
}

// SetName sets the "name" field.
func (fcc *FpsClientCreate) SetName(s string) *FpsClientCreate {
	fcc.mutation.SetName(s)
	return fcc
}

// SetDescription sets the "description" field.
func (fcc *FpsClientCreate) SetDescription(s string) *FpsClientCreate {
	fcc.mutation.SetDescription(s)
	return fcc
}

// SetSampleFileURL sets the "sample_file_url" field.
func (fcc *FpsClientCreate) SetSampleFileURL(s string) *FpsClientCreate {
	fcc.mutation.SetSampleFileURL(s)
	return fcc
}

// SetNillableSampleFileURL sets the "sample_file_url" field if the given value is not nil.
func (fcc *FpsClientCreate) SetNillableSampleFileURL(s *string) *FpsClientCreate {
	if s != nil {
		fcc.SetSampleFileURL(*s)
	}
	return fcc
}

// SetImportFileTemplateURL sets the "import_file_template_url" field.
func (fcc *FpsClientCreate) SetImportFileTemplateURL(s string) *FpsClientCreate {
	fcc.mutation.SetImportFileTemplateURL(s)
	return fcc
}

// SetNillableImportFileTemplateURL sets the "import_file_template_url" field if the given value is not nil.
func (fcc *FpsClientCreate) SetNillableImportFileTemplateURL(s *string) *FpsClientCreate {
	if s != nil {
		fcc.SetImportFileTemplateURL(*s)
	}
	return fcc
}

// SetCreatedAt sets the "created_at" field.
func (fcc *FpsClientCreate) SetCreatedAt(t time.Time) *FpsClientCreate {
	fcc.mutation.SetCreatedAt(t)
	return fcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcc *FpsClientCreate) SetNillableCreatedAt(t *time.Time) *FpsClientCreate {
	if t != nil {
		fcc.SetCreatedAt(*t)
	}
	return fcc
}

// SetCreatedBy sets the "created_by" field.
func (fcc *FpsClientCreate) SetCreatedBy(s string) *FpsClientCreate {
	fcc.mutation.SetCreatedBy(s)
	return fcc
}

// SetUpdatedAt sets the "updated_at" field.
func (fcc *FpsClientCreate) SetUpdatedAt(t time.Time) *FpsClientCreate {
	fcc.mutation.SetUpdatedAt(t)
	return fcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcc *FpsClientCreate) SetNillableUpdatedAt(t *time.Time) *FpsClientCreate {
	if t != nil {
		fcc.SetUpdatedAt(*t)
	}
	return fcc
}

// Mutation returns the FpsClientMutation object of the builder.
func (fcc *FpsClientCreate) Mutation() *FpsClientMutation {
	return fcc.mutation
}

// Save creates the FpsClient in the database.
func (fcc *FpsClientCreate) Save(ctx context.Context) (*FpsClient, error) {
	var (
		err  error
		node *FpsClient
	)
	fcc.defaults()
	if len(fcc.hooks) == 0 {
		if err = fcc.check(); err != nil {
			return nil, err
		}
		node, err = fcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FpsClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fcc.check(); err != nil {
				return nil, err
			}
			fcc.mutation = mutation
			if node, err = fcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fcc.hooks) - 1; i >= 0; i-- {
			if fcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FpsClient)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FpsClientMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fcc *FpsClientCreate) SaveX(ctx context.Context) *FpsClient {
	v, err := fcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcc *FpsClientCreate) Exec(ctx context.Context) error {
	_, err := fcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcc *FpsClientCreate) ExecX(ctx context.Context) {
	if err := fcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcc *FpsClientCreate) defaults() {
	if _, ok := fcc.mutation.SampleFileURL(); !ok {
		v := fpsclient.DefaultSampleFileURL
		fcc.mutation.SetSampleFileURL(v)
	}
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		v := fpsclient.DefaultCreatedAt()
		fcc.mutation.SetCreatedAt(v)
	}
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		v := fpsclient.DefaultUpdatedAt()
		fcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcc *FpsClientCreate) check() error {
	if _, ok := fcc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "FpsClient.client_id"`)}
	}
	if _, ok := fcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FpsClient.name"`)}
	}
	if v, ok := fcc.mutation.Name(); ok {
		if err := fpsclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FpsClient.name": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "FpsClient.description"`)}
	}
	if v, ok := fcc.mutation.Description(); ok {
		if err := fpsclient.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "FpsClient.description": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.SampleFileURL(); !ok {
		return &ValidationError{Name: "sample_file_url", err: errors.New(`ent: missing required field "FpsClient.sample_file_url"`)}
	}
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FpsClient.created_at"`)}
	}
	if _, ok := fcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FpsClient.created_by"`)}
	}
	if v, ok := fcc.mutation.CreatedBy(); ok {
		if err := fpsclient.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "FpsClient.created_by": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FpsClient.updated_at"`)}
	}
	return nil
}

func (fcc *FpsClientCreate) sqlSave(ctx context.Context) (*FpsClient, error) {
	_node, _spec := fcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fcc *FpsClientCreate) createSpec() (*FpsClient, *sqlgraph.CreateSpec) {
	var (
		_node = &FpsClient{config: fcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fpsclient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fpsclient.FieldID,
			},
		}
	)
	if value, ok := fcc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: fpsclient.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := fcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fpsclient.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fpsclient.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := fcc.mutation.SampleFileURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fpsclient.FieldSampleFileURL,
		})
		_node.SampleFileURL = value
	}
	if value, ok := fcc.mutation.ImportFileTemplateURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fpsclient.FieldImportFileTemplateURL,
		})
		_node.ImportFileTemplateURL = value
	}
	if value, ok := fcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fpsclient.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fcc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fpsclient.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := fcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fpsclient.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FpsClientCreateBulk is the builder for creating many FpsClient entities in bulk.
type FpsClientCreateBulk struct {
	config
	builders []*FpsClientCreate
}

// Save creates the FpsClient entities in the database.
func (fccb *FpsClientCreateBulk) Save(ctx context.Context) ([]*FpsClient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fccb.builders))
	nodes := make([]*FpsClient, len(fccb.builders))
	mutators := make([]Mutator, len(fccb.builders))
	for i := range fccb.builders {
		func(i int, root context.Context) {
			builder := fccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FpsClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fccb *FpsClientCreateBulk) SaveX(ctx context.Context) []*FpsClient {
	v, err := fccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fccb *FpsClientCreateBulk) Exec(ctx context.Context) error {
	_, err := fccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fccb *FpsClientCreateBulk) ExecX(ctx context.Context) {
	if err := fccb.Exec(ctx); err != nil {
		panic(err)
	}
}
