// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/configtask"
)

// ConfigTask is the model entity for the ConfigTask schema.
type ConfigTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ConfigMappingID holds the value of the "config_mapping_id" field.
	ConfigMappingID int32 `json:"config_mapping_id,omitempty"`
	// For example: 1,2,3,...
	TaskIndex int32 `json:"task_index,omitempty"`
	// For example: http://loyalty-core-api.loyalty-service/api/v1/grant
	EndPoint string `json:"end_point,omitempty"`
	// GET, POST, PUT, ...
	Method string `json:"method,omitempty"`
	// Format JSON
	Header string `json:"header,omitempty"`
	// Format JSON
	RequestParams string `json:"request_params,omitempty"`
	// Format JSON
	RequestBody string `json:"request_body,omitempty"`
	// For example: http 200
	ResponseSuccessHTTPStatus int32 `json:"response_success_http_status,omitempty"`
	// Format JSON, contains path and values
	ResponseSuccessCodeSchema string `json:"response_success_code_schema,omitempty"`
	// Format JSON, contains path
	ResponseMessageSchema string `json:"response_message_schema,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConfigTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case configtask.FieldID, configtask.FieldConfigMappingID, configtask.FieldTaskIndex, configtask.FieldResponseSuccessHTTPStatus:
			values[i] = new(sql.NullInt64)
		case configtask.FieldEndPoint, configtask.FieldMethod, configtask.FieldHeader, configtask.FieldRequestParams, configtask.FieldRequestBody, configtask.FieldResponseSuccessCodeSchema, configtask.FieldResponseMessageSchema, configtask.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case configtask.FieldCreatedAt, configtask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ConfigTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConfigTask fields.
func (ct *ConfigTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configtask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case configtask.FieldConfigMappingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field config_mapping_id", values[i])
			} else if value.Valid {
				ct.ConfigMappingID = int32(value.Int64)
			}
		case configtask.FieldTaskIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_index", values[i])
			} else if value.Valid {
				ct.TaskIndex = int32(value.Int64)
			}
		case configtask.FieldEndPoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_point", values[i])
			} else if value.Valid {
				ct.EndPoint = value.String
			}
		case configtask.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ct.Method = value.String
			}
		case configtask.FieldHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value.Valid {
				ct.Header = value.String
			}
		case configtask.FieldRequestParams:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_params", values[i])
			} else if value.Valid {
				ct.RequestParams = value.String
			}
		case configtask.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				ct.RequestBody = value.String
			}
		case configtask.FieldResponseSuccessHTTPStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_success_http_status", values[i])
			} else if value.Valid {
				ct.ResponseSuccessHTTPStatus = int32(value.Int64)
			}
		case configtask.FieldResponseSuccessCodeSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_success_code_schema", values[i])
			} else if value.Valid {
				ct.ResponseSuccessCodeSchema = value.String
			}
		case configtask.FieldResponseMessageSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_message_schema", values[i])
			} else if value.Valid {
				ct.ResponseMessageSchema = value.String
			}
		case configtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case configtask.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ct.CreatedBy = value.String
			}
		case configtask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ConfigTask.
// Note that you need to call ConfigTask.Unwrap() before calling this method if this ConfigTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ConfigTask) Update() *ConfigTaskUpdateOne {
	return (&ConfigTaskClient{config: ct.config}).UpdateOne(ct)
}

// Unwrap unwraps the ConfigTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ConfigTask) Unwrap() *ConfigTask {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConfigTask is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ConfigTask) String() string {
	var builder strings.Builder
	builder.WriteString("ConfigTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("config_mapping_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.ConfigMappingID))
	builder.WriteString(", ")
	builder.WriteString("task_index=")
	builder.WriteString(fmt.Sprintf("%v", ct.TaskIndex))
	builder.WriteString(", ")
	builder.WriteString("end_point=")
	builder.WriteString(ct.EndPoint)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(ct.Method)
	builder.WriteString(", ")
	builder.WriteString("header=")
	builder.WriteString(ct.Header)
	builder.WriteString(", ")
	builder.WriteString("request_params=")
	builder.WriteString(ct.RequestParams)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(ct.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("response_success_http_status=")
	builder.WriteString(fmt.Sprintf("%v", ct.ResponseSuccessHTTPStatus))
	builder.WriteString(", ")
	builder.WriteString("response_success_code_schema=")
	builder.WriteString(ct.ResponseSuccessCodeSchema)
	builder.WriteString(", ")
	builder.WriteString("response_message_schema=")
	builder.WriteString(ct.ResponseMessageSchema)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ct.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConfigTasks is a parsable slice of ConfigTask.
type ConfigTasks []*ConfigTask

func (ct ConfigTasks) config(cfg config) {
	for _i := range ct {
		ct[_i].config = cfg
	}
}
