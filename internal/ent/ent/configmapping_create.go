// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/configmapping"
)

// ConfigMappingCreate is the builder for creating a ConfigMapping entity.
type ConfigMappingCreate struct {
	config
	mutation *ConfigMappingMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (cmc *ConfigMappingCreate) SetClientID(i int32) *ConfigMappingCreate {
	cmc.mutation.SetClientID(i)
	return cmc
}

// SetTotalTasks sets the "total_tasks" field.
func (cmc *ConfigMappingCreate) SetTotalTasks(i int32) *ConfigMappingCreate {
	cmc.mutation.SetTotalTasks(i)
	return cmc
}

// SetNillableTotalTasks sets the "total_tasks" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableTotalTasks(i *int32) *ConfigMappingCreate {
	if i != nil {
		cmc.SetTotalTasks(*i)
	}
	return cmc
}

// SetDataStartAtRow sets the "data_start_at_row" field.
func (cmc *ConfigMappingCreate) SetDataStartAtRow(i int32) *ConfigMappingCreate {
	cmc.mutation.SetDataStartAtRow(i)
	return cmc
}

// SetNillableDataStartAtRow sets the "data_start_at_row" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableDataStartAtRow(i *int32) *ConfigMappingCreate {
	if i != nil {
		cmc.SetDataStartAtRow(*i)
	}
	return cmc
}

// SetDataAtSheet sets the "data_at_sheet" field.
func (cmc *ConfigMappingCreate) SetDataAtSheet(s string) *ConfigMappingCreate {
	cmc.mutation.SetDataAtSheet(s)
	return cmc
}

// SetRequireColumnIndex sets the "require_column_index" field.
func (cmc *ConfigMappingCreate) SetRequireColumnIndex(s string) *ConfigMappingCreate {
	cmc.mutation.SetRequireColumnIndex(s)
	return cmc
}

// SetErrorColumnIndex sets the "error_column_index" field.
func (cmc *ConfigMappingCreate) SetErrorColumnIndex(s string) *ConfigMappingCreate {
	cmc.mutation.SetErrorColumnIndex(s)
	return cmc
}

// SetResultFileConfig sets the "result_file_config" field.
func (cmc *ConfigMappingCreate) SetResultFileConfig(s string) *ConfigMappingCreate {
	cmc.mutation.SetResultFileConfig(s)
	return cmc
}

// SetNillableResultFileConfig sets the "result_file_config" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableResultFileConfig(s *string) *ConfigMappingCreate {
	if s != nil {
		cmc.SetResultFileConfig(*s)
	}
	return cmc
}

// SetTimeout sets the "timeout" field.
func (cmc *ConfigMappingCreate) SetTimeout(i int32) *ConfigMappingCreate {
	cmc.mutation.SetTimeout(i)
	return cmc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableTimeout(i *int32) *ConfigMappingCreate {
	if i != nil {
		cmc.SetTimeout(*i)
	}
	return cmc
}

// SetInputFileType sets the "input_file_type" field.
func (cmc *ConfigMappingCreate) SetInputFileType(s string) *ConfigMappingCreate {
	cmc.mutation.SetInputFileType(s)
	return cmc
}

// SetNillableInputFileType sets the "input_file_type" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableInputFileType(s *string) *ConfigMappingCreate {
	if s != nil {
		cmc.SetInputFileType(*s)
	}
	return cmc
}

// SetOutputFileType sets the "output_file_type" field.
func (cmc *ConfigMappingCreate) SetOutputFileType(cft configmapping.OutputFileType) *ConfigMappingCreate {
	cmc.mutation.SetOutputFileType(cft)
	return cmc
}

// SetNillableOutputFileType sets the "output_file_type" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableOutputFileType(cft *configmapping.OutputFileType) *ConfigMappingCreate {
	if cft != nil {
		cmc.SetOutputFileType(*cft)
	}
	return cmc
}

// SetCreatedAt sets the "created_at" field.
func (cmc *ConfigMappingCreate) SetCreatedAt(t time.Time) *ConfigMappingCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableCreatedAt(t *time.Time) *ConfigMappingCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetCreatedBy sets the "created_by" field.
func (cmc *ConfigMappingCreate) SetCreatedBy(s string) *ConfigMappingCreate {
	cmc.mutation.SetCreatedBy(s)
	return cmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmc *ConfigMappingCreate) SetUpdatedAt(t time.Time) *ConfigMappingCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmc *ConfigMappingCreate) SetNillableUpdatedAt(t *time.Time) *ConfigMappingCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// Mutation returns the ConfigMappingMutation object of the builder.
func (cmc *ConfigMappingCreate) Mutation() *ConfigMappingMutation {
	return cmc.mutation
}

// Save creates the ConfigMapping in the database.
func (cmc *ConfigMappingCreate) Save(ctx context.Context) (*ConfigMapping, error) {
	var (
		err  error
		node *ConfigMapping
	)
	cmc.defaults()
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			if node, err = cmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			if cmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConfigMapping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConfigMappingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ConfigMappingCreate) SaveX(ctx context.Context) *ConfigMapping {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ConfigMappingCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ConfigMappingCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ConfigMappingCreate) defaults() {
	if _, ok := cmc.mutation.TotalTasks(); !ok {
		v := configmapping.DefaultTotalTasks
		cmc.mutation.SetTotalTasks(v)
	}
	if _, ok := cmc.mutation.DataStartAtRow(); !ok {
		v := configmapping.DefaultDataStartAtRow
		cmc.mutation.SetDataStartAtRow(v)
	}
	if _, ok := cmc.mutation.Timeout(); !ok {
		v := configmapping.DefaultTimeout
		cmc.mutation.SetTimeout(v)
	}
	if _, ok := cmc.mutation.InputFileType(); !ok {
		v := configmapping.DefaultInputFileType
		cmc.mutation.SetInputFileType(v)
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := configmapping.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := configmapping.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ConfigMappingCreate) check() error {
	if _, ok := cmc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "ConfigMapping.client_id"`)}
	}
	if v, ok := cmc.mutation.ClientID(); ok {
		if err := configmapping.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.client_id": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.TotalTasks(); !ok {
		return &ValidationError{Name: "total_tasks", err: errors.New(`ent: missing required field "ConfigMapping.total_tasks"`)}
	}
	if _, ok := cmc.mutation.DataStartAtRow(); !ok {
		return &ValidationError{Name: "data_start_at_row", err: errors.New(`ent: missing required field "ConfigMapping.data_start_at_row"`)}
	}
	if v, ok := cmc.mutation.DataStartAtRow(); ok {
		if err := configmapping.DataStartAtRowValidator(v); err != nil {
			return &ValidationError{Name: "data_start_at_row", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.data_start_at_row": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.DataAtSheet(); !ok {
		return &ValidationError{Name: "data_at_sheet", err: errors.New(`ent: missing required field "ConfigMapping.data_at_sheet"`)}
	}
	if _, ok := cmc.mutation.RequireColumnIndex(); !ok {
		return &ValidationError{Name: "require_column_index", err: errors.New(`ent: missing required field "ConfigMapping.require_column_index"`)}
	}
	if _, ok := cmc.mutation.ErrorColumnIndex(); !ok {
		return &ValidationError{Name: "error_column_index", err: errors.New(`ent: missing required field "ConfigMapping.error_column_index"`)}
	}
	if v, ok := cmc.mutation.ResultFileConfig(); ok {
		if err := configmapping.ResultFileConfigValidator(v); err != nil {
			return &ValidationError{Name: "result_file_config", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.result_file_config": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "ConfigMapping.timeout"`)}
	}
	if _, ok := cmc.mutation.InputFileType(); !ok {
		return &ValidationError{Name: "input_file_type", err: errors.New(`ent: missing required field "ConfigMapping.input_file_type"`)}
	}
	if v, ok := cmc.mutation.OutputFileType(); ok {
		if err := configmapping.OutputFileTypeValidator(v); err != nil {
			return &ValidationError{Name: "output_file_type", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.output_file_type": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConfigMapping.created_at"`)}
	}
	if _, ok := cmc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ConfigMapping.created_by"`)}
	}
	if v, ok := cmc.mutation.CreatedBy(); ok {
		if err := configmapping.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.created_by": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ConfigMapping.updated_at"`)}
	}
	return nil
}

func (cmc *ConfigMappingCreate) sqlSave(ctx context.Context) (*ConfigMapping, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cmc *ConfigMappingCreate) createSpec() (*ConfigMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigMapping{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: configmapping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configmapping.FieldID,
			},
		}
	)
	if value, ok := cmc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := cmc.mutation.TotalTasks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTotalTasks,
		})
		_node.TotalTasks = value
	}
	if value, ok := cmc.mutation.DataStartAtRow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldDataStartAtRow,
		})
		_node.DataStartAtRow = value
	}
	if value, ok := cmc.mutation.DataAtSheet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldDataAtSheet,
		})
		_node.DataAtSheet = value
	}
	if value, ok := cmc.mutation.RequireColumnIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldRequireColumnIndex,
		})
		_node.RequireColumnIndex = value
	}
	if value, ok := cmc.mutation.ErrorColumnIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldErrorColumnIndex,
		})
		_node.ErrorColumnIndex = value
	}
	if value, ok := cmc.mutation.ResultFileConfig(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldResultFileConfig,
		})
		_node.ResultFileConfig = value
	}
	if value, ok := cmc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := cmc.mutation.InputFileType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldInputFileType,
		})
		_node.InputFileType = value
	}
	if value, ok := cmc.mutation.OutputFileType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: configmapping.FieldOutputFileType,
		})
		_node.OutputFileType = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ConfigMappingCreateBulk is the builder for creating many ConfigMapping entities in bulk.
type ConfigMappingCreateBulk struct {
	config
	builders []*ConfigMappingCreate
}

// Save creates the ConfigMapping entities in the database.
func (cmcb *ConfigMappingCreateBulk) Save(ctx context.Context) ([]*ConfigMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ConfigMapping, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ConfigMappingCreateBulk) SaveX(ctx context.Context) []*ConfigMapping {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ConfigMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ConfigMappingCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
