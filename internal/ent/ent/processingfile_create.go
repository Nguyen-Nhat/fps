// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfile"
)

// ProcessingFileCreate is the builder for creating a ProcessingFile entity.
type ProcessingFileCreate struct {
	config
	mutation *ProcessingFileMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (pfc *ProcessingFileCreate) SetClientID(i int32) *ProcessingFileCreate {
	pfc.mutation.SetClientID(i)
	return pfc
}

// SetDisplayName sets the "display_name" field.
func (pfc *ProcessingFileCreate) SetDisplayName(s string) *ProcessingFileCreate {
	pfc.mutation.SetDisplayName(s)
	return pfc
}

// SetFileURL sets the "file_url" field.
func (pfc *ProcessingFileCreate) SetFileURL(s string) *ProcessingFileCreate {
	pfc.mutation.SetFileURL(s)
	return pfc
}

// SetResultFileURL sets the "result_file_url" field.
func (pfc *ProcessingFileCreate) SetResultFileURL(s string) *ProcessingFileCreate {
	pfc.mutation.SetResultFileURL(s)
	return pfc
}

// SetStatus sets the "status" field.
func (pfc *ProcessingFileCreate) SetStatus(i int16) *ProcessingFileCreate {
	pfc.mutation.SetStatus(i)
	return pfc
}

// SetFileParameters sets the "file_parameters" field.
func (pfc *ProcessingFileCreate) SetFileParameters(s string) *ProcessingFileCreate {
	pfc.mutation.SetFileParameters(s)
	return pfc
}

// SetTotalMapping sets the "total_mapping" field.
func (pfc *ProcessingFileCreate) SetTotalMapping(i int32) *ProcessingFileCreate {
	pfc.mutation.SetTotalMapping(i)
	return pfc
}

// SetNillableTotalMapping sets the "total_mapping" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableTotalMapping(i *int32) *ProcessingFileCreate {
	if i != nil {
		pfc.SetTotalMapping(*i)
	}
	return pfc
}

// SetNeedGroupRow sets the "need_group_row" field.
func (pfc *ProcessingFileCreate) SetNeedGroupRow(b bool) *ProcessingFileCreate {
	pfc.mutation.SetNeedGroupRow(b)
	return pfc
}

// SetNillableNeedGroupRow sets the "need_group_row" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableNeedGroupRow(b *bool) *ProcessingFileCreate {
	if b != nil {
		pfc.SetNeedGroupRow(*b)
	}
	return pfc
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (pfc *ProcessingFileCreate) SetStatsTotalRow(i int32) *ProcessingFileCreate {
	pfc.mutation.SetStatsTotalRow(i)
	return pfc
}

// SetNillableStatsTotalRow sets the "stats_total_row" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableStatsTotalRow(i *int32) *ProcessingFileCreate {
	if i != nil {
		pfc.SetStatsTotalRow(*i)
	}
	return pfc
}

// SetStatsTotalProcessed sets the "stats_total_processed" field.
func (pfc *ProcessingFileCreate) SetStatsTotalProcessed(i int32) *ProcessingFileCreate {
	pfc.mutation.SetStatsTotalProcessed(i)
	return pfc
}

// SetNillableStatsTotalProcessed sets the "stats_total_processed" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableStatsTotalProcessed(i *int32) *ProcessingFileCreate {
	if i != nil {
		pfc.SetStatsTotalProcessed(*i)
	}
	return pfc
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (pfc *ProcessingFileCreate) SetStatsTotalSuccess(i int32) *ProcessingFileCreate {
	pfc.mutation.SetStatsTotalSuccess(i)
	return pfc
}

// SetNillableStatsTotalSuccess sets the "stats_total_success" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableStatsTotalSuccess(i *int32) *ProcessingFileCreate {
	if i != nil {
		pfc.SetStatsTotalSuccess(*i)
	}
	return pfc
}

// SetErrorDisplay sets the "error_display" field.
func (pfc *ProcessingFileCreate) SetErrorDisplay(s string) *ProcessingFileCreate {
	pfc.mutation.SetErrorDisplay(s)
	return pfc
}

// SetCreatedAt sets the "created_at" field.
func (pfc *ProcessingFileCreate) SetCreatedAt(t time.Time) *ProcessingFileCreate {
	pfc.mutation.SetCreatedAt(t)
	return pfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableCreatedAt(t *time.Time) *ProcessingFileCreate {
	if t != nil {
		pfc.SetCreatedAt(*t)
	}
	return pfc
}

// SetCreatedBy sets the "created_by" field.
func (pfc *ProcessingFileCreate) SetCreatedBy(s string) *ProcessingFileCreate {
	pfc.mutation.SetCreatedBy(s)
	return pfc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfc *ProcessingFileCreate) SetUpdatedAt(t time.Time) *ProcessingFileCreate {
	pfc.mutation.SetUpdatedAt(t)
	return pfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfc *ProcessingFileCreate) SetNillableUpdatedAt(t *time.Time) *ProcessingFileCreate {
	if t != nil {
		pfc.SetUpdatedAt(*t)
	}
	return pfc
}

// Mutation returns the ProcessingFileMutation object of the builder.
func (pfc *ProcessingFileCreate) Mutation() *ProcessingFileMutation {
	return pfc.mutation
}

// Save creates the ProcessingFile in the database.
func (pfc *ProcessingFileCreate) Save(ctx context.Context) (*ProcessingFile, error) {
	var (
		err  error
		node *ProcessingFile
	)
	pfc.defaults()
	if len(pfc.hooks) == 0 {
		if err = pfc.check(); err != nil {
			return nil, err
		}
		node, err = pfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessingFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfc.check(); err != nil {
				return nil, err
			}
			pfc.mutation = mutation
			if node, err = pfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pfc.hooks) - 1; i >= 0; i-- {
			if pfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcessingFile)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcessingFileMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *ProcessingFileCreate) SaveX(ctx context.Context) *ProcessingFile {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *ProcessingFileCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *ProcessingFileCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *ProcessingFileCreate) defaults() {
	if _, ok := pfc.mutation.TotalMapping(); !ok {
		v := processingfile.DefaultTotalMapping
		pfc.mutation.SetTotalMapping(v)
	}
	if _, ok := pfc.mutation.NeedGroupRow(); !ok {
		v := processingfile.DefaultNeedGroupRow
		pfc.mutation.SetNeedGroupRow(v)
	}
	if _, ok := pfc.mutation.StatsTotalRow(); !ok {
		v := processingfile.DefaultStatsTotalRow
		pfc.mutation.SetStatsTotalRow(v)
	}
	if _, ok := pfc.mutation.StatsTotalProcessed(); !ok {
		v := processingfile.DefaultStatsTotalProcessed
		pfc.mutation.SetStatsTotalProcessed(v)
	}
	if _, ok := pfc.mutation.StatsTotalSuccess(); !ok {
		v := processingfile.DefaultStatsTotalSuccess
		pfc.mutation.SetStatsTotalSuccess(v)
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		v := processingfile.DefaultCreatedAt()
		pfc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		v := processingfile.DefaultUpdatedAt()
		pfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *ProcessingFileCreate) check() error {
	if _, ok := pfc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "ProcessingFile.client_id"`)}
	}
	if _, ok := pfc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "ProcessingFile.display_name"`)}
	}
	if v, ok := pfc.mutation.DisplayName(); ok {
		if err := processingfile.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.display_name": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.FileURL(); !ok {
		return &ValidationError{Name: "file_url", err: errors.New(`ent: missing required field "ProcessingFile.file_url"`)}
	}
	if v, ok := pfc.mutation.FileURL(); ok {
		if err := processingfile.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.file_url": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.ResultFileURL(); !ok {
		return &ValidationError{Name: "result_file_url", err: errors.New(`ent: missing required field "ProcessingFile.result_file_url"`)}
	}
	if _, ok := pfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcessingFile.status"`)}
	}
	if _, ok := pfc.mutation.FileParameters(); !ok {
		return &ValidationError{Name: "file_parameters", err: errors.New(`ent: missing required field "ProcessingFile.file_parameters"`)}
	}
	if _, ok := pfc.mutation.TotalMapping(); !ok {
		return &ValidationError{Name: "total_mapping", err: errors.New(`ent: missing required field "ProcessingFile.total_mapping"`)}
	}
	if _, ok := pfc.mutation.NeedGroupRow(); !ok {
		return &ValidationError{Name: "need_group_row", err: errors.New(`ent: missing required field "ProcessingFile.need_group_row"`)}
	}
	if _, ok := pfc.mutation.StatsTotalRow(); !ok {
		return &ValidationError{Name: "stats_total_row", err: errors.New(`ent: missing required field "ProcessingFile.stats_total_row"`)}
	}
	if _, ok := pfc.mutation.StatsTotalProcessed(); !ok {
		return &ValidationError{Name: "stats_total_processed", err: errors.New(`ent: missing required field "ProcessingFile.stats_total_processed"`)}
	}
	if _, ok := pfc.mutation.StatsTotalSuccess(); !ok {
		return &ValidationError{Name: "stats_total_success", err: errors.New(`ent: missing required field "ProcessingFile.stats_total_success"`)}
	}
	if _, ok := pfc.mutation.ErrorDisplay(); !ok {
		return &ValidationError{Name: "error_display", err: errors.New(`ent: missing required field "ProcessingFile.error_display"`)}
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessingFile.created_at"`)}
	}
	if _, ok := pfc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ProcessingFile.created_by"`)}
	}
	if v, ok := pfc.mutation.CreatedBy(); ok {
		if err := processingfile.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.created_by": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessingFile.updated_at"`)}
	}
	return nil
}

func (pfc *ProcessingFileCreate) sqlSave(ctx context.Context) (*ProcessingFile, error) {
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pfc *ProcessingFileCreate) createSpec() (*ProcessingFile, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessingFile{config: pfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: processingfile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: processingfile.FieldID,
			},
		}
	)
	if value, ok := pfc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := pfc.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := pfc.mutation.FileURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldFileURL,
		})
		_node.FileURL = value
	}
	if value, ok := pfc.mutation.ResultFileURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldResultFileURL,
		})
		_node.ResultFileURL = value
	}
	if value, ok := pfc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfile.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pfc.mutation.FileParameters(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldFileParameters,
		})
		_node.FileParameters = value
	}
	if value, ok := pfc.mutation.TotalMapping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldTotalMapping,
		})
		_node.TotalMapping = value
	}
	if value, ok := pfc.mutation.NeedGroupRow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: processingfile.FieldNeedGroupRow,
		})
		_node.NeedGroupRow = value
	}
	if value, ok := pfc.mutation.StatsTotalRow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalRow,
		})
		_node.StatsTotalRow = value
	}
	if value, ok := pfc.mutation.StatsTotalProcessed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalProcessed,
		})
		_node.StatsTotalProcessed = value
	}
	if value, ok := pfc.mutation.StatsTotalSuccess(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalSuccess,
		})
		_node.StatsTotalSuccess = value
	}
	if value, ok := pfc.mutation.ErrorDisplay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldErrorDisplay,
		})
		_node.ErrorDisplay = value
	}
	if value, ok := pfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pfc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessingFileCreateBulk is the builder for creating many ProcessingFile entities in bulk.
type ProcessingFileCreateBulk struct {
	config
	builders []*ProcessingFileCreate
}

// Save creates the ProcessingFile entities in the database.
func (pfcb *ProcessingFileCreateBulk) Save(ctx context.Context) ([]*ProcessingFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*ProcessingFile, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessingFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *ProcessingFileCreateBulk) SaveX(ctx context.Context) []*ProcessingFile {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *ProcessingFileCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *ProcessingFileCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
