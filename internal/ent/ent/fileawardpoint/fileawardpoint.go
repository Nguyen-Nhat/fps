// Code generated by ent, DO NOT EDIT.

package fileawardpoint

import (
	"time"
)

const (
	// Label holds the string label denoting the fileawardpoint type in the database.
	Label = "file_award_point"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMerchantID holds the string denoting the merchant_id field in the database.
	FieldMerchantID = "merchant_id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldResultFileURL holds the string denoting the result_file_url field in the database.
	FieldResultFileURL = "result_file_url"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatsTotalRow holds the string denoting the stats_total_row field in the database.
	FieldStatsTotalRow = "stats_total_row"
	// FieldStatsTotalSuccess holds the string denoting the stats_total_success field in the database.
	FieldStatsTotalSuccess = "stats_total_success"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// Table holds the table name of the fileawardpoint in the database.
	Table = "file_award_point"
)

// Columns holds all SQL columns for fileawardpoint fields.
var Columns = []string{
	FieldID,
	FieldMerchantID,
	FieldDisplayName,
	FieldFileURL,
	FieldResultFileURL,
	FieldNote,
	FieldStatus,
	FieldStatsTotalRow,
	FieldStatsTotalSuccess,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// FileURLValidator is a validator for the "file_url" field. It is called by the builders before save.
	FileURLValidator func(string) error
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int16
	// DefaultStatsTotalRow holds the default value on creation for the "stats_total_row" field.
	DefaultStatsTotalRow int32
	// DefaultStatsTotalSuccess holds the default value on creation for the "stats_total_success" field.
	DefaultStatsTotalSuccess int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
