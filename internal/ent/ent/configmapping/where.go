// Code generated by ent, DO NOT EDIT.

package configmapping

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// TotalTasks applies equality check predicate on the "total_tasks" field. It's identical to TotalTasksEQ.
func TotalTasks(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalTasks), v))
	})
}

// DataStartAtRow applies equality check predicate on the "data_start_at_row" field. It's identical to DataStartAtRowEQ.
func DataStartAtRow(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataStartAtRow), v))
	})
}

// DataAtSheet applies equality check predicate on the "data_at_sheet" field. It's identical to DataAtSheetEQ.
func DataAtSheet(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataAtSheet), v))
	})
}

// RequireColumnIndex applies equality check predicate on the "require_column_index" field. It's identical to RequireColumnIndexEQ.
func RequireColumnIndex(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireColumnIndex), v))
	})
}

// ErrorColumnIndex applies equality check predicate on the "error_column_index" field. It's identical to ErrorColumnIndexEQ.
func ErrorColumnIndex(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorColumnIndex), v))
	})
}

// ResultFileConfig applies equality check predicate on the "result_file_config" field. It's identical to ResultFileConfigEQ.
func ResultFileConfig(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultFileConfig), v))
	})
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// InputFileType applies equality check predicate on the "input_file_type" field. It's identical to InputFileTypeEQ.
func InputFileType(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInputFileType), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientID), v))
	})
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientID), v...))
	})
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientID), v...))
	})
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientID), v))
	})
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientID), v))
	})
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientID), v))
	})
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientID), v))
	})
}

// TotalTasksEQ applies the EQ predicate on the "total_tasks" field.
func TotalTasksEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalTasks), v))
	})
}

// TotalTasksNEQ applies the NEQ predicate on the "total_tasks" field.
func TotalTasksNEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalTasks), v))
	})
}

// TotalTasksIn applies the In predicate on the "total_tasks" field.
func TotalTasksIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalTasks), v...))
	})
}

// TotalTasksNotIn applies the NotIn predicate on the "total_tasks" field.
func TotalTasksNotIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalTasks), v...))
	})
}

// TotalTasksGT applies the GT predicate on the "total_tasks" field.
func TotalTasksGT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalTasks), v))
	})
}

// TotalTasksGTE applies the GTE predicate on the "total_tasks" field.
func TotalTasksGTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalTasks), v))
	})
}

// TotalTasksLT applies the LT predicate on the "total_tasks" field.
func TotalTasksLT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalTasks), v))
	})
}

// TotalTasksLTE applies the LTE predicate on the "total_tasks" field.
func TotalTasksLTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalTasks), v))
	})
}

// DataStartAtRowEQ applies the EQ predicate on the "data_start_at_row" field.
func DataStartAtRowEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataStartAtRow), v))
	})
}

// DataStartAtRowNEQ applies the NEQ predicate on the "data_start_at_row" field.
func DataStartAtRowNEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataStartAtRow), v))
	})
}

// DataStartAtRowIn applies the In predicate on the "data_start_at_row" field.
func DataStartAtRowIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDataStartAtRow), v...))
	})
}

// DataStartAtRowNotIn applies the NotIn predicate on the "data_start_at_row" field.
func DataStartAtRowNotIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDataStartAtRow), v...))
	})
}

// DataStartAtRowGT applies the GT predicate on the "data_start_at_row" field.
func DataStartAtRowGT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataStartAtRow), v))
	})
}

// DataStartAtRowGTE applies the GTE predicate on the "data_start_at_row" field.
func DataStartAtRowGTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataStartAtRow), v))
	})
}

// DataStartAtRowLT applies the LT predicate on the "data_start_at_row" field.
func DataStartAtRowLT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataStartAtRow), v))
	})
}

// DataStartAtRowLTE applies the LTE predicate on the "data_start_at_row" field.
func DataStartAtRowLTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataStartAtRow), v))
	})
}

// DataAtSheetEQ applies the EQ predicate on the "data_at_sheet" field.
func DataAtSheetEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetNEQ applies the NEQ predicate on the "data_at_sheet" field.
func DataAtSheetNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetIn applies the In predicate on the "data_at_sheet" field.
func DataAtSheetIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDataAtSheet), v...))
	})
}

// DataAtSheetNotIn applies the NotIn predicate on the "data_at_sheet" field.
func DataAtSheetNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDataAtSheet), v...))
	})
}

// DataAtSheetGT applies the GT predicate on the "data_at_sheet" field.
func DataAtSheetGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetGTE applies the GTE predicate on the "data_at_sheet" field.
func DataAtSheetGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetLT applies the LT predicate on the "data_at_sheet" field.
func DataAtSheetLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetLTE applies the LTE predicate on the "data_at_sheet" field.
func DataAtSheetLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetContains applies the Contains predicate on the "data_at_sheet" field.
func DataAtSheetContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetHasPrefix applies the HasPrefix predicate on the "data_at_sheet" field.
func DataAtSheetHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetHasSuffix applies the HasSuffix predicate on the "data_at_sheet" field.
func DataAtSheetHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetEqualFold applies the EqualFold predicate on the "data_at_sheet" field.
func DataAtSheetEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDataAtSheet), v))
	})
}

// DataAtSheetContainsFold applies the ContainsFold predicate on the "data_at_sheet" field.
func DataAtSheetContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDataAtSheet), v))
	})
}

// RequireColumnIndexEQ applies the EQ predicate on the "require_column_index" field.
func RequireColumnIndexEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexNEQ applies the NEQ predicate on the "require_column_index" field.
func RequireColumnIndexNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexIn applies the In predicate on the "require_column_index" field.
func RequireColumnIndexIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequireColumnIndex), v...))
	})
}

// RequireColumnIndexNotIn applies the NotIn predicate on the "require_column_index" field.
func RequireColumnIndexNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequireColumnIndex), v...))
	})
}

// RequireColumnIndexGT applies the GT predicate on the "require_column_index" field.
func RequireColumnIndexGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexGTE applies the GTE predicate on the "require_column_index" field.
func RequireColumnIndexGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexLT applies the LT predicate on the "require_column_index" field.
func RequireColumnIndexLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexLTE applies the LTE predicate on the "require_column_index" field.
func RequireColumnIndexLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexContains applies the Contains predicate on the "require_column_index" field.
func RequireColumnIndexContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexHasPrefix applies the HasPrefix predicate on the "require_column_index" field.
func RequireColumnIndexHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexHasSuffix applies the HasSuffix predicate on the "require_column_index" field.
func RequireColumnIndexHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexEqualFold applies the EqualFold predicate on the "require_column_index" field.
func RequireColumnIndexEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequireColumnIndex), v))
	})
}

// RequireColumnIndexContainsFold applies the ContainsFold predicate on the "require_column_index" field.
func RequireColumnIndexContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequireColumnIndex), v))
	})
}

// ErrorColumnIndexEQ applies the EQ predicate on the "error_column_index" field.
func ErrorColumnIndexEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexNEQ applies the NEQ predicate on the "error_column_index" field.
func ErrorColumnIndexNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexIn applies the In predicate on the "error_column_index" field.
func ErrorColumnIndexIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldErrorColumnIndex), v...))
	})
}

// ErrorColumnIndexNotIn applies the NotIn predicate on the "error_column_index" field.
func ErrorColumnIndexNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldErrorColumnIndex), v...))
	})
}

// ErrorColumnIndexGT applies the GT predicate on the "error_column_index" field.
func ErrorColumnIndexGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexGTE applies the GTE predicate on the "error_column_index" field.
func ErrorColumnIndexGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexLT applies the LT predicate on the "error_column_index" field.
func ErrorColumnIndexLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexLTE applies the LTE predicate on the "error_column_index" field.
func ErrorColumnIndexLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexContains applies the Contains predicate on the "error_column_index" field.
func ErrorColumnIndexContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexHasPrefix applies the HasPrefix predicate on the "error_column_index" field.
func ErrorColumnIndexHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexHasSuffix applies the HasSuffix predicate on the "error_column_index" field.
func ErrorColumnIndexHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexEqualFold applies the EqualFold predicate on the "error_column_index" field.
func ErrorColumnIndexEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorColumnIndex), v))
	})
}

// ErrorColumnIndexContainsFold applies the ContainsFold predicate on the "error_column_index" field.
func ErrorColumnIndexContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorColumnIndex), v))
	})
}

// ResultFileConfigEQ applies the EQ predicate on the "result_file_config" field.
func ResultFileConfigEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigNEQ applies the NEQ predicate on the "result_file_config" field.
func ResultFileConfigNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigIn applies the In predicate on the "result_file_config" field.
func ResultFileConfigIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResultFileConfig), v...))
	})
}

// ResultFileConfigNotIn applies the NotIn predicate on the "result_file_config" field.
func ResultFileConfigNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResultFileConfig), v...))
	})
}

// ResultFileConfigGT applies the GT predicate on the "result_file_config" field.
func ResultFileConfigGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigGTE applies the GTE predicate on the "result_file_config" field.
func ResultFileConfigGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigLT applies the LT predicate on the "result_file_config" field.
func ResultFileConfigLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigLTE applies the LTE predicate on the "result_file_config" field.
func ResultFileConfigLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigContains applies the Contains predicate on the "result_file_config" field.
func ResultFileConfigContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigHasPrefix applies the HasPrefix predicate on the "result_file_config" field.
func ResultFileConfigHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigHasSuffix applies the HasSuffix predicate on the "result_file_config" field.
func ResultFileConfigHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigIsNil applies the IsNil predicate on the "result_file_config" field.
func ResultFileConfigIsNil() predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResultFileConfig)))
	})
}

// ResultFileConfigNotNil applies the NotNil predicate on the "result_file_config" field.
func ResultFileConfigNotNil() predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResultFileConfig)))
	})
}

// ResultFileConfigEqualFold applies the EqualFold predicate on the "result_file_config" field.
func ResultFileConfigEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResultFileConfig), v))
	})
}

// ResultFileConfigContainsFold applies the ContainsFold predicate on the "result_file_config" field.
func ResultFileConfigContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResultFileConfig), v))
	})
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeout), v))
	})
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimeout), v...))
	})
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int32) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimeout), v...))
	})
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeout), v))
	})
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeout), v))
	})
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeout), v))
	})
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int32) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeout), v))
	})
}

// InputFileTypeEQ applies the EQ predicate on the "input_file_type" field.
func InputFileTypeEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeNEQ applies the NEQ predicate on the "input_file_type" field.
func InputFileTypeNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeIn applies the In predicate on the "input_file_type" field.
func InputFileTypeIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInputFileType), v...))
	})
}

// InputFileTypeNotIn applies the NotIn predicate on the "input_file_type" field.
func InputFileTypeNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInputFileType), v...))
	})
}

// InputFileTypeGT applies the GT predicate on the "input_file_type" field.
func InputFileTypeGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeGTE applies the GTE predicate on the "input_file_type" field.
func InputFileTypeGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeLT applies the LT predicate on the "input_file_type" field.
func InputFileTypeLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeLTE applies the LTE predicate on the "input_file_type" field.
func InputFileTypeLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeContains applies the Contains predicate on the "input_file_type" field.
func InputFileTypeContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeHasPrefix applies the HasPrefix predicate on the "input_file_type" field.
func InputFileTypeHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeHasSuffix applies the HasSuffix predicate on the "input_file_type" field.
func InputFileTypeHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeEqualFold applies the EqualFold predicate on the "input_file_type" field.
func InputFileTypeEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInputFileType), v))
	})
}

// InputFileTypeContainsFold applies the ContainsFold predicate on the "input_file_type" field.
func InputFileTypeContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInputFileType), v))
	})
}

// OutputFileTypeEQ applies the EQ predicate on the "output_file_type" field.
func OutputFileTypeEQ(v OutputFileType) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutputFileType), v))
	})
}

// OutputFileTypeNEQ applies the NEQ predicate on the "output_file_type" field.
func OutputFileTypeNEQ(v OutputFileType) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutputFileType), v))
	})
}

// OutputFileTypeIn applies the In predicate on the "output_file_type" field.
func OutputFileTypeIn(vs ...OutputFileType) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutputFileType), v...))
	})
}

// OutputFileTypeNotIn applies the NotIn predicate on the "output_file_type" field.
func OutputFileTypeNotIn(vs ...OutputFileType) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutputFileType), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConfigMapping {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConfigMapping) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConfigMapping) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConfigMapping) predicate.ConfigMapping {
	return predicate.ConfigMapping(func(s *sql.Selector) {
		p(s.Not())
	})
}
