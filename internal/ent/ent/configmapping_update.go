// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/configmapping"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ConfigMappingUpdate is the builder for updating ConfigMapping entities.
type ConfigMappingUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigMappingMutation
}

// Where appends a list predicates to the ConfigMappingUpdate builder.
func (cmu *ConfigMappingUpdate) Where(ps ...predicate.ConfigMapping) *ConfigMappingUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetClientID sets the "client_id" field.
func (cmu *ConfigMappingUpdate) SetClientID(i int32) *ConfigMappingUpdate {
	cmu.mutation.ResetClientID()
	cmu.mutation.SetClientID(i)
	return cmu
}

// AddClientID adds i to the "client_id" field.
func (cmu *ConfigMappingUpdate) AddClientID(i int32) *ConfigMappingUpdate {
	cmu.mutation.AddClientID(i)
	return cmu
}

// SetTotalTasks sets the "total_tasks" field.
func (cmu *ConfigMappingUpdate) SetTotalTasks(i int32) *ConfigMappingUpdate {
	cmu.mutation.ResetTotalTasks()
	cmu.mutation.SetTotalTasks(i)
	return cmu
}

// SetNillableTotalTasks sets the "total_tasks" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableTotalTasks(i *int32) *ConfigMappingUpdate {
	if i != nil {
		cmu.SetTotalTasks(*i)
	}
	return cmu
}

// AddTotalTasks adds i to the "total_tasks" field.
func (cmu *ConfigMappingUpdate) AddTotalTasks(i int32) *ConfigMappingUpdate {
	cmu.mutation.AddTotalTasks(i)
	return cmu
}

// SetDataStartAtRow sets the "data_start_at_row" field.
func (cmu *ConfigMappingUpdate) SetDataStartAtRow(i int32) *ConfigMappingUpdate {
	cmu.mutation.ResetDataStartAtRow()
	cmu.mutation.SetDataStartAtRow(i)
	return cmu
}

// SetNillableDataStartAtRow sets the "data_start_at_row" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableDataStartAtRow(i *int32) *ConfigMappingUpdate {
	if i != nil {
		cmu.SetDataStartAtRow(*i)
	}
	return cmu
}

// AddDataStartAtRow adds i to the "data_start_at_row" field.
func (cmu *ConfigMappingUpdate) AddDataStartAtRow(i int32) *ConfigMappingUpdate {
	cmu.mutation.AddDataStartAtRow(i)
	return cmu
}

// SetDataAtSheet sets the "data_at_sheet" field.
func (cmu *ConfigMappingUpdate) SetDataAtSheet(s string) *ConfigMappingUpdate {
	cmu.mutation.SetDataAtSheet(s)
	return cmu
}

// SetRequireColumnIndex sets the "require_column_index" field.
func (cmu *ConfigMappingUpdate) SetRequireColumnIndex(s string) *ConfigMappingUpdate {
	cmu.mutation.SetRequireColumnIndex(s)
	return cmu
}

// SetErrorColumnIndex sets the "error_column_index" field.
func (cmu *ConfigMappingUpdate) SetErrorColumnIndex(s string) *ConfigMappingUpdate {
	cmu.mutation.SetErrorColumnIndex(s)
	return cmu
}

// SetTimeout sets the "timeout" field.
func (cmu *ConfigMappingUpdate) SetTimeout(i int32) *ConfigMappingUpdate {
	cmu.mutation.ResetTimeout()
	cmu.mutation.SetTimeout(i)
	return cmu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableTimeout(i *int32) *ConfigMappingUpdate {
	if i != nil {
		cmu.SetTimeout(*i)
	}
	return cmu
}

// AddTimeout adds i to the "timeout" field.
func (cmu *ConfigMappingUpdate) AddTimeout(i int32) *ConfigMappingUpdate {
	cmu.mutation.AddTimeout(i)
	return cmu
}

// SetInputFileType sets the "input_file_type" field.
func (cmu *ConfigMappingUpdate) SetInputFileType(s string) *ConfigMappingUpdate {
	cmu.mutation.SetInputFileType(s)
	return cmu
}

// SetNillableInputFileType sets the "input_file_type" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableInputFileType(s *string) *ConfigMappingUpdate {
	if s != nil {
		cmu.SetInputFileType(*s)
	}
	return cmu
}

// SetOutputFileType sets the "output_file_type" field.
func (cmu *ConfigMappingUpdate) SetOutputFileType(cft configmapping.OutputFileType) *ConfigMappingUpdate {
	cmu.mutation.SetOutputFileType(cft)
	return cmu
}

// SetNillableOutputFileType sets the "output_file_type" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableOutputFileType(cft *configmapping.OutputFileType) *ConfigMappingUpdate {
	if cft != nil {
		cmu.SetOutputFileType(*cft)
	}
	return cmu
}

// SetCreatedAt sets the "created_at" field.
func (cmu *ConfigMappingUpdate) SetCreatedAt(t time.Time) *ConfigMappingUpdate {
	cmu.mutation.SetCreatedAt(t)
	return cmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmu *ConfigMappingUpdate) SetNillableCreatedAt(t *time.Time) *ConfigMappingUpdate {
	if t != nil {
		cmu.SetCreatedAt(*t)
	}
	return cmu
}

// SetCreatedBy sets the "created_by" field.
func (cmu *ConfigMappingUpdate) SetCreatedBy(s string) *ConfigMappingUpdate {
	cmu.mutation.SetCreatedBy(s)
	return cmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cmu *ConfigMappingUpdate) SetUpdatedAt(t time.Time) *ConfigMappingUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// Mutation returns the ConfigMappingMutation object of the builder.
func (cmu *ConfigMappingUpdate) Mutation() *ConfigMappingMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ConfigMappingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmu.defaults()
	if len(cmu.hooks) == 0 {
		if err = cmu.check(); err != nil {
			return 0, err
		}
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmu.check(); err != nil {
				return 0, err
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			if cmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ConfigMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ConfigMappingUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ConfigMappingUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *ConfigMappingUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := configmapping.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ConfigMappingUpdate) check() error {
	if v, ok := cmu.mutation.ClientID(); ok {
		if err := configmapping.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.client_id": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.DataStartAtRow(); ok {
		if err := configmapping.DataStartAtRowValidator(v); err != nil {
			return &ValidationError{Name: "data_start_at_row", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.data_start_at_row": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.OutputFileType(); ok {
		if err := configmapping.OutputFileTypeValidator(v); err != nil {
			return &ValidationError{Name: "output_file_type", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.output_file_type": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.CreatedBy(); ok {
		if err := configmapping.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.created_by": %w`, err)}
		}
	}
	return nil
}

func (cmu *ConfigMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configmapping.Table,
			Columns: configmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configmapping.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldClientID,
		})
	}
	if value, ok := cmu.mutation.AddedClientID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldClientID,
		})
	}
	if value, ok := cmu.mutation.TotalTasks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTotalTasks,
		})
	}
	if value, ok := cmu.mutation.AddedTotalTasks(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTotalTasks,
		})
	}
	if value, ok := cmu.mutation.DataStartAtRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldDataStartAtRow,
		})
	}
	if value, ok := cmu.mutation.AddedDataStartAtRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldDataStartAtRow,
		})
	}
	if value, ok := cmu.mutation.DataAtSheet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldDataAtSheet,
		})
	}
	if value, ok := cmu.mutation.RequireColumnIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldRequireColumnIndex,
		})
	}
	if value, ok := cmu.mutation.ErrorColumnIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldErrorColumnIndex,
		})
	}
	if value, ok := cmu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTimeout,
		})
	}
	if value, ok := cmu.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTimeout,
		})
	}
	if value, ok := cmu.mutation.InputFileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldInputFileType,
		})
	}
	if value, ok := cmu.mutation.OutputFileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: configmapping.FieldOutputFileType,
		})
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldCreatedBy,
		})
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConfigMappingUpdateOne is the builder for updating a single ConfigMapping entity.
type ConfigMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigMappingMutation
}

// SetClientID sets the "client_id" field.
func (cmuo *ConfigMappingUpdateOne) SetClientID(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.ResetClientID()
	cmuo.mutation.SetClientID(i)
	return cmuo
}

// AddClientID adds i to the "client_id" field.
func (cmuo *ConfigMappingUpdateOne) AddClientID(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.AddClientID(i)
	return cmuo
}

// SetTotalTasks sets the "total_tasks" field.
func (cmuo *ConfigMappingUpdateOne) SetTotalTasks(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.ResetTotalTasks()
	cmuo.mutation.SetTotalTasks(i)
	return cmuo
}

// SetNillableTotalTasks sets the "total_tasks" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableTotalTasks(i *int32) *ConfigMappingUpdateOne {
	if i != nil {
		cmuo.SetTotalTasks(*i)
	}
	return cmuo
}

// AddTotalTasks adds i to the "total_tasks" field.
func (cmuo *ConfigMappingUpdateOne) AddTotalTasks(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.AddTotalTasks(i)
	return cmuo
}

// SetDataStartAtRow sets the "data_start_at_row" field.
func (cmuo *ConfigMappingUpdateOne) SetDataStartAtRow(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.ResetDataStartAtRow()
	cmuo.mutation.SetDataStartAtRow(i)
	return cmuo
}

// SetNillableDataStartAtRow sets the "data_start_at_row" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableDataStartAtRow(i *int32) *ConfigMappingUpdateOne {
	if i != nil {
		cmuo.SetDataStartAtRow(*i)
	}
	return cmuo
}

// AddDataStartAtRow adds i to the "data_start_at_row" field.
func (cmuo *ConfigMappingUpdateOne) AddDataStartAtRow(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.AddDataStartAtRow(i)
	return cmuo
}

// SetDataAtSheet sets the "data_at_sheet" field.
func (cmuo *ConfigMappingUpdateOne) SetDataAtSheet(s string) *ConfigMappingUpdateOne {
	cmuo.mutation.SetDataAtSheet(s)
	return cmuo
}

// SetRequireColumnIndex sets the "require_column_index" field.
func (cmuo *ConfigMappingUpdateOne) SetRequireColumnIndex(s string) *ConfigMappingUpdateOne {
	cmuo.mutation.SetRequireColumnIndex(s)
	return cmuo
}

// SetErrorColumnIndex sets the "error_column_index" field.
func (cmuo *ConfigMappingUpdateOne) SetErrorColumnIndex(s string) *ConfigMappingUpdateOne {
	cmuo.mutation.SetErrorColumnIndex(s)
	return cmuo
}

// SetTimeout sets the "timeout" field.
func (cmuo *ConfigMappingUpdateOne) SetTimeout(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.ResetTimeout()
	cmuo.mutation.SetTimeout(i)
	return cmuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableTimeout(i *int32) *ConfigMappingUpdateOne {
	if i != nil {
		cmuo.SetTimeout(*i)
	}
	return cmuo
}

// AddTimeout adds i to the "timeout" field.
func (cmuo *ConfigMappingUpdateOne) AddTimeout(i int32) *ConfigMappingUpdateOne {
	cmuo.mutation.AddTimeout(i)
	return cmuo
}

// SetInputFileType sets the "input_file_type" field.
func (cmuo *ConfigMappingUpdateOne) SetInputFileType(s string) *ConfigMappingUpdateOne {
	cmuo.mutation.SetInputFileType(s)
	return cmuo
}

// SetNillableInputFileType sets the "input_file_type" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableInputFileType(s *string) *ConfigMappingUpdateOne {
	if s != nil {
		cmuo.SetInputFileType(*s)
	}
	return cmuo
}

// SetOutputFileType sets the "output_file_type" field.
func (cmuo *ConfigMappingUpdateOne) SetOutputFileType(cft configmapping.OutputFileType) *ConfigMappingUpdateOne {
	cmuo.mutation.SetOutputFileType(cft)
	return cmuo
}

// SetNillableOutputFileType sets the "output_file_type" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableOutputFileType(cft *configmapping.OutputFileType) *ConfigMappingUpdateOne {
	if cft != nil {
		cmuo.SetOutputFileType(*cft)
	}
	return cmuo
}

// SetCreatedAt sets the "created_at" field.
func (cmuo *ConfigMappingUpdateOne) SetCreatedAt(t time.Time) *ConfigMappingUpdateOne {
	cmuo.mutation.SetCreatedAt(t)
	return cmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmuo *ConfigMappingUpdateOne) SetNillableCreatedAt(t *time.Time) *ConfigMappingUpdateOne {
	if t != nil {
		cmuo.SetCreatedAt(*t)
	}
	return cmuo
}

// SetCreatedBy sets the "created_by" field.
func (cmuo *ConfigMappingUpdateOne) SetCreatedBy(s string) *ConfigMappingUpdateOne {
	cmuo.mutation.SetCreatedBy(s)
	return cmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cmuo *ConfigMappingUpdateOne) SetUpdatedAt(t time.Time) *ConfigMappingUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// Mutation returns the ConfigMappingMutation object of the builder.
func (cmuo *ConfigMappingUpdateOne) Mutation() *ConfigMappingMutation {
	return cmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ConfigMappingUpdateOne) Select(field string, fields ...string) *ConfigMappingUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ConfigMapping entity.
func (cmuo *ConfigMappingUpdateOne) Save(ctx context.Context) (*ConfigMapping, error) {
	var (
		err  error
		node *ConfigMapping
	)
	cmuo.defaults()
	if len(cmuo.hooks) == 0 {
		if err = cmuo.check(); err != nil {
			return nil, err
		}
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigMappingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmuo.check(); err != nil {
				return nil, err
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			if cmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConfigMapping)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConfigMappingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ConfigMappingUpdateOne) SaveX(ctx context.Context) *ConfigMapping {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ConfigMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ConfigMappingUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *ConfigMappingUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := configmapping.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ConfigMappingUpdateOne) check() error {
	if v, ok := cmuo.mutation.ClientID(); ok {
		if err := configmapping.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.client_id": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.DataStartAtRow(); ok {
		if err := configmapping.DataStartAtRowValidator(v); err != nil {
			return &ValidationError{Name: "data_start_at_row", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.data_start_at_row": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.OutputFileType(); ok {
		if err := configmapping.OutputFileTypeValidator(v); err != nil {
			return &ValidationError{Name: "output_file_type", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.output_file_type": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.CreatedBy(); ok {
		if err := configmapping.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigMapping.created_by": %w`, err)}
		}
	}
	return nil
}

func (cmuo *ConfigMappingUpdateOne) sqlSave(ctx context.Context) (_node *ConfigMapping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configmapping.Table,
			Columns: configmapping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configmapping.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configmapping.FieldID)
		for _, f := range fields {
			if !configmapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configmapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldClientID,
		})
	}
	if value, ok := cmuo.mutation.AddedClientID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldClientID,
		})
	}
	if value, ok := cmuo.mutation.TotalTasks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTotalTasks,
		})
	}
	if value, ok := cmuo.mutation.AddedTotalTasks(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTotalTasks,
		})
	}
	if value, ok := cmuo.mutation.DataStartAtRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldDataStartAtRow,
		})
	}
	if value, ok := cmuo.mutation.AddedDataStartAtRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldDataStartAtRow,
		})
	}
	if value, ok := cmuo.mutation.DataAtSheet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldDataAtSheet,
		})
	}
	if value, ok := cmuo.mutation.RequireColumnIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldRequireColumnIndex,
		})
	}
	if value, ok := cmuo.mutation.ErrorColumnIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldErrorColumnIndex,
		})
	}
	if value, ok := cmuo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTimeout,
		})
	}
	if value, ok := cmuo.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configmapping.FieldTimeout,
		})
	}
	if value, ok := cmuo.mutation.InputFileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldInputFileType,
		})
	}
	if value, ok := cmuo.mutation.OutputFileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: configmapping.FieldOutputFileType,
		})
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configmapping.FieldCreatedBy,
		})
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configmapping.FieldUpdatedAt,
		})
	}
	_node = &ConfigMapping{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
