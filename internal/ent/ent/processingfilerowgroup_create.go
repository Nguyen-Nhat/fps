// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfilerowgroup"
)

// ProcessingFileRowGroupCreate is the builder for creating a ProcessingFileRowGroup entity.
type ProcessingFileRowGroupCreate struct {
	config
	mutation *ProcessingFileRowGroupMutation
	hooks    []Hook
}

// SetFileID sets the "file_id" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetFileID(i int64) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetFileID(i)
	return pfrgc
}

// SetTaskIndex sets the "task_index" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetTaskIndex(i int32) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetTaskIndex(i)
	return pfrgc
}

// SetGroupByValue sets the "group_by_value" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetGroupByValue(s string) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetGroupByValue(s)
	return pfrgc
}

// SetTotalRows sets the "total_rows" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetTotalRows(i int32) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetTotalRows(i)
	return pfrgc
}

// SetRowIndexList sets the "row_index_list" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetRowIndexList(s string) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetRowIndexList(s)
	return pfrgc
}

// SetGroupRequestCurl sets the "group_request_curl" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetGroupRequestCurl(s string) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetGroupRequestCurl(s)
	return pfrgc
}

// SetGroupResponseRaw sets the "group_response_raw" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetGroupResponseRaw(s string) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetGroupResponseRaw(s)
	return pfrgc
}

// SetStatus sets the "status" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetStatus(i int16) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetStatus(i)
	return pfrgc
}

// SetErrorDisplay sets the "error_display" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetErrorDisplay(s string) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetErrorDisplay(s)
	return pfrgc
}

// SetExecutedTime sets the "executed_time" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetExecutedTime(i int64) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetExecutedTime(i)
	return pfrgc
}

// SetCreatedAt sets the "created_at" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetCreatedAt(t time.Time) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetCreatedAt(t)
	return pfrgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfrgc *ProcessingFileRowGroupCreate) SetNillableCreatedAt(t *time.Time) *ProcessingFileRowGroupCreate {
	if t != nil {
		pfrgc.SetCreatedAt(*t)
	}
	return pfrgc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfrgc *ProcessingFileRowGroupCreate) SetUpdatedAt(t time.Time) *ProcessingFileRowGroupCreate {
	pfrgc.mutation.SetUpdatedAt(t)
	return pfrgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfrgc *ProcessingFileRowGroupCreate) SetNillableUpdatedAt(t *time.Time) *ProcessingFileRowGroupCreate {
	if t != nil {
		pfrgc.SetUpdatedAt(*t)
	}
	return pfrgc
}

// Mutation returns the ProcessingFileRowGroupMutation object of the builder.
func (pfrgc *ProcessingFileRowGroupCreate) Mutation() *ProcessingFileRowGroupMutation {
	return pfrgc.mutation
}

// Save creates the ProcessingFileRowGroup in the database.
func (pfrgc *ProcessingFileRowGroupCreate) Save(ctx context.Context) (*ProcessingFileRowGroup, error) {
	var (
		err  error
		node *ProcessingFileRowGroup
	)
	pfrgc.defaults()
	if len(pfrgc.hooks) == 0 {
		if err = pfrgc.check(); err != nil {
			return nil, err
		}
		node, err = pfrgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessingFileRowGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfrgc.check(); err != nil {
				return nil, err
			}
			pfrgc.mutation = mutation
			if node, err = pfrgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pfrgc.hooks) - 1; i >= 0; i-- {
			if pfrgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pfrgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pfrgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcessingFileRowGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcessingFileRowGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pfrgc *ProcessingFileRowGroupCreate) SaveX(ctx context.Context) *ProcessingFileRowGroup {
	v, err := pfrgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfrgc *ProcessingFileRowGroupCreate) Exec(ctx context.Context) error {
	_, err := pfrgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfrgc *ProcessingFileRowGroupCreate) ExecX(ctx context.Context) {
	if err := pfrgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfrgc *ProcessingFileRowGroupCreate) defaults() {
	if _, ok := pfrgc.mutation.CreatedAt(); !ok {
		v := processingfilerowgroup.DefaultCreatedAt()
		pfrgc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfrgc.mutation.UpdatedAt(); !ok {
		v := processingfilerowgroup.DefaultUpdatedAt()
		pfrgc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfrgc *ProcessingFileRowGroupCreate) check() error {
	if _, ok := pfrgc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.file_id"`)}
	}
	if _, ok := pfrgc.mutation.TaskIndex(); !ok {
		return &ValidationError{Name: "task_index", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.task_index"`)}
	}
	if _, ok := pfrgc.mutation.GroupByValue(); !ok {
		return &ValidationError{Name: "group_by_value", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.group_by_value"`)}
	}
	if _, ok := pfrgc.mutation.TotalRows(); !ok {
		return &ValidationError{Name: "total_rows", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.total_rows"`)}
	}
	if _, ok := pfrgc.mutation.RowIndexList(); !ok {
		return &ValidationError{Name: "row_index_list", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.row_index_list"`)}
	}
	if _, ok := pfrgc.mutation.GroupRequestCurl(); !ok {
		return &ValidationError{Name: "group_request_curl", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.group_request_curl"`)}
	}
	if _, ok := pfrgc.mutation.GroupResponseRaw(); !ok {
		return &ValidationError{Name: "group_response_raw", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.group_response_raw"`)}
	}
	if _, ok := pfrgc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.status"`)}
	}
	if _, ok := pfrgc.mutation.ErrorDisplay(); !ok {
		return &ValidationError{Name: "error_display", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.error_display"`)}
	}
	if _, ok := pfrgc.mutation.ExecutedTime(); !ok {
		return &ValidationError{Name: "executed_time", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.executed_time"`)}
	}
	if _, ok := pfrgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.created_at"`)}
	}
	if _, ok := pfrgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessingFileRowGroup.updated_at"`)}
	}
	return nil
}

func (pfrgc *ProcessingFileRowGroupCreate) sqlSave(ctx context.Context) (*ProcessingFileRowGroup, error) {
	_node, _spec := pfrgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfrgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pfrgc *ProcessingFileRowGroupCreate) createSpec() (*ProcessingFileRowGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessingFileRowGroup{config: pfrgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: processingfilerowgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: processingfilerowgroup.FieldID,
			},
		}
	)
	if value, ok := pfrgc.mutation.FileID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: processingfilerowgroup.FieldFileID,
		})
		_node.FileID = value
	}
	if value, ok := pfrgc.mutation.TaskIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfilerowgroup.FieldTaskIndex,
		})
		_node.TaskIndex = value
	}
	if value, ok := pfrgc.mutation.GroupByValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerowgroup.FieldGroupByValue,
		})
		_node.GroupByValue = value
	}
	if value, ok := pfrgc.mutation.TotalRows(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfilerowgroup.FieldTotalRows,
		})
		_node.TotalRows = value
	}
	if value, ok := pfrgc.mutation.RowIndexList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerowgroup.FieldRowIndexList,
		})
		_node.RowIndexList = value
	}
	if value, ok := pfrgc.mutation.GroupRequestCurl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerowgroup.FieldGroupRequestCurl,
		})
		_node.GroupRequestCurl = value
	}
	if value, ok := pfrgc.mutation.GroupResponseRaw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerowgroup.FieldGroupResponseRaw,
		})
		_node.GroupResponseRaw = value
	}
	if value, ok := pfrgc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfilerowgroup.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pfrgc.mutation.ErrorDisplay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfilerowgroup.FieldErrorDisplay,
		})
		_node.ErrorDisplay = value
	}
	if value, ok := pfrgc.mutation.ExecutedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: processingfilerowgroup.FieldExecutedTime,
		})
		_node.ExecutedTime = value
	}
	if value, ok := pfrgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfilerowgroup.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pfrgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfilerowgroup.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessingFileRowGroupCreateBulk is the builder for creating many ProcessingFileRowGroup entities in bulk.
type ProcessingFileRowGroupCreateBulk struct {
	config
	builders []*ProcessingFileRowGroupCreate
}

// Save creates the ProcessingFileRowGroup entities in the database.
func (pfrgcb *ProcessingFileRowGroupCreateBulk) Save(ctx context.Context) ([]*ProcessingFileRowGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pfrgcb.builders))
	nodes := make([]*ProcessingFileRowGroup, len(pfrgcb.builders))
	mutators := make([]Mutator, len(pfrgcb.builders))
	for i := range pfrgcb.builders {
		func(i int, root context.Context) {
			builder := pfrgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessingFileRowGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfrgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfrgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfrgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfrgcb *ProcessingFileRowGroupCreateBulk) SaveX(ctx context.Context) []*ProcessingFileRowGroup {
	v, err := pfrgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfrgcb *ProcessingFileRowGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := pfrgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfrgcb *ProcessingFileRowGroupCreateBulk) ExecX(ctx context.Context) {
	if err := pfrgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
