// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/configtask"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ConfigTaskUpdate is the builder for updating ConfigTask entities.
type ConfigTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigTaskMutation
}

// Where appends a list predicates to the ConfigTaskUpdate builder.
func (ctu *ConfigTaskUpdate) Where(ps ...predicate.ConfigTask) *ConfigTaskUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetConfigMappingID sets the "config_mapping_id" field.
func (ctu *ConfigTaskUpdate) SetConfigMappingID(i int32) *ConfigTaskUpdate {
	ctu.mutation.ResetConfigMappingID()
	ctu.mutation.SetConfigMappingID(i)
	return ctu
}

// AddConfigMappingID adds i to the "config_mapping_id" field.
func (ctu *ConfigTaskUpdate) AddConfigMappingID(i int32) *ConfigTaskUpdate {
	ctu.mutation.AddConfigMappingID(i)
	return ctu
}

// SetTaskIndex sets the "task_index" field.
func (ctu *ConfigTaskUpdate) SetTaskIndex(i int32) *ConfigTaskUpdate {
	ctu.mutation.ResetTaskIndex()
	ctu.mutation.SetTaskIndex(i)
	return ctu
}

// AddTaskIndex adds i to the "task_index" field.
func (ctu *ConfigTaskUpdate) AddTaskIndex(i int32) *ConfigTaskUpdate {
	ctu.mutation.AddTaskIndex(i)
	return ctu
}

// SetName sets the "name" field.
func (ctu *ConfigTaskUpdate) SetName(s string) *ConfigTaskUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctu *ConfigTaskUpdate) SetNillableName(s *string) *ConfigTaskUpdate {
	if s != nil {
		ctu.SetName(*s)
	}
	return ctu
}

// SetEndPoint sets the "end_point" field.
func (ctu *ConfigTaskUpdate) SetEndPoint(s string) *ConfigTaskUpdate {
	ctu.mutation.SetEndPoint(s)
	return ctu
}

// SetMethod sets the "method" field.
func (ctu *ConfigTaskUpdate) SetMethod(s string) *ConfigTaskUpdate {
	ctu.mutation.SetMethod(s)
	return ctu
}

// SetHeader sets the "header" field.
func (ctu *ConfigTaskUpdate) SetHeader(s string) *ConfigTaskUpdate {
	ctu.mutation.SetHeader(s)
	return ctu
}

// SetRequestParams sets the "request_params" field.
func (ctu *ConfigTaskUpdate) SetRequestParams(s string) *ConfigTaskUpdate {
	ctu.mutation.SetRequestParams(s)
	return ctu
}

// SetRequestBody sets the "request_body" field.
func (ctu *ConfigTaskUpdate) SetRequestBody(s string) *ConfigTaskUpdate {
	ctu.mutation.SetRequestBody(s)
	return ctu
}

// SetResponseSuccessHTTPStatus sets the "response_success_http_status" field.
func (ctu *ConfigTaskUpdate) SetResponseSuccessHTTPStatus(i int32) *ConfigTaskUpdate {
	ctu.mutation.ResetResponseSuccessHTTPStatus()
	ctu.mutation.SetResponseSuccessHTTPStatus(i)
	return ctu
}

// AddResponseSuccessHTTPStatus adds i to the "response_success_http_status" field.
func (ctu *ConfigTaskUpdate) AddResponseSuccessHTTPStatus(i int32) *ConfigTaskUpdate {
	ctu.mutation.AddResponseSuccessHTTPStatus(i)
	return ctu
}

// SetResponseSuccessCodeSchema sets the "response_success_code_schema" field.
func (ctu *ConfigTaskUpdate) SetResponseSuccessCodeSchema(s string) *ConfigTaskUpdate {
	ctu.mutation.SetResponseSuccessCodeSchema(s)
	return ctu
}

// SetResponseMessageSchema sets the "response_message_schema" field.
func (ctu *ConfigTaskUpdate) SetResponseMessageSchema(s string) *ConfigTaskUpdate {
	ctu.mutation.SetResponseMessageSchema(s)
	return ctu
}

// SetCreatedAt sets the "created_at" field.
func (ctu *ConfigTaskUpdate) SetCreatedAt(t time.Time) *ConfigTaskUpdate {
	ctu.mutation.SetCreatedAt(t)
	return ctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctu *ConfigTaskUpdate) SetNillableCreatedAt(t *time.Time) *ConfigTaskUpdate {
	if t != nil {
		ctu.SetCreatedAt(*t)
	}
	return ctu
}

// SetCreatedBy sets the "created_by" field.
func (ctu *ConfigTaskUpdate) SetCreatedBy(s string) *ConfigTaskUpdate {
	ctu.mutation.SetCreatedBy(s)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *ConfigTaskUpdate) SetUpdatedAt(t time.Time) *ConfigTaskUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// Mutation returns the ConfigTaskMutation object of the builder.
func (ctu *ConfigTaskUpdate) Mutation() *ConfigTaskMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ConfigTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ctu.defaults()
	if len(ctu.hooks) == 0 {
		if err = ctu.check(); err != nil {
			return 0, err
		}
		affected, err = ctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctu.check(); err != nil {
				return 0, err
			}
			ctu.mutation = mutation
			affected, err = ctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctu.hooks) - 1; i >= 0; i-- {
			if ctu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ConfigTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ConfigTaskUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ConfigTaskUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *ConfigTaskUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := configtask.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *ConfigTaskUpdate) check() error {
	if v, ok := ctu.mutation.ConfigMappingID(); ok {
		if err := configtask.ConfigMappingIDValidator(v); err != nil {
			return &ValidationError{Name: "config_mapping_id", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.config_mapping_id": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Name(); ok {
		if err := configtask.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.name": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.EndPoint(); ok {
		if err := configtask.EndPointValidator(v); err != nil {
			return &ValidationError{Name: "end_point", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.end_point": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Method(); ok {
		if err := configtask.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.method": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.RequestParams(); ok {
		if err := configtask.RequestParamsValidator(v); err != nil {
			return &ValidationError{Name: "request_params", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_params": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.RequestBody(); ok {
		if err := configtask.RequestBodyValidator(v); err != nil {
			return &ValidationError{Name: "request_body", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_body": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.CreatedBy(); ok {
		if err := configtask.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.created_by": %w`, err)}
		}
	}
	return nil
}

func (ctu *ConfigTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configtask.Table,
			Columns: configtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configtask.FieldID,
			},
		},
	}
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.ConfigMappingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldConfigMappingID,
		})
	}
	if value, ok := ctu.mutation.AddedConfigMappingID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldConfigMappingID,
		})
	}
	if value, ok := ctu.mutation.TaskIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldTaskIndex,
		})
	}
	if value, ok := ctu.mutation.AddedTaskIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldTaskIndex,
		})
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldName,
		})
	}
	if value, ok := ctu.mutation.EndPoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldEndPoint,
		})
	}
	if value, ok := ctu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldMethod,
		})
	}
	if value, ok := ctu.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldHeader,
		})
	}
	if value, ok := ctu.mutation.RequestParams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestParams,
		})
	}
	if value, ok := ctu.mutation.RequestBody(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestBody,
		})
	}
	if value, ok := ctu.mutation.ResponseSuccessHTTPStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseSuccessHTTPStatus,
		})
	}
	if value, ok := ctu.mutation.AddedResponseSuccessHTTPStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseSuccessHTTPStatus,
		})
	}
	if value, ok := ctu.mutation.ResponseSuccessCodeSchema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldResponseSuccessCodeSchema,
		})
	}
	if value, ok := ctu.mutation.ResponseMessageSchema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldResponseMessageSchema,
		})
	}
	if value, ok := ctu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldCreatedAt,
		})
	}
	if value, ok := ctu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldCreatedBy,
		})
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConfigTaskUpdateOne is the builder for updating a single ConfigTask entity.
type ConfigTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigTaskMutation
}

// SetConfigMappingID sets the "config_mapping_id" field.
func (ctuo *ConfigTaskUpdateOne) SetConfigMappingID(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.ResetConfigMappingID()
	ctuo.mutation.SetConfigMappingID(i)
	return ctuo
}

// AddConfigMappingID adds i to the "config_mapping_id" field.
func (ctuo *ConfigTaskUpdateOne) AddConfigMappingID(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.AddConfigMappingID(i)
	return ctuo
}

// SetTaskIndex sets the "task_index" field.
func (ctuo *ConfigTaskUpdateOne) SetTaskIndex(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.ResetTaskIndex()
	ctuo.mutation.SetTaskIndex(i)
	return ctuo
}

// AddTaskIndex adds i to the "task_index" field.
func (ctuo *ConfigTaskUpdateOne) AddTaskIndex(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.AddTaskIndex(i)
	return ctuo
}

// SetName sets the "name" field.
func (ctuo *ConfigTaskUpdateOne) SetName(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctuo *ConfigTaskUpdateOne) SetNillableName(s *string) *ConfigTaskUpdateOne {
	if s != nil {
		ctuo.SetName(*s)
	}
	return ctuo
}

// SetEndPoint sets the "end_point" field.
func (ctuo *ConfigTaskUpdateOne) SetEndPoint(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetEndPoint(s)
	return ctuo
}

// SetMethod sets the "method" field.
func (ctuo *ConfigTaskUpdateOne) SetMethod(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetMethod(s)
	return ctuo
}

// SetHeader sets the "header" field.
func (ctuo *ConfigTaskUpdateOne) SetHeader(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetHeader(s)
	return ctuo
}

// SetRequestParams sets the "request_params" field.
func (ctuo *ConfigTaskUpdateOne) SetRequestParams(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetRequestParams(s)
	return ctuo
}

// SetRequestBody sets the "request_body" field.
func (ctuo *ConfigTaskUpdateOne) SetRequestBody(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetRequestBody(s)
	return ctuo
}

// SetResponseSuccessHTTPStatus sets the "response_success_http_status" field.
func (ctuo *ConfigTaskUpdateOne) SetResponseSuccessHTTPStatus(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.ResetResponseSuccessHTTPStatus()
	ctuo.mutation.SetResponseSuccessHTTPStatus(i)
	return ctuo
}

// AddResponseSuccessHTTPStatus adds i to the "response_success_http_status" field.
func (ctuo *ConfigTaskUpdateOne) AddResponseSuccessHTTPStatus(i int32) *ConfigTaskUpdateOne {
	ctuo.mutation.AddResponseSuccessHTTPStatus(i)
	return ctuo
}

// SetResponseSuccessCodeSchema sets the "response_success_code_schema" field.
func (ctuo *ConfigTaskUpdateOne) SetResponseSuccessCodeSchema(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetResponseSuccessCodeSchema(s)
	return ctuo
}

// SetResponseMessageSchema sets the "response_message_schema" field.
func (ctuo *ConfigTaskUpdateOne) SetResponseMessageSchema(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetResponseMessageSchema(s)
	return ctuo
}

// SetCreatedAt sets the "created_at" field.
func (ctuo *ConfigTaskUpdateOne) SetCreatedAt(t time.Time) *ConfigTaskUpdateOne {
	ctuo.mutation.SetCreatedAt(t)
	return ctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctuo *ConfigTaskUpdateOne) SetNillableCreatedAt(t *time.Time) *ConfigTaskUpdateOne {
	if t != nil {
		ctuo.SetCreatedAt(*t)
	}
	return ctuo
}

// SetCreatedBy sets the "created_by" field.
func (ctuo *ConfigTaskUpdateOne) SetCreatedBy(s string) *ConfigTaskUpdateOne {
	ctuo.mutation.SetCreatedBy(s)
	return ctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *ConfigTaskUpdateOne) SetUpdatedAt(t time.Time) *ConfigTaskUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// Mutation returns the ConfigTaskMutation object of the builder.
func (ctuo *ConfigTaskUpdateOne) Mutation() *ConfigTaskMutation {
	return ctuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ConfigTaskUpdateOne) Select(field string, fields ...string) *ConfigTaskUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ConfigTask entity.
func (ctuo *ConfigTaskUpdateOne) Save(ctx context.Context) (*ConfigTask, error) {
	var (
		err  error
		node *ConfigTask
	)
	ctuo.defaults()
	if len(ctuo.hooks) == 0 {
		if err = ctuo.check(); err != nil {
			return nil, err
		}
		node, err = ctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctuo.check(); err != nil {
				return nil, err
			}
			ctuo.mutation = mutation
			node, err = ctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctuo.hooks) - 1; i >= 0; i-- {
			if ctuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConfigTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConfigTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ConfigTaskUpdateOne) SaveX(ctx context.Context) *ConfigTask {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ConfigTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ConfigTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *ConfigTaskUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := configtask.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *ConfigTaskUpdateOne) check() error {
	if v, ok := ctuo.mutation.ConfigMappingID(); ok {
		if err := configtask.ConfigMappingIDValidator(v); err != nil {
			return &ValidationError{Name: "config_mapping_id", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.config_mapping_id": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Name(); ok {
		if err := configtask.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.name": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.EndPoint(); ok {
		if err := configtask.EndPointValidator(v); err != nil {
			return &ValidationError{Name: "end_point", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.end_point": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Method(); ok {
		if err := configtask.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.method": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.RequestParams(); ok {
		if err := configtask.RequestParamsValidator(v); err != nil {
			return &ValidationError{Name: "request_params", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_params": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.RequestBody(); ok {
		if err := configtask.RequestBodyValidator(v); err != nil {
			return &ValidationError{Name: "request_body", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_body": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.CreatedBy(); ok {
		if err := configtask.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.created_by": %w`, err)}
		}
	}
	return nil
}

func (ctuo *ConfigTaskUpdateOne) sqlSave(ctx context.Context) (_node *ConfigTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configtask.Table,
			Columns: configtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configtask.FieldID,
			},
		},
	}
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configtask.FieldID)
		for _, f := range fields {
			if !configtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.ConfigMappingID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldConfigMappingID,
		})
	}
	if value, ok := ctuo.mutation.AddedConfigMappingID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldConfigMappingID,
		})
	}
	if value, ok := ctuo.mutation.TaskIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldTaskIndex,
		})
	}
	if value, ok := ctuo.mutation.AddedTaskIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldTaskIndex,
		})
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldName,
		})
	}
	if value, ok := ctuo.mutation.EndPoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldEndPoint,
		})
	}
	if value, ok := ctuo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldMethod,
		})
	}
	if value, ok := ctuo.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldHeader,
		})
	}
	if value, ok := ctuo.mutation.RequestParams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestParams,
		})
	}
	if value, ok := ctuo.mutation.RequestBody(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestBody,
		})
	}
	if value, ok := ctuo.mutation.ResponseSuccessHTTPStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseSuccessHTTPStatus,
		})
	}
	if value, ok := ctuo.mutation.AddedResponseSuccessHTTPStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseSuccessHTTPStatus,
		})
	}
	if value, ok := ctuo.mutation.ResponseSuccessCodeSchema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldResponseSuccessCodeSchema,
		})
	}
	if value, ok := ctuo.mutation.ResponseMessageSchema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldResponseMessageSchema,
		})
	}
	if value, ok := ctuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldCreatedAt,
		})
	}
	if value, ok := ctuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldCreatedBy,
		})
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldUpdatedAt,
		})
	}
	_node = &ConfigTask{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
