// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfile"
)

// ProcessingFileUpdate is the builder for updating ProcessingFile entities.
type ProcessingFileUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessingFileMutation
}

// Where appends a list predicates to the ProcessingFileUpdate builder.
func (pfu *ProcessingFileUpdate) Where(ps ...predicate.ProcessingFile) *ProcessingFileUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetClientID sets the "client_id" field.
func (pfu *ProcessingFileUpdate) SetClientID(s string) *ProcessingFileUpdate {
	pfu.mutation.SetClientID(s)
	return pfu
}

// SetDisplayName sets the "display_name" field.
func (pfu *ProcessingFileUpdate) SetDisplayName(s string) *ProcessingFileUpdate {
	pfu.mutation.SetDisplayName(s)
	return pfu
}

// SetFileURL sets the "file_url" field.
func (pfu *ProcessingFileUpdate) SetFileURL(s string) *ProcessingFileUpdate {
	pfu.mutation.SetFileURL(s)
	return pfu
}

// SetResultFileURL sets the "result_file_url" field.
func (pfu *ProcessingFileUpdate) SetResultFileURL(s string) *ProcessingFileUpdate {
	pfu.mutation.SetResultFileURL(s)
	return pfu
}

// SetStatus sets the "status" field.
func (pfu *ProcessingFileUpdate) SetStatus(i int16) *ProcessingFileUpdate {
	pfu.mutation.ResetStatus()
	pfu.mutation.SetStatus(i)
	return pfu
}

// AddStatus adds i to the "status" field.
func (pfu *ProcessingFileUpdate) AddStatus(i int16) *ProcessingFileUpdate {
	pfu.mutation.AddStatus(i)
	return pfu
}

// SetTotalMapping sets the "total_mapping" field.
func (pfu *ProcessingFileUpdate) SetTotalMapping(i int32) *ProcessingFileUpdate {
	pfu.mutation.ResetTotalMapping()
	pfu.mutation.SetTotalMapping(i)
	return pfu
}

// AddTotalMapping adds i to the "total_mapping" field.
func (pfu *ProcessingFileUpdate) AddTotalMapping(i int32) *ProcessingFileUpdate {
	pfu.mutation.AddTotalMapping(i)
	return pfu
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (pfu *ProcessingFileUpdate) SetStatsTotalRow(i int32) *ProcessingFileUpdate {
	pfu.mutation.ResetStatsTotalRow()
	pfu.mutation.SetStatsTotalRow(i)
	return pfu
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (pfu *ProcessingFileUpdate) AddStatsTotalRow(i int32) *ProcessingFileUpdate {
	pfu.mutation.AddStatsTotalRow(i)
	return pfu
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (pfu *ProcessingFileUpdate) SetStatsTotalSuccess(i int32) *ProcessingFileUpdate {
	pfu.mutation.ResetStatsTotalSuccess()
	pfu.mutation.SetStatsTotalSuccess(i)
	return pfu
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (pfu *ProcessingFileUpdate) AddStatsTotalSuccess(i int32) *ProcessingFileUpdate {
	pfu.mutation.AddStatsTotalSuccess(i)
	return pfu
}

// SetCreatedAt sets the "created_at" field.
func (pfu *ProcessingFileUpdate) SetCreatedAt(t time.Time) *ProcessingFileUpdate {
	pfu.mutation.SetCreatedAt(t)
	return pfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfu *ProcessingFileUpdate) SetNillableCreatedAt(t *time.Time) *ProcessingFileUpdate {
	if t != nil {
		pfu.SetCreatedAt(*t)
	}
	return pfu
}

// SetCreatedBy sets the "created_by" field.
func (pfu *ProcessingFileUpdate) SetCreatedBy(s string) *ProcessingFileUpdate {
	pfu.mutation.SetCreatedBy(s)
	return pfu
}

// SetUpdatedAt sets the "updated_at" field.
func (pfu *ProcessingFileUpdate) SetUpdatedAt(t time.Time) *ProcessingFileUpdate {
	pfu.mutation.SetUpdatedAt(t)
	return pfu
}

// Mutation returns the ProcessingFileMutation object of the builder.
func (pfu *ProcessingFileUpdate) Mutation() *ProcessingFileMutation {
	return pfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *ProcessingFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pfu.defaults()
	if len(pfu.hooks) == 0 {
		if err = pfu.check(); err != nil {
			return 0, err
		}
		affected, err = pfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessingFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfu.check(); err != nil {
				return 0, err
			}
			pfu.mutation = mutation
			affected, err = pfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pfu.hooks) - 1; i >= 0; i-- {
			if pfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *ProcessingFileUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *ProcessingFileUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *ProcessingFileUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *ProcessingFileUpdate) defaults() {
	if _, ok := pfu.mutation.UpdatedAt(); !ok {
		v := processingfile.UpdateDefaultUpdatedAt()
		pfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfu *ProcessingFileUpdate) check() error {
	if v, ok := pfu.mutation.ClientID(); ok {
		if err := processingfile.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.client_id": %w`, err)}
		}
	}
	if v, ok := pfu.mutation.DisplayName(); ok {
		if err := processingfile.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.display_name": %w`, err)}
		}
	}
	if v, ok := pfu.mutation.FileURL(); ok {
		if err := processingfile.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.file_url": %w`, err)}
		}
	}
	if v, ok := pfu.mutation.CreatedBy(); ok {
		if err := processingfile.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.created_by": %w`, err)}
		}
	}
	return nil
}

func (pfu *ProcessingFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   processingfile.Table,
			Columns: processingfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: processingfile.FieldID,
			},
		},
	}
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldClientID,
		})
	}
	if value, ok := pfu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldDisplayName,
		})
	}
	if value, ok := pfu.mutation.FileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldFileURL,
		})
	}
	if value, ok := pfu.mutation.ResultFileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldResultFileURL,
		})
	}
	if value, ok := pfu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfile.FieldStatus,
		})
	}
	if value, ok := pfu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfile.FieldStatus,
		})
	}
	if value, ok := pfu.mutation.TotalMapping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldTotalMapping,
		})
	}
	if value, ok := pfu.mutation.AddedTotalMapping(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldTotalMapping,
		})
	}
	if value, ok := pfu.mutation.StatsTotalRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalRow,
		})
	}
	if value, ok := pfu.mutation.AddedStatsTotalRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalRow,
		})
	}
	if value, ok := pfu.mutation.StatsTotalSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalSuccess,
		})
	}
	if value, ok := pfu.mutation.AddedStatsTotalSuccess(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalSuccess,
		})
	}
	if value, ok := pfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldCreatedAt,
		})
	}
	if value, ok := pfu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldCreatedBy,
		})
	}
	if value, ok := pfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processingfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProcessingFileUpdateOne is the builder for updating a single ProcessingFile entity.
type ProcessingFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessingFileMutation
}

// SetClientID sets the "client_id" field.
func (pfuo *ProcessingFileUpdateOne) SetClientID(s string) *ProcessingFileUpdateOne {
	pfuo.mutation.SetClientID(s)
	return pfuo
}

// SetDisplayName sets the "display_name" field.
func (pfuo *ProcessingFileUpdateOne) SetDisplayName(s string) *ProcessingFileUpdateOne {
	pfuo.mutation.SetDisplayName(s)
	return pfuo
}

// SetFileURL sets the "file_url" field.
func (pfuo *ProcessingFileUpdateOne) SetFileURL(s string) *ProcessingFileUpdateOne {
	pfuo.mutation.SetFileURL(s)
	return pfuo
}

// SetResultFileURL sets the "result_file_url" field.
func (pfuo *ProcessingFileUpdateOne) SetResultFileURL(s string) *ProcessingFileUpdateOne {
	pfuo.mutation.SetResultFileURL(s)
	return pfuo
}

// SetStatus sets the "status" field.
func (pfuo *ProcessingFileUpdateOne) SetStatus(i int16) *ProcessingFileUpdateOne {
	pfuo.mutation.ResetStatus()
	pfuo.mutation.SetStatus(i)
	return pfuo
}

// AddStatus adds i to the "status" field.
func (pfuo *ProcessingFileUpdateOne) AddStatus(i int16) *ProcessingFileUpdateOne {
	pfuo.mutation.AddStatus(i)
	return pfuo
}

// SetTotalMapping sets the "total_mapping" field.
func (pfuo *ProcessingFileUpdateOne) SetTotalMapping(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.ResetTotalMapping()
	pfuo.mutation.SetTotalMapping(i)
	return pfuo
}

// AddTotalMapping adds i to the "total_mapping" field.
func (pfuo *ProcessingFileUpdateOne) AddTotalMapping(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.AddTotalMapping(i)
	return pfuo
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (pfuo *ProcessingFileUpdateOne) SetStatsTotalRow(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.ResetStatsTotalRow()
	pfuo.mutation.SetStatsTotalRow(i)
	return pfuo
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (pfuo *ProcessingFileUpdateOne) AddStatsTotalRow(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.AddStatsTotalRow(i)
	return pfuo
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (pfuo *ProcessingFileUpdateOne) SetStatsTotalSuccess(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.ResetStatsTotalSuccess()
	pfuo.mutation.SetStatsTotalSuccess(i)
	return pfuo
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (pfuo *ProcessingFileUpdateOne) AddStatsTotalSuccess(i int32) *ProcessingFileUpdateOne {
	pfuo.mutation.AddStatsTotalSuccess(i)
	return pfuo
}

// SetCreatedAt sets the "created_at" field.
func (pfuo *ProcessingFileUpdateOne) SetCreatedAt(t time.Time) *ProcessingFileUpdateOne {
	pfuo.mutation.SetCreatedAt(t)
	return pfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfuo *ProcessingFileUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessingFileUpdateOne {
	if t != nil {
		pfuo.SetCreatedAt(*t)
	}
	return pfuo
}

// SetCreatedBy sets the "created_by" field.
func (pfuo *ProcessingFileUpdateOne) SetCreatedBy(s string) *ProcessingFileUpdateOne {
	pfuo.mutation.SetCreatedBy(s)
	return pfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pfuo *ProcessingFileUpdateOne) SetUpdatedAt(t time.Time) *ProcessingFileUpdateOne {
	pfuo.mutation.SetUpdatedAt(t)
	return pfuo
}

// Mutation returns the ProcessingFileMutation object of the builder.
func (pfuo *ProcessingFileUpdateOne) Mutation() *ProcessingFileMutation {
	return pfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *ProcessingFileUpdateOne) Select(field string, fields ...string) *ProcessingFileUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated ProcessingFile entity.
func (pfuo *ProcessingFileUpdateOne) Save(ctx context.Context) (*ProcessingFile, error) {
	var (
		err  error
		node *ProcessingFile
	)
	pfuo.defaults()
	if len(pfuo.hooks) == 0 {
		if err = pfuo.check(); err != nil {
			return nil, err
		}
		node, err = pfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessingFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfuo.check(); err != nil {
				return nil, err
			}
			pfuo.mutation = mutation
			node, err = pfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pfuo.hooks) - 1; i >= 0; i-- {
			if pfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcessingFile)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcessingFileMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *ProcessingFileUpdateOne) SaveX(ctx context.Context) *ProcessingFile {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *ProcessingFileUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *ProcessingFileUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *ProcessingFileUpdateOne) defaults() {
	if _, ok := pfuo.mutation.UpdatedAt(); !ok {
		v := processingfile.UpdateDefaultUpdatedAt()
		pfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfuo *ProcessingFileUpdateOne) check() error {
	if v, ok := pfuo.mutation.ClientID(); ok {
		if err := processingfile.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.client_id": %w`, err)}
		}
	}
	if v, ok := pfuo.mutation.DisplayName(); ok {
		if err := processingfile.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.display_name": %w`, err)}
		}
	}
	if v, ok := pfuo.mutation.FileURL(); ok {
		if err := processingfile.FileURLValidator(v); err != nil {
			return &ValidationError{Name: "file_url", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.file_url": %w`, err)}
		}
	}
	if v, ok := pfuo.mutation.CreatedBy(); ok {
		if err := processingfile.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ProcessingFile.created_by": %w`, err)}
		}
	}
	return nil
}

func (pfuo *ProcessingFileUpdateOne) sqlSave(ctx context.Context) (_node *ProcessingFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   processingfile.Table,
			Columns: processingfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: processingfile.FieldID,
			},
		},
	}
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessingFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processingfile.FieldID)
		for _, f := range fields {
			if !processingfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processingfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldClientID,
		})
	}
	if value, ok := pfuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldDisplayName,
		})
	}
	if value, ok := pfuo.mutation.FileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldFileURL,
		})
	}
	if value, ok := pfuo.mutation.ResultFileURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldResultFileURL,
		})
	}
	if value, ok := pfuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfile.FieldStatus,
		})
	}
	if value, ok := pfuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: processingfile.FieldStatus,
		})
	}
	if value, ok := pfuo.mutation.TotalMapping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldTotalMapping,
		})
	}
	if value, ok := pfuo.mutation.AddedTotalMapping(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldTotalMapping,
		})
	}
	if value, ok := pfuo.mutation.StatsTotalRow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalRow,
		})
	}
	if value, ok := pfuo.mutation.AddedStatsTotalRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalRow,
		})
	}
	if value, ok := pfuo.mutation.StatsTotalSuccess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalSuccess,
		})
	}
	if value, ok := pfuo.mutation.AddedStatsTotalSuccess(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: processingfile.FieldStatsTotalSuccess,
		})
	}
	if value, ok := pfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldCreatedAt,
		})
	}
	if value, ok := pfuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: processingfile.FieldCreatedBy,
		})
	}
	if value, ok := pfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: processingfile.FieldUpdatedAt,
		})
	}
	_node = &ProcessingFile{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processingfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
