// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/fileawardpoint"
)

// FileAwardPoint is the model entity for the FileAwardPoint schema.
type FileAwardPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MerchantID holds the value of the "merchant_id" field.
	MerchantID int64 `json:"merchant_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// ResultFileURL holds the value of the "result_file_url" field.
	ResultFileURL string `json:"result_file_url,omitempty"`
	// Status holds the value of the "status" field.
	Status int16 `json:"status,omitempty"`
	// StatsTotalRow holds the value of the "stats_total_row" field.
	StatsTotalRow int32 `json:"stats_total_row,omitempty"`
	// StatsTotalSuccess holds the value of the "stats_total_success" field.
	StatsTotalSuccess int32 `json:"stats_total_success,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileAwardPoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileawardpoint.FieldID, fileawardpoint.FieldMerchantID, fileawardpoint.FieldStatus, fileawardpoint.FieldStatsTotalRow, fileawardpoint.FieldStatsTotalSuccess:
			values[i] = new(sql.NullInt64)
		case fileawardpoint.FieldDisplayName, fileawardpoint.FieldFileURL, fileawardpoint.FieldResultFileURL, fileawardpoint.FieldCreatedBy, fileawardpoint.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case fileawardpoint.FieldCreatedAt, fileawardpoint.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FileAwardPoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileAwardPoint fields.
func (fap *FileAwardPoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileawardpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fap.ID = int(value.Int64)
		case fileawardpoint.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				fap.MerchantID = value.Int64
			}
		case fileawardpoint.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				fap.DisplayName = value.String
			}
		case fileawardpoint.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				fap.FileURL = value.String
			}
		case fileawardpoint.FieldResultFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_file_url", values[i])
			} else if value.Valid {
				fap.ResultFileURL = value.String
			}
		case fileawardpoint.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fap.Status = int16(value.Int64)
			}
		case fileawardpoint.FieldStatsTotalRow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stats_total_row", values[i])
			} else if value.Valid {
				fap.StatsTotalRow = int32(value.Int64)
			}
		case fileawardpoint.FieldStatsTotalSuccess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stats_total_success", values[i])
			} else if value.Valid {
				fap.StatsTotalSuccess = int32(value.Int64)
			}
		case fileawardpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fap.CreatedAt = value.Time
			}
		case fileawardpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fap.UpdatedAt = value.Time
			}
		case fileawardpoint.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fap.CreatedBy = value.String
			}
		case fileawardpoint.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fap.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FileAwardPoint.
// Note that you need to call FileAwardPoint.Unwrap() before calling this method if this FileAwardPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (fap *FileAwardPoint) Update() *FileAwardPointUpdateOne {
	return (&FileAwardPointClient{config: fap.config}).UpdateOne(fap)
}

// Unwrap unwraps the FileAwardPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fap *FileAwardPoint) Unwrap() *FileAwardPoint {
	_tx, ok := fap.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileAwardPoint is not a transactional entity")
	}
	fap.config.driver = _tx.drv
	return fap
}

// String implements the fmt.Stringer.
func (fap *FileAwardPoint) String() string {
	var builder strings.Builder
	builder.WriteString("FileAwardPoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fap.ID))
	builder.WriteString("merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", fap.MerchantID))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(fap.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(fap.FileURL)
	builder.WriteString(", ")
	builder.WriteString("result_file_url=")
	builder.WriteString(fap.ResultFileURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fap.Status))
	builder.WriteString(", ")
	builder.WriteString("stats_total_row=")
	builder.WriteString(fmt.Sprintf("%v", fap.StatsTotalRow))
	builder.WriteString(", ")
	builder.WriteString("stats_total_success=")
	builder.WriteString(fmt.Sprintf("%v", fap.StatsTotalSuccess))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fap.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fap.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// FileAwardPoints is a parsable slice of FileAwardPoint.
type FileAwardPoints []*FileAwardPoint

func (fap FileAwardPoints) config(cfg config) {
	for _i := range fap {
		fap[_i].config = cfg
	}
}
