// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/membertransaction"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// MemberTransactionUpdate is the builder for updating MemberTransaction entities.
type MemberTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *MemberTransactionMutation
}

// Where appends a list predicates to the MemberTransactionUpdate builder.
func (mtu *MemberTransactionUpdate) Where(ps ...predicate.MemberTransaction) *MemberTransactionUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetFileAwardPointID sets the "file_award_point_id" field.
func (mtu *MemberTransactionUpdate) SetFileAwardPointID(i int32) *MemberTransactionUpdate {
	mtu.mutation.ResetFileAwardPointID()
	mtu.mutation.SetFileAwardPointID(i)
	return mtu
}

// AddFileAwardPointID adds i to the "file_award_point_id" field.
func (mtu *MemberTransactionUpdate) AddFileAwardPointID(i int32) *MemberTransactionUpdate {
	mtu.mutation.AddFileAwardPointID(i)
	return mtu
}

// SetPoint sets the "point" field.
func (mtu *MemberTransactionUpdate) SetPoint(i int64) *MemberTransactionUpdate {
	mtu.mutation.ResetPoint()
	mtu.mutation.SetPoint(i)
	return mtu
}

// AddPoint adds i to the "point" field.
func (mtu *MemberTransactionUpdate) AddPoint(i int64) *MemberTransactionUpdate {
	mtu.mutation.AddPoint(i)
	return mtu
}

// SetPhone sets the "phone" field.
func (mtu *MemberTransactionUpdate) SetPhone(s string) *MemberTransactionUpdate {
	mtu.mutation.SetPhone(s)
	return mtu
}

// SetOrderCode sets the "order_code" field.
func (mtu *MemberTransactionUpdate) SetOrderCode(s string) *MemberTransactionUpdate {
	mtu.mutation.SetOrderCode(s)
	return mtu
}

// SetRefID sets the "ref_id" field.
func (mtu *MemberTransactionUpdate) SetRefID(s string) *MemberTransactionUpdate {
	mtu.mutation.SetRefID(s)
	return mtu
}

// SetSentTime sets the "sent_time" field.
func (mtu *MemberTransactionUpdate) SetSentTime(t time.Time) *MemberTransactionUpdate {
	mtu.mutation.SetSentTime(t)
	return mtu
}

// SetNillableSentTime sets the "sent_time" field if the given value is not nil.
func (mtu *MemberTransactionUpdate) SetNillableSentTime(t *time.Time) *MemberTransactionUpdate {
	if t != nil {
		mtu.SetSentTime(*t)
	}
	return mtu
}

// SetTxnDesc sets the "txn_desc" field.
func (mtu *MemberTransactionUpdate) SetTxnDesc(s string) *MemberTransactionUpdate {
	mtu.mutation.SetTxnDesc(s)
	return mtu
}

// SetStatus sets the "status" field.
func (mtu *MemberTransactionUpdate) SetStatus(i int16) *MemberTransactionUpdate {
	mtu.mutation.ResetStatus()
	mtu.mutation.SetStatus(i)
	return mtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtu *MemberTransactionUpdate) SetNillableStatus(i *int16) *MemberTransactionUpdate {
	if i != nil {
		mtu.SetStatus(*i)
	}
	return mtu
}

// AddStatus adds i to the "status" field.
func (mtu *MemberTransactionUpdate) AddStatus(i int16) *MemberTransactionUpdate {
	mtu.mutation.AddStatus(i)
	return mtu
}

// SetCreatedAt sets the "created_at" field.
func (mtu *MemberTransactionUpdate) SetCreatedAt(t time.Time) *MemberTransactionUpdate {
	mtu.mutation.SetCreatedAt(t)
	return mtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtu *MemberTransactionUpdate) SetNillableCreatedAt(t *time.Time) *MemberTransactionUpdate {
	if t != nil {
		mtu.SetCreatedAt(*t)
	}
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MemberTransactionUpdate) SetUpdatedAt(t time.Time) *MemberTransactionUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtu *MemberTransactionUpdate) SetNillableUpdatedAt(t *time.Time) *MemberTransactionUpdate {
	if t != nil {
		mtu.SetUpdatedAt(*t)
	}
	return mtu
}

// Mutation returns the MemberTransactionMutation object of the builder.
func (mtu *MemberTransactionUpdate) Mutation() *MemberTransactionMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MemberTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		if err = mtu.check(); err != nil {
			return 0, err
		}
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtu.check(); err != nil {
				return 0, err
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			if mtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MemberTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MemberTransactionUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MemberTransactionUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *MemberTransactionUpdate) check() error {
	if v, ok := mtu.mutation.Phone(); ok {
		if err := membertransaction.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.phone": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.OrderCode(); ok {
		if err := membertransaction.OrderCodeValidator(v); err != nil {
			return &ValidationError{Name: "order_code", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.order_code": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.RefID(); ok {
		if err := membertransaction.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.ref_id": %w`, err)}
		}
	}
	if v, ok := mtu.mutation.TxnDesc(); ok {
		if err := membertransaction.TxnDescValidator(v); err != nil {
			return &ValidationError{Name: "txn_desc", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.txn_desc": %w`, err)}
		}
	}
	return nil
}

func (mtu *MemberTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   membertransaction.Table,
			Columns: membertransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membertransaction.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.FileAwardPointID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: membertransaction.FieldFileAwardPointID,
		})
	}
	if value, ok := mtu.mutation.AddedFileAwardPointID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: membertransaction.FieldFileAwardPointID,
		})
	}
	if value, ok := mtu.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: membertransaction.FieldPoint,
		})
	}
	if value, ok := mtu.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: membertransaction.FieldPoint,
		})
	}
	if value, ok := mtu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldPhone,
		})
	}
	if value, ok := mtu.mutation.OrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldOrderCode,
		})
	}
	if value, ok := mtu.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldRefID,
		})
	}
	if value, ok := mtu.mutation.SentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldSentTime,
		})
	}
	if value, ok := mtu.mutation.TxnDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldTxnDesc,
		})
	}
	if value, ok := mtu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: membertransaction.FieldStatus,
		})
	}
	if value, ok := mtu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: membertransaction.FieldStatus,
		})
	}
	if value, ok := mtu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldCreatedAt,
		})
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MemberTransactionUpdateOne is the builder for updating a single MemberTransaction entity.
type MemberTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberTransactionMutation
}

// SetFileAwardPointID sets the "file_award_point_id" field.
func (mtuo *MemberTransactionUpdateOne) SetFileAwardPointID(i int32) *MemberTransactionUpdateOne {
	mtuo.mutation.ResetFileAwardPointID()
	mtuo.mutation.SetFileAwardPointID(i)
	return mtuo
}

// AddFileAwardPointID adds i to the "file_award_point_id" field.
func (mtuo *MemberTransactionUpdateOne) AddFileAwardPointID(i int32) *MemberTransactionUpdateOne {
	mtuo.mutation.AddFileAwardPointID(i)
	return mtuo
}

// SetPoint sets the "point" field.
func (mtuo *MemberTransactionUpdateOne) SetPoint(i int64) *MemberTransactionUpdateOne {
	mtuo.mutation.ResetPoint()
	mtuo.mutation.SetPoint(i)
	return mtuo
}

// AddPoint adds i to the "point" field.
func (mtuo *MemberTransactionUpdateOne) AddPoint(i int64) *MemberTransactionUpdateOne {
	mtuo.mutation.AddPoint(i)
	return mtuo
}

// SetPhone sets the "phone" field.
func (mtuo *MemberTransactionUpdateOne) SetPhone(s string) *MemberTransactionUpdateOne {
	mtuo.mutation.SetPhone(s)
	return mtuo
}

// SetOrderCode sets the "order_code" field.
func (mtuo *MemberTransactionUpdateOne) SetOrderCode(s string) *MemberTransactionUpdateOne {
	mtuo.mutation.SetOrderCode(s)
	return mtuo
}

// SetRefID sets the "ref_id" field.
func (mtuo *MemberTransactionUpdateOne) SetRefID(s string) *MemberTransactionUpdateOne {
	mtuo.mutation.SetRefID(s)
	return mtuo
}

// SetSentTime sets the "sent_time" field.
func (mtuo *MemberTransactionUpdateOne) SetSentTime(t time.Time) *MemberTransactionUpdateOne {
	mtuo.mutation.SetSentTime(t)
	return mtuo
}

// SetNillableSentTime sets the "sent_time" field if the given value is not nil.
func (mtuo *MemberTransactionUpdateOne) SetNillableSentTime(t *time.Time) *MemberTransactionUpdateOne {
	if t != nil {
		mtuo.SetSentTime(*t)
	}
	return mtuo
}

// SetTxnDesc sets the "txn_desc" field.
func (mtuo *MemberTransactionUpdateOne) SetTxnDesc(s string) *MemberTransactionUpdateOne {
	mtuo.mutation.SetTxnDesc(s)
	return mtuo
}

// SetStatus sets the "status" field.
func (mtuo *MemberTransactionUpdateOne) SetStatus(i int16) *MemberTransactionUpdateOne {
	mtuo.mutation.ResetStatus()
	mtuo.mutation.SetStatus(i)
	return mtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtuo *MemberTransactionUpdateOne) SetNillableStatus(i *int16) *MemberTransactionUpdateOne {
	if i != nil {
		mtuo.SetStatus(*i)
	}
	return mtuo
}

// AddStatus adds i to the "status" field.
func (mtuo *MemberTransactionUpdateOne) AddStatus(i int16) *MemberTransactionUpdateOne {
	mtuo.mutation.AddStatus(i)
	return mtuo
}

// SetCreatedAt sets the "created_at" field.
func (mtuo *MemberTransactionUpdateOne) SetCreatedAt(t time.Time) *MemberTransactionUpdateOne {
	mtuo.mutation.SetCreatedAt(t)
	return mtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtuo *MemberTransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *MemberTransactionUpdateOne {
	if t != nil {
		mtuo.SetCreatedAt(*t)
	}
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MemberTransactionUpdateOne) SetUpdatedAt(t time.Time) *MemberTransactionUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtuo *MemberTransactionUpdateOne) SetNillableUpdatedAt(t *time.Time) *MemberTransactionUpdateOne {
	if t != nil {
		mtuo.SetUpdatedAt(*t)
	}
	return mtuo
}

// Mutation returns the MemberTransactionMutation object of the builder.
func (mtuo *MemberTransactionUpdateOne) Mutation() *MemberTransactionMutation {
	return mtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MemberTransactionUpdateOne) Select(field string, fields ...string) *MemberTransactionUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MemberTransaction entity.
func (mtuo *MemberTransactionUpdateOne) Save(ctx context.Context) (*MemberTransaction, error) {
	var (
		err  error
		node *MemberTransaction
	)
	if len(mtuo.hooks) == 0 {
		if err = mtuo.check(); err != nil {
			return nil, err
		}
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtuo.check(); err != nil {
				return nil, err
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			if mtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MemberTransaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MemberTransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MemberTransactionUpdateOne) SaveX(ctx context.Context) *MemberTransaction {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MemberTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MemberTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *MemberTransactionUpdateOne) check() error {
	if v, ok := mtuo.mutation.Phone(); ok {
		if err := membertransaction.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.phone": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.OrderCode(); ok {
		if err := membertransaction.OrderCodeValidator(v); err != nil {
			return &ValidationError{Name: "order_code", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.order_code": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.RefID(); ok {
		if err := membertransaction.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.ref_id": %w`, err)}
		}
	}
	if v, ok := mtuo.mutation.TxnDesc(); ok {
		if err := membertransaction.TxnDescValidator(v); err != nil {
			return &ValidationError{Name: "txn_desc", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.txn_desc": %w`, err)}
		}
	}
	return nil
}

func (mtuo *MemberTransactionUpdateOne) sqlSave(ctx context.Context) (_node *MemberTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   membertransaction.Table,
			Columns: membertransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membertransaction.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberTransaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, membertransaction.FieldID)
		for _, f := range fields {
			if !membertransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != membertransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.FileAwardPointID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: membertransaction.FieldFileAwardPointID,
		})
	}
	if value, ok := mtuo.mutation.AddedFileAwardPointID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: membertransaction.FieldFileAwardPointID,
		})
	}
	if value, ok := mtuo.mutation.Point(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: membertransaction.FieldPoint,
		})
	}
	if value, ok := mtuo.mutation.AddedPoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: membertransaction.FieldPoint,
		})
	}
	if value, ok := mtuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldPhone,
		})
	}
	if value, ok := mtuo.mutation.OrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldOrderCode,
		})
	}
	if value, ok := mtuo.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldRefID,
		})
	}
	if value, ok := mtuo.mutation.SentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldSentTime,
		})
	}
	if value, ok := mtuo.mutation.TxnDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldTxnDesc,
		})
	}
	if value, ok := mtuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: membertransaction.FieldStatus,
		})
	}
	if value, ok := mtuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: membertransaction.FieldStatus,
		})
	}
	if value, ok := mtuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldCreatedAt,
		})
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldUpdatedAt,
		})
	}
	_node = &MemberTransaction{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{membertransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
