// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/membertransaction"
)

// MemberTransactionCreate is the builder for creating a MemberTransaction entity.
type MemberTransactionCreate struct {
	config
	mutation *MemberTransactionMutation
	hooks    []Hook
}

// SetFileAwardPointID sets the "file_award_point_id" field.
func (mtc *MemberTransactionCreate) SetFileAwardPointID(i int32) *MemberTransactionCreate {
	mtc.mutation.SetFileAwardPointID(i)
	return mtc
}

// SetPoint sets the "point" field.
func (mtc *MemberTransactionCreate) SetPoint(i int64) *MemberTransactionCreate {
	mtc.mutation.SetPoint(i)
	return mtc
}

// SetPhone sets the "phone" field.
func (mtc *MemberTransactionCreate) SetPhone(s string) *MemberTransactionCreate {
	mtc.mutation.SetPhone(s)
	return mtc
}

// SetOrderCode sets the "order_code" field.
func (mtc *MemberTransactionCreate) SetOrderCode(s string) *MemberTransactionCreate {
	mtc.mutation.SetOrderCode(s)
	return mtc
}

// SetRefID sets the "ref_id" field.
func (mtc *MemberTransactionCreate) SetRefID(s string) *MemberTransactionCreate {
	mtc.mutation.SetRefID(s)
	return mtc
}

// SetSentTime sets the "sent_time" field.
func (mtc *MemberTransactionCreate) SetSentTime(t time.Time) *MemberTransactionCreate {
	mtc.mutation.SetSentTime(t)
	return mtc
}

// SetNillableSentTime sets the "sent_time" field if the given value is not nil.
func (mtc *MemberTransactionCreate) SetNillableSentTime(t *time.Time) *MemberTransactionCreate {
	if t != nil {
		mtc.SetSentTime(*t)
	}
	return mtc
}

// SetLoyaltyTxnID sets the "loyalty_txn_id" field.
func (mtc *MemberTransactionCreate) SetLoyaltyTxnID(s string) *MemberTransactionCreate {
	mtc.mutation.SetLoyaltyTxnID(s)
	return mtc
}

// SetNillableLoyaltyTxnID sets the "loyalty_txn_id" field if the given value is not nil.
func (mtc *MemberTransactionCreate) SetNillableLoyaltyTxnID(s *string) *MemberTransactionCreate {
	if s != nil {
		mtc.SetLoyaltyTxnID(*s)
	}
	return mtc
}

// SetTxnDesc sets the "txn_desc" field.
func (mtc *MemberTransactionCreate) SetTxnDesc(s string) *MemberTransactionCreate {
	mtc.mutation.SetTxnDesc(s)
	return mtc
}

// SetStatus sets the "status" field.
func (mtc *MemberTransactionCreate) SetStatus(i int16) *MemberTransactionCreate {
	mtc.mutation.SetStatus(i)
	return mtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mtc *MemberTransactionCreate) SetNillableStatus(i *int16) *MemberTransactionCreate {
	if i != nil {
		mtc.SetStatus(*i)
	}
	return mtc
}

// SetError sets the "error" field.
func (mtc *MemberTransactionCreate) SetError(s string) *MemberTransactionCreate {
	mtc.mutation.SetError(s)
	return mtc
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MemberTransactionCreate) SetCreatedAt(t time.Time) *MemberTransactionCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MemberTransactionCreate) SetNillableCreatedAt(t *time.Time) *MemberTransactionCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MemberTransactionCreate) SetUpdatedAt(t time.Time) *MemberTransactionCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MemberTransactionCreate) SetNillableUpdatedAt(t *time.Time) *MemberTransactionCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// Mutation returns the MemberTransactionMutation object of the builder.
func (mtc *MemberTransactionCreate) Mutation() *MemberTransactionMutation {
	return mtc.mutation
}

// Save creates the MemberTransaction in the database.
func (mtc *MemberTransactionCreate) Save(ctx context.Context) (*MemberTransaction, error) {
	var (
		err  error
		node *MemberTransaction
	)
	mtc.defaults()
	if len(mtc.hooks) == 0 {
		if err = mtc.check(); err != nil {
			return nil, err
		}
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtc.check(); err != nil {
				return nil, err
			}
			mtc.mutation = mutation
			if node, err = mtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			if mtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mtc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MemberTransaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MemberTransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MemberTransactionCreate) SaveX(ctx context.Context) *MemberTransaction {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MemberTransactionCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MemberTransactionCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MemberTransactionCreate) defaults() {
	if _, ok := mtc.mutation.SentTime(); !ok {
		v := membertransaction.DefaultSentTime
		mtc.mutation.SetSentTime(v)
	}
	if _, ok := mtc.mutation.LoyaltyTxnID(); !ok {
		v := membertransaction.DefaultLoyaltyTxnID
		mtc.mutation.SetLoyaltyTxnID(v)
	}
	if _, ok := mtc.mutation.Status(); !ok {
		v := membertransaction.DefaultStatus
		mtc.mutation.SetStatus(v)
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		v := membertransaction.DefaultCreatedAt
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		v := membertransaction.DefaultUpdatedAt
		mtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MemberTransactionCreate) check() error {
	if _, ok := mtc.mutation.FileAwardPointID(); !ok {
		return &ValidationError{Name: "file_award_point_id", err: errors.New(`ent: missing required field "MemberTransaction.file_award_point_id"`)}
	}
	if _, ok := mtc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "MemberTransaction.point"`)}
	}
	if _, ok := mtc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "MemberTransaction.phone"`)}
	}
	if v, ok := mtc.mutation.Phone(); ok {
		if err := membertransaction.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.phone": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.OrderCode(); !ok {
		return &ValidationError{Name: "order_code", err: errors.New(`ent: missing required field "MemberTransaction.order_code"`)}
	}
	if v, ok := mtc.mutation.OrderCode(); ok {
		if err := membertransaction.OrderCodeValidator(v); err != nil {
			return &ValidationError{Name: "order_code", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.order_code": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.RefID(); !ok {
		return &ValidationError{Name: "ref_id", err: errors.New(`ent: missing required field "MemberTransaction.ref_id"`)}
	}
	if v, ok := mtc.mutation.RefID(); ok {
		if err := membertransaction.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.ref_id": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.SentTime(); !ok {
		return &ValidationError{Name: "sent_time", err: errors.New(`ent: missing required field "MemberTransaction.sent_time"`)}
	}
	if _, ok := mtc.mutation.LoyaltyTxnID(); !ok {
		return &ValidationError{Name: "loyalty_txn_id", err: errors.New(`ent: missing required field "MemberTransaction.loyalty_txn_id"`)}
	}
	if v, ok := mtc.mutation.LoyaltyTxnID(); ok {
		if err := membertransaction.LoyaltyTxnIDValidator(v); err != nil {
			return &ValidationError{Name: "loyalty_txn_id", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.loyalty_txn_id": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.TxnDesc(); !ok {
		return &ValidationError{Name: "txn_desc", err: errors.New(`ent: missing required field "MemberTransaction.txn_desc"`)}
	}
	if v, ok := mtc.mutation.TxnDesc(); ok {
		if err := membertransaction.TxnDescValidator(v); err != nil {
			return &ValidationError{Name: "txn_desc", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.txn_desc": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MemberTransaction.status"`)}
	}
	if _, ok := mtc.mutation.Error(); !ok {
		return &ValidationError{Name: "error", err: errors.New(`ent: missing required field "MemberTransaction.error"`)}
	}
	if v, ok := mtc.mutation.Error(); ok {
		if err := membertransaction.ErrorValidator(v); err != nil {
			return &ValidationError{Name: "error", err: fmt.Errorf(`ent: validator failed for field "MemberTransaction.error": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MemberTransaction.created_at"`)}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MemberTransaction.updated_at"`)}
	}
	return nil
}

func (mtc *MemberTransactionCreate) sqlSave(ctx context.Context) (*MemberTransaction, error) {
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mtc *MemberTransactionCreate) createSpec() (*MemberTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberTransaction{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: membertransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: membertransaction.FieldID,
			},
		}
	)
	if value, ok := mtc.mutation.FileAwardPointID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: membertransaction.FieldFileAwardPointID,
		})
		_node.FileAwardPointID = value
	}
	if value, ok := mtc.mutation.Point(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: membertransaction.FieldPoint,
		})
		_node.Point = value
	}
	if value, ok := mtc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := mtc.mutation.OrderCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldOrderCode,
		})
		_node.OrderCode = value
	}
	if value, ok := mtc.mutation.RefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldRefID,
		})
		_node.RefID = value
	}
	if value, ok := mtc.mutation.SentTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldSentTime,
		})
		_node.SentTime = value
	}
	if value, ok := mtc.mutation.LoyaltyTxnID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldLoyaltyTxnID,
		})
		_node.LoyaltyTxnID = value
	}
	if value, ok := mtc.mutation.TxnDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldTxnDesc,
		})
		_node.TxnDesc = value
	}
	if value, ok := mtc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: membertransaction.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mtc.mutation.Error(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: membertransaction.FieldError,
		})
		_node.Error = value
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: membertransaction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MemberTransactionCreateBulk is the builder for creating many MemberTransaction entities in bulk.
type MemberTransactionCreateBulk struct {
	config
	builders []*MemberTransactionCreate
}

// Save creates the MemberTransaction entities in the database.
func (mtcb *MemberTransactionCreateBulk) Save(ctx context.Context) ([]*MemberTransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MemberTransaction, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MemberTransactionCreateBulk) SaveX(ctx context.Context) []*MemberTransaction {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MemberTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MemberTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
