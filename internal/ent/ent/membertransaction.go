// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/membertransaction"
)

// MemberTransaction is the model entity for the MemberTransaction schema.
type MemberTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FileAwardPointID holds the value of the "file_award_point_id" field.
	FileAwardPointID int32 `json:"file_award_point_id,omitempty"`
	// Point holds the value of the "point" field.
	Point int64 `json:"point,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// OrderCode holds the value of the "order_code" field.
	OrderCode string `json:"order_code,omitempty"`
	// RefID holds the value of the "ref_id" field.
	RefID string `json:"ref_id,omitempty"`
	// SentTime holds the value of the "sent_time" field.
	SentTime time.Time `json:"sent_time,omitempty"`
	// LoyaltyTxnID holds the value of the "loyalty_txn_id" field.
	LoyaltyTxnID string `json:"loyalty_txn_id,omitempty"`
	// TxnDesc holds the value of the "txn_desc" field.
	TxnDesc string `json:"txn_desc,omitempty"`
	// Status holds the value of the "status" field.
	Status int16 `json:"status,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberTransaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case membertransaction.FieldID, membertransaction.FieldFileAwardPointID, membertransaction.FieldPoint, membertransaction.FieldStatus:
			values[i] = new(sql.NullInt64)
		case membertransaction.FieldPhone, membertransaction.FieldOrderCode, membertransaction.FieldRefID, membertransaction.FieldLoyaltyTxnID, membertransaction.FieldTxnDesc, membertransaction.FieldError:
			values[i] = new(sql.NullString)
		case membertransaction.FieldSentTime, membertransaction.FieldCreatedAt, membertransaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MemberTransaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberTransaction fields.
func (mt *MemberTransaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case membertransaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = int(value.Int64)
		case membertransaction.FieldFileAwardPointID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_award_point_id", values[i])
			} else if value.Valid {
				mt.FileAwardPointID = int32(value.Int64)
			}
		case membertransaction.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				mt.Point = value.Int64
			}
		case membertransaction.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				mt.Phone = value.String
			}
		case membertransaction.FieldOrderCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_code", values[i])
			} else if value.Valid {
				mt.OrderCode = value.String
			}
		case membertransaction.FieldRefID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_id", values[i])
			} else if value.Valid {
				mt.RefID = value.String
			}
		case membertransaction.FieldSentTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_time", values[i])
			} else if value.Valid {
				mt.SentTime = value.Time
			}
		case membertransaction.FieldLoyaltyTxnID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field loyalty_txn_id", values[i])
			} else if value.Valid {
				mt.LoyaltyTxnID = value.String
			}
		case membertransaction.FieldTxnDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txn_desc", values[i])
			} else if value.Valid {
				mt.TxnDesc = value.String
			}
		case membertransaction.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mt.Status = int16(value.Int64)
			}
		case membertransaction.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				mt.Error = value.String
			}
		case membertransaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case membertransaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MemberTransaction.
// Note that you need to call MemberTransaction.Unwrap() before calling this method if this MemberTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MemberTransaction) Update() *MemberTransactionUpdateOne {
	return (&MemberTransactionClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the MemberTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MemberTransaction) Unwrap() *MemberTransaction {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberTransaction is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MemberTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("MemberTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("file_award_point_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.FileAwardPointID))
	builder.WriteString(", ")
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", mt.Point))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(mt.Phone)
	builder.WriteString(", ")
	builder.WriteString("order_code=")
	builder.WriteString(mt.OrderCode)
	builder.WriteString(", ")
	builder.WriteString("ref_id=")
	builder.WriteString(mt.RefID)
	builder.WriteString(", ")
	builder.WriteString("sent_time=")
	builder.WriteString(mt.SentTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("loyalty_txn_id=")
	builder.WriteString(mt.LoyaltyTxnID)
	builder.WriteString(", ")
	builder.WriteString("txn_desc=")
	builder.WriteString(mt.TxnDesc)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mt.Status))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(mt.Error)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MemberTransactions is a parsable slice of MemberTransaction.
type MemberTransactions []*MemberTransaction

func (mt MemberTransactions) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}
