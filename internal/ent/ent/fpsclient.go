// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/fpsclient"
)

// FpsClient is the model entity for the FpsClient schema.
type FpsClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID int32 `json:"client_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SampleFileURL holds the value of the "sample_file_url" field.
	SampleFileURL string `json:"sample_file_url,omitempty"`
	// URL of template file that client can download
	ImportFileTemplateURL string `json:"import_file_template_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FpsClient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fpsclient.FieldID, fpsclient.FieldClientID:
			values[i] = new(sql.NullInt64)
		case fpsclient.FieldName, fpsclient.FieldDescription, fpsclient.FieldSampleFileURL, fpsclient.FieldImportFileTemplateURL, fpsclient.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case fpsclient.FieldCreatedAt, fpsclient.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FpsClient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FpsClient fields.
func (fc *FpsClient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fpsclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fc.ID = int(value.Int64)
		case fpsclient.FieldClientID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				fc.ClientID = int32(value.Int64)
			}
		case fpsclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fc.Name = value.String
			}
		case fpsclient.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fc.Description = value.String
			}
		case fpsclient.FieldSampleFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_file_url", values[i])
			} else if value.Valid {
				fc.SampleFileURL = value.String
			}
		case fpsclient.FieldImportFileTemplateURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field import_file_template_url", values[i])
			} else if value.Valid {
				fc.ImportFileTemplateURL = value.String
			}
		case fpsclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fc.CreatedAt = value.Time
			}
		case fpsclient.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fc.CreatedBy = value.String
			}
		case fpsclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FpsClient.
// Note that you need to call FpsClient.Unwrap() before calling this method if this FpsClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (fc *FpsClient) Update() *FpsClientUpdateOne {
	return (&FpsClientClient{config: fc.config}).UpdateOne(fc)
}

// Unwrap unwraps the FpsClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fc *FpsClient) Unwrap() *FpsClient {
	_tx, ok := fc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FpsClient is not a transactional entity")
	}
	fc.config.driver = _tx.drv
	return fc
}

// String implements the fmt.Stringer.
func (fc *FpsClient) String() string {
	var builder strings.Builder
	builder.WriteString("FpsClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fc.ID))
	builder.WriteString("client_id=")
	builder.WriteString(fmt.Sprintf("%v", fc.ClientID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fc.Description)
	builder.WriteString(", ")
	builder.WriteString("sample_file_url=")
	builder.WriteString(fc.SampleFileURL)
	builder.WriteString(", ")
	builder.WriteString("import_file_template_url=")
	builder.WriteString(fc.ImportFileTemplateURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FpsClients is a parsable slice of FpsClient.
type FpsClients []*FpsClient

func (fc FpsClients) config(cfg config) {
	for _i := range fc {
		fc[_i].config = cfg
	}
}
