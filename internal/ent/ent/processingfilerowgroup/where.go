// Code generated by ent, DO NOT EDIT.

package processingfilerowgroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// TaskIndex applies equality check predicate on the "task_index" field. It's identical to TaskIndexEQ.
func TaskIndex(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// GroupByValue applies equality check predicate on the "group_by_value" field. It's identical to GroupByValueEQ.
func GroupByValue(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupByValue), v))
	})
}

// TotalRows applies equality check predicate on the "total_rows" field. It's identical to TotalRowsEQ.
func TotalRows(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalRows), v))
	})
}

// RowIndexList applies equality check predicate on the "row_index_list" field. It's identical to RowIndexListEQ.
func RowIndexList(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowIndexList), v))
	})
}

// GroupRequestCurl applies equality check predicate on the "group_request_curl" field. It's identical to GroupRequestCurlEQ.
func GroupRequestCurl(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupResponseRaw applies equality check predicate on the "group_response_raw" field. It's identical to GroupResponseRawEQ.
func GroupResponseRaw(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupResponseRaw), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ErrorDisplay applies equality check predicate on the "error_display" field. It's identical to ErrorDisplayEQ.
func ErrorDisplay(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDisplay), v))
	})
}

// ExecutedTime applies equality check predicate on the "executed_time" field. It's identical to ExecutedTimeEQ.
func ExecutedTime(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutedTime), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileID), v))
	})
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int64) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFileID), v...))
	})
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int64) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFileID), v...))
	})
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileID), v))
	})
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileID), v))
	})
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileID), v))
	})
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileID), v))
	})
}

// TaskIndexEQ applies the EQ predicate on the "task_index" field.
func TaskIndexEQ(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexNEQ applies the NEQ predicate on the "task_index" field.
func TaskIndexNEQ(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexIn applies the In predicate on the "task_index" field.
func TaskIndexIn(vs ...int32) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexNotIn applies the NotIn predicate on the "task_index" field.
func TaskIndexNotIn(vs ...int32) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexGT applies the GT predicate on the "task_index" field.
func TaskIndexGT(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexGTE applies the GTE predicate on the "task_index" field.
func TaskIndexGTE(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLT applies the LT predicate on the "task_index" field.
func TaskIndexLT(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLTE applies the LTE predicate on the "task_index" field.
func TaskIndexLTE(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskIndex), v))
	})
}

// GroupByValueEQ applies the EQ predicate on the "group_by_value" field.
func GroupByValueEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueNEQ applies the NEQ predicate on the "group_by_value" field.
func GroupByValueNEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueIn applies the In predicate on the "group_by_value" field.
func GroupByValueIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupByValue), v...))
	})
}

// GroupByValueNotIn applies the NotIn predicate on the "group_by_value" field.
func GroupByValueNotIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupByValue), v...))
	})
}

// GroupByValueGT applies the GT predicate on the "group_by_value" field.
func GroupByValueGT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueGTE applies the GTE predicate on the "group_by_value" field.
func GroupByValueGTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueLT applies the LT predicate on the "group_by_value" field.
func GroupByValueLT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueLTE applies the LTE predicate on the "group_by_value" field.
func GroupByValueLTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueContains applies the Contains predicate on the "group_by_value" field.
func GroupByValueContains(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueHasPrefix applies the HasPrefix predicate on the "group_by_value" field.
func GroupByValueHasPrefix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueHasSuffix applies the HasSuffix predicate on the "group_by_value" field.
func GroupByValueHasSuffix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueEqualFold applies the EqualFold predicate on the "group_by_value" field.
func GroupByValueEqualFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupByValue), v))
	})
}

// GroupByValueContainsFold applies the ContainsFold predicate on the "group_by_value" field.
func GroupByValueContainsFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupByValue), v))
	})
}

// TotalRowsEQ applies the EQ predicate on the "total_rows" field.
func TotalRowsEQ(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalRows), v))
	})
}

// TotalRowsNEQ applies the NEQ predicate on the "total_rows" field.
func TotalRowsNEQ(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalRows), v))
	})
}

// TotalRowsIn applies the In predicate on the "total_rows" field.
func TotalRowsIn(vs ...int32) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalRows), v...))
	})
}

// TotalRowsNotIn applies the NotIn predicate on the "total_rows" field.
func TotalRowsNotIn(vs ...int32) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalRows), v...))
	})
}

// TotalRowsGT applies the GT predicate on the "total_rows" field.
func TotalRowsGT(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalRows), v))
	})
}

// TotalRowsGTE applies the GTE predicate on the "total_rows" field.
func TotalRowsGTE(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalRows), v))
	})
}

// TotalRowsLT applies the LT predicate on the "total_rows" field.
func TotalRowsLT(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalRows), v))
	})
}

// TotalRowsLTE applies the LTE predicate on the "total_rows" field.
func TotalRowsLTE(v int32) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalRows), v))
	})
}

// RowIndexListEQ applies the EQ predicate on the "row_index_list" field.
func RowIndexListEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListNEQ applies the NEQ predicate on the "row_index_list" field.
func RowIndexListNEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListIn applies the In predicate on the "row_index_list" field.
func RowIndexListIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRowIndexList), v...))
	})
}

// RowIndexListNotIn applies the NotIn predicate on the "row_index_list" field.
func RowIndexListNotIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRowIndexList), v...))
	})
}

// RowIndexListGT applies the GT predicate on the "row_index_list" field.
func RowIndexListGT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListGTE applies the GTE predicate on the "row_index_list" field.
func RowIndexListGTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListLT applies the LT predicate on the "row_index_list" field.
func RowIndexListLT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListLTE applies the LTE predicate on the "row_index_list" field.
func RowIndexListLTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListContains applies the Contains predicate on the "row_index_list" field.
func RowIndexListContains(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListHasPrefix applies the HasPrefix predicate on the "row_index_list" field.
func RowIndexListHasPrefix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListHasSuffix applies the HasSuffix predicate on the "row_index_list" field.
func RowIndexListHasSuffix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListEqualFold applies the EqualFold predicate on the "row_index_list" field.
func RowIndexListEqualFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRowIndexList), v))
	})
}

// RowIndexListContainsFold applies the ContainsFold predicate on the "row_index_list" field.
func RowIndexListContainsFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRowIndexList), v))
	})
}

// GroupRequestCurlEQ applies the EQ predicate on the "group_request_curl" field.
func GroupRequestCurlEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlNEQ applies the NEQ predicate on the "group_request_curl" field.
func GroupRequestCurlNEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlIn applies the In predicate on the "group_request_curl" field.
func GroupRequestCurlIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupRequestCurl), v...))
	})
}

// GroupRequestCurlNotIn applies the NotIn predicate on the "group_request_curl" field.
func GroupRequestCurlNotIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupRequestCurl), v...))
	})
}

// GroupRequestCurlGT applies the GT predicate on the "group_request_curl" field.
func GroupRequestCurlGT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlGTE applies the GTE predicate on the "group_request_curl" field.
func GroupRequestCurlGTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlLT applies the LT predicate on the "group_request_curl" field.
func GroupRequestCurlLT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlLTE applies the LTE predicate on the "group_request_curl" field.
func GroupRequestCurlLTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlContains applies the Contains predicate on the "group_request_curl" field.
func GroupRequestCurlContains(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlHasPrefix applies the HasPrefix predicate on the "group_request_curl" field.
func GroupRequestCurlHasPrefix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlHasSuffix applies the HasSuffix predicate on the "group_request_curl" field.
func GroupRequestCurlHasSuffix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlEqualFold applies the EqualFold predicate on the "group_request_curl" field.
func GroupRequestCurlEqualFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupRequestCurlContainsFold applies the ContainsFold predicate on the "group_request_curl" field.
func GroupRequestCurlContainsFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupRequestCurl), v))
	})
}

// GroupResponseRawEQ applies the EQ predicate on the "group_response_raw" field.
func GroupResponseRawEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawNEQ applies the NEQ predicate on the "group_response_raw" field.
func GroupResponseRawNEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawIn applies the In predicate on the "group_response_raw" field.
func GroupResponseRawIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGroupResponseRaw), v...))
	})
}

// GroupResponseRawNotIn applies the NotIn predicate on the "group_response_raw" field.
func GroupResponseRawNotIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGroupResponseRaw), v...))
	})
}

// GroupResponseRawGT applies the GT predicate on the "group_response_raw" field.
func GroupResponseRawGT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawGTE applies the GTE predicate on the "group_response_raw" field.
func GroupResponseRawGTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawLT applies the LT predicate on the "group_response_raw" field.
func GroupResponseRawLT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawLTE applies the LTE predicate on the "group_response_raw" field.
func GroupResponseRawLTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawContains applies the Contains predicate on the "group_response_raw" field.
func GroupResponseRawContains(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawHasPrefix applies the HasPrefix predicate on the "group_response_raw" field.
func GroupResponseRawHasPrefix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawHasSuffix applies the HasSuffix predicate on the "group_response_raw" field.
func GroupResponseRawHasSuffix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawEqualFold applies the EqualFold predicate on the "group_response_raw" field.
func GroupResponseRawEqualFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupResponseRaw), v))
	})
}

// GroupResponseRawContainsFold applies the ContainsFold predicate on the "group_response_raw" field.
func GroupResponseRawContainsFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupResponseRaw), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int16) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int16) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int16) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ErrorDisplayEQ applies the EQ predicate on the "error_display" field.
func ErrorDisplayEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayNEQ applies the NEQ predicate on the "error_display" field.
func ErrorDisplayNEQ(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayIn applies the In predicate on the "error_display" field.
func ErrorDisplayIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldErrorDisplay), v...))
	})
}

// ErrorDisplayNotIn applies the NotIn predicate on the "error_display" field.
func ErrorDisplayNotIn(vs ...string) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldErrorDisplay), v...))
	})
}

// ErrorDisplayGT applies the GT predicate on the "error_display" field.
func ErrorDisplayGT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayGTE applies the GTE predicate on the "error_display" field.
func ErrorDisplayGTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayLT applies the LT predicate on the "error_display" field.
func ErrorDisplayLT(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayLTE applies the LTE predicate on the "error_display" field.
func ErrorDisplayLTE(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayContains applies the Contains predicate on the "error_display" field.
func ErrorDisplayContains(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayHasPrefix applies the HasPrefix predicate on the "error_display" field.
func ErrorDisplayHasPrefix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayHasSuffix applies the HasSuffix predicate on the "error_display" field.
func ErrorDisplayHasSuffix(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayEqualFold applies the EqualFold predicate on the "error_display" field.
func ErrorDisplayEqualFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorDisplay), v))
	})
}

// ErrorDisplayContainsFold applies the ContainsFold predicate on the "error_display" field.
func ErrorDisplayContainsFold(v string) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorDisplay), v))
	})
}

// ExecutedTimeEQ applies the EQ predicate on the "executed_time" field.
func ExecutedTimeEQ(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeNEQ applies the NEQ predicate on the "executed_time" field.
func ExecutedTimeNEQ(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeIn applies the In predicate on the "executed_time" field.
func ExecutedTimeIn(vs ...int64) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExecutedTime), v...))
	})
}

// ExecutedTimeNotIn applies the NotIn predicate on the "executed_time" field.
func ExecutedTimeNotIn(vs ...int64) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExecutedTime), v...))
	})
}

// ExecutedTimeGT applies the GT predicate on the "executed_time" field.
func ExecutedTimeGT(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeGTE applies the GTE predicate on the "executed_time" field.
func ExecutedTimeGTE(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeLT applies the LT predicate on the "executed_time" field.
func ExecutedTimeLT(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExecutedTime), v))
	})
}

// ExecutedTimeLTE applies the LTE predicate on the "executed_time" field.
func ExecutedTimeLTE(v int64) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExecutedTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcessingFileRowGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessingFileRowGroup) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessingFileRowGroup) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessingFileRowGroup) predicate.ProcessingFileRowGroup {
	return predicate.ProcessingFileRowGroup(func(s *sql.Selector) {
		p(s.Not())
	})
}
