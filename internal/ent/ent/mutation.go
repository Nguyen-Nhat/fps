// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/fileawardpoint"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/membertransaction"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfile"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/processingfilerow"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFileAwardPoint    = "FileAwardPoint"
	TypeMemberTransaction = "MemberTransaction"
	TypeProcessingFile    = "ProcessingFile"
	TypeProcessingFileRow = "ProcessingFileRow"
	TypeUser              = "User"
)

// FileAwardPointMutation represents an operation that mutates the FileAwardPoint nodes in the graph.
type FileAwardPointMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	merchant_id            *int64
	addmerchant_id         *int64
	display_name           *string
	file_url               *string
	result_file_url        *string
	note                   *string
	status                 *int16
	addstatus              *int16
	stats_total_row        *int32
	addstats_total_row     *int32
	stats_total_success    *int32
	addstats_total_success *int32
	created_at             *time.Time
	updated_at             *time.Time
	created_by             *string
	updated_by             *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*FileAwardPoint, error)
	predicates             []predicate.FileAwardPoint
}

var _ ent.Mutation = (*FileAwardPointMutation)(nil)

// fileawardpointOption allows management of the mutation configuration using functional options.
type fileawardpointOption func(*FileAwardPointMutation)

// newFileAwardPointMutation creates new mutation for the FileAwardPoint entity.
func newFileAwardPointMutation(c config, op Op, opts ...fileawardpointOption) *FileAwardPointMutation {
	m := &FileAwardPointMutation{
		config:        c,
		op:            op,
		typ:           TypeFileAwardPoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileAwardPointID sets the ID field of the mutation.
func withFileAwardPointID(id int) fileawardpointOption {
	return func(m *FileAwardPointMutation) {
		var (
			err   error
			once  sync.Once
			value *FileAwardPoint
		)
		m.oldValue = func(ctx context.Context) (*FileAwardPoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileAwardPoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileAwardPoint sets the old FileAwardPoint of the mutation.
func withFileAwardPoint(node *FileAwardPoint) fileawardpointOption {
	return func(m *FileAwardPointMutation) {
		m.oldValue = func(context.Context) (*FileAwardPoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileAwardPointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileAwardPointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileAwardPointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileAwardPointMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileAwardPoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMerchantID sets the "merchant_id" field.
func (m *FileAwardPointMutation) SetMerchantID(i int64) {
	m.merchant_id = &i
	m.addmerchant_id = nil
}

// MerchantID returns the value of the "merchant_id" field in the mutation.
func (m *FileAwardPointMutation) MerchantID() (r int64, exists bool) {
	v := m.merchant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchantID returns the old "merchant_id" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldMerchantID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchantID: %w", err)
	}
	return oldValue.MerchantID, nil
}

// AddMerchantID adds i to the "merchant_id" field.
func (m *FileAwardPointMutation) AddMerchantID(i int64) {
	if m.addmerchant_id != nil {
		*m.addmerchant_id += i
	} else {
		m.addmerchant_id = &i
	}
}

// AddedMerchantID returns the value that was added to the "merchant_id" field in this mutation.
func (m *FileAwardPointMutation) AddedMerchantID() (r int64, exists bool) {
	v := m.addmerchant_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMerchantID resets all changes to the "merchant_id" field.
func (m *FileAwardPointMutation) ResetMerchantID() {
	m.merchant_id = nil
	m.addmerchant_id = nil
}

// SetDisplayName sets the "display_name" field.
func (m *FileAwardPointMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *FileAwardPointMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *FileAwardPointMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetFileURL sets the "file_url" field.
func (m *FileAwardPointMutation) SetFileURL(s string) {
	m.file_url = &s
}

// FileURL returns the value of the "file_url" field in the mutation.
func (m *FileAwardPointMutation) FileURL() (r string, exists bool) {
	v := m.file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFileURL returns the old "file_url" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileURL: %w", err)
	}
	return oldValue.FileURL, nil
}

// ResetFileURL resets all changes to the "file_url" field.
func (m *FileAwardPointMutation) ResetFileURL() {
	m.file_url = nil
}

// SetResultFileURL sets the "result_file_url" field.
func (m *FileAwardPointMutation) SetResultFileURL(s string) {
	m.result_file_url = &s
}

// ResultFileURL returns the value of the "result_file_url" field in the mutation.
func (m *FileAwardPointMutation) ResultFileURL() (r string, exists bool) {
	v := m.result_file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldResultFileURL returns the old "result_file_url" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldResultFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResultFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResultFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResultFileURL: %w", err)
	}
	return oldValue.ResultFileURL, nil
}

// ResetResultFileURL resets all changes to the "result_file_url" field.
func (m *FileAwardPointMutation) ResetResultFileURL() {
	m.result_file_url = nil
}

// SetNote sets the "note" field.
func (m *FileAwardPointMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *FileAwardPointMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *FileAwardPointMutation) ResetNote() {
	m.note = nil
}

// SetStatus sets the "status" field.
func (m *FileAwardPointMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *FileAwardPointMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *FileAwardPointMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *FileAwardPointMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *FileAwardPointMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (m *FileAwardPointMutation) SetStatsTotalRow(i int32) {
	m.stats_total_row = &i
	m.addstats_total_row = nil
}

// StatsTotalRow returns the value of the "stats_total_row" field in the mutation.
func (m *FileAwardPointMutation) StatsTotalRow() (r int32, exists bool) {
	v := m.stats_total_row
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalRow returns the old "stats_total_row" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldStatsTotalRow(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalRow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalRow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalRow: %w", err)
	}
	return oldValue.StatsTotalRow, nil
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (m *FileAwardPointMutation) AddStatsTotalRow(i int32) {
	if m.addstats_total_row != nil {
		*m.addstats_total_row += i
	} else {
		m.addstats_total_row = &i
	}
}

// AddedStatsTotalRow returns the value that was added to the "stats_total_row" field in this mutation.
func (m *FileAwardPointMutation) AddedStatsTotalRow() (r int32, exists bool) {
	v := m.addstats_total_row
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalRow resets all changes to the "stats_total_row" field.
func (m *FileAwardPointMutation) ResetStatsTotalRow() {
	m.stats_total_row = nil
	m.addstats_total_row = nil
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (m *FileAwardPointMutation) SetStatsTotalSuccess(i int32) {
	m.stats_total_success = &i
	m.addstats_total_success = nil
}

// StatsTotalSuccess returns the value of the "stats_total_success" field in the mutation.
func (m *FileAwardPointMutation) StatsTotalSuccess() (r int32, exists bool) {
	v := m.stats_total_success
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalSuccess returns the old "stats_total_success" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldStatsTotalSuccess(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalSuccess: %w", err)
	}
	return oldValue.StatsTotalSuccess, nil
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (m *FileAwardPointMutation) AddStatsTotalSuccess(i int32) {
	if m.addstats_total_success != nil {
		*m.addstats_total_success += i
	} else {
		m.addstats_total_success = &i
	}
}

// AddedStatsTotalSuccess returns the value that was added to the "stats_total_success" field in this mutation.
func (m *FileAwardPointMutation) AddedStatsTotalSuccess() (r int32, exists bool) {
	v := m.addstats_total_success
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalSuccess resets all changes to the "stats_total_success" field.
func (m *FileAwardPointMutation) ResetStatsTotalSuccess() {
	m.stats_total_success = nil
	m.addstats_total_success = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FileAwardPointMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileAwardPointMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileAwardPointMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileAwardPointMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileAwardPointMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileAwardPointMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *FileAwardPointMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FileAwardPointMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FileAwardPointMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *FileAwardPointMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *FileAwardPointMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the FileAwardPoint entity.
// If the FileAwardPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileAwardPointMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *FileAwardPointMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// Where appends a list predicates to the FileAwardPointMutation builder.
func (m *FileAwardPointMutation) Where(ps ...predicate.FileAwardPoint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FileAwardPointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileAwardPoint).
func (m *FileAwardPointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileAwardPointMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.merchant_id != nil {
		fields = append(fields, fileawardpoint.FieldMerchantID)
	}
	if m.display_name != nil {
		fields = append(fields, fileawardpoint.FieldDisplayName)
	}
	if m.file_url != nil {
		fields = append(fields, fileawardpoint.FieldFileURL)
	}
	if m.result_file_url != nil {
		fields = append(fields, fileawardpoint.FieldResultFileURL)
	}
	if m.note != nil {
		fields = append(fields, fileawardpoint.FieldNote)
	}
	if m.status != nil {
		fields = append(fields, fileawardpoint.FieldStatus)
	}
	if m.stats_total_row != nil {
		fields = append(fields, fileawardpoint.FieldStatsTotalRow)
	}
	if m.stats_total_success != nil {
		fields = append(fields, fileawardpoint.FieldStatsTotalSuccess)
	}
	if m.created_at != nil {
		fields = append(fields, fileawardpoint.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fileawardpoint.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, fileawardpoint.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, fileawardpoint.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileAwardPointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fileawardpoint.FieldMerchantID:
		return m.MerchantID()
	case fileawardpoint.FieldDisplayName:
		return m.DisplayName()
	case fileawardpoint.FieldFileURL:
		return m.FileURL()
	case fileawardpoint.FieldResultFileURL:
		return m.ResultFileURL()
	case fileawardpoint.FieldNote:
		return m.Note()
	case fileawardpoint.FieldStatus:
		return m.Status()
	case fileawardpoint.FieldStatsTotalRow:
		return m.StatsTotalRow()
	case fileawardpoint.FieldStatsTotalSuccess:
		return m.StatsTotalSuccess()
	case fileawardpoint.FieldCreatedAt:
		return m.CreatedAt()
	case fileawardpoint.FieldUpdatedAt:
		return m.UpdatedAt()
	case fileawardpoint.FieldCreatedBy:
		return m.CreatedBy()
	case fileawardpoint.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileAwardPointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fileawardpoint.FieldMerchantID:
		return m.OldMerchantID(ctx)
	case fileawardpoint.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case fileawardpoint.FieldFileURL:
		return m.OldFileURL(ctx)
	case fileawardpoint.FieldResultFileURL:
		return m.OldResultFileURL(ctx)
	case fileawardpoint.FieldNote:
		return m.OldNote(ctx)
	case fileawardpoint.FieldStatus:
		return m.OldStatus(ctx)
	case fileawardpoint.FieldStatsTotalRow:
		return m.OldStatsTotalRow(ctx)
	case fileawardpoint.FieldStatsTotalSuccess:
		return m.OldStatsTotalSuccess(ctx)
	case fileawardpoint.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fileawardpoint.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fileawardpoint.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case fileawardpoint.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown FileAwardPoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileAwardPointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fileawardpoint.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchantID(v)
		return nil
	case fileawardpoint.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case fileawardpoint.FieldFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileURL(v)
		return nil
	case fileawardpoint.FieldResultFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResultFileURL(v)
		return nil
	case fileawardpoint.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case fileawardpoint.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case fileawardpoint.FieldStatsTotalRow:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalRow(v)
		return nil
	case fileawardpoint.FieldStatsTotalSuccess:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalSuccess(v)
		return nil
	case fileawardpoint.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fileawardpoint.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fileawardpoint.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case fileawardpoint.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown FileAwardPoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileAwardPointMutation) AddedFields() []string {
	var fields []string
	if m.addmerchant_id != nil {
		fields = append(fields, fileawardpoint.FieldMerchantID)
	}
	if m.addstatus != nil {
		fields = append(fields, fileawardpoint.FieldStatus)
	}
	if m.addstats_total_row != nil {
		fields = append(fields, fileawardpoint.FieldStatsTotalRow)
	}
	if m.addstats_total_success != nil {
		fields = append(fields, fileawardpoint.FieldStatsTotalSuccess)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileAwardPointMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fileawardpoint.FieldMerchantID:
		return m.AddedMerchantID()
	case fileawardpoint.FieldStatus:
		return m.AddedStatus()
	case fileawardpoint.FieldStatsTotalRow:
		return m.AddedStatsTotalRow()
	case fileawardpoint.FieldStatsTotalSuccess:
		return m.AddedStatsTotalSuccess()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileAwardPointMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fileawardpoint.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMerchantID(v)
		return nil
	case fileawardpoint.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case fileawardpoint.FieldStatsTotalRow:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalRow(v)
		return nil
	case fileawardpoint.FieldStatsTotalSuccess:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalSuccess(v)
		return nil
	}
	return fmt.Errorf("unknown FileAwardPoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileAwardPointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileAwardPointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileAwardPointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileAwardPoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileAwardPointMutation) ResetField(name string) error {
	switch name {
	case fileawardpoint.FieldMerchantID:
		m.ResetMerchantID()
		return nil
	case fileawardpoint.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case fileawardpoint.FieldFileURL:
		m.ResetFileURL()
		return nil
	case fileawardpoint.FieldResultFileURL:
		m.ResetResultFileURL()
		return nil
	case fileawardpoint.FieldNote:
		m.ResetNote()
		return nil
	case fileawardpoint.FieldStatus:
		m.ResetStatus()
		return nil
	case fileawardpoint.FieldStatsTotalRow:
		m.ResetStatsTotalRow()
		return nil
	case fileawardpoint.FieldStatsTotalSuccess:
		m.ResetStatsTotalSuccess()
		return nil
	case fileawardpoint.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fileawardpoint.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fileawardpoint.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case fileawardpoint.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown FileAwardPoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileAwardPointMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileAwardPointMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileAwardPointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileAwardPointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileAwardPointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileAwardPointMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileAwardPointMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileAwardPoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileAwardPointMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileAwardPoint edge %s", name)
}

// MemberTransactionMutation represents an operation that mutates the MemberTransaction nodes in the graph.
type MemberTransactionMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	file_award_point_id    *int32
	addfile_award_point_id *int32
	point                  *int64
	addpoint               *int64
	phone                  *string
	order_code             *string
	ref_id                 *string
	sent_time              *time.Time
	loyalty_txn_id         *int64
	addloyalty_txn_id      *int64
	txn_desc               *string
	status                 *int16
	addstatus              *int16
	error                  *string
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*MemberTransaction, error)
	predicates             []predicate.MemberTransaction
}

var _ ent.Mutation = (*MemberTransactionMutation)(nil)

// membertransactionOption allows management of the mutation configuration using functional options.
type membertransactionOption func(*MemberTransactionMutation)

// newMemberTransactionMutation creates new mutation for the MemberTransaction entity.
func newMemberTransactionMutation(c config, op Op, opts ...membertransactionOption) *MemberTransactionMutation {
	m := &MemberTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeMemberTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberTransactionID sets the ID field of the mutation.
func withMemberTransactionID(id int) membertransactionOption {
	return func(m *MemberTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *MemberTransaction
		)
		m.oldValue = func(ctx context.Context) (*MemberTransaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MemberTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemberTransaction sets the old MemberTransaction of the mutation.
func withMemberTransaction(node *MemberTransaction) membertransactionOption {
	return func(m *MemberTransactionMutation) {
		m.oldValue = func(context.Context) (*MemberTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberTransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberTransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MemberTransaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileAwardPointID sets the "file_award_point_id" field.
func (m *MemberTransactionMutation) SetFileAwardPointID(i int32) {
	m.file_award_point_id = &i
	m.addfile_award_point_id = nil
}

// FileAwardPointID returns the value of the "file_award_point_id" field in the mutation.
func (m *MemberTransactionMutation) FileAwardPointID() (r int32, exists bool) {
	v := m.file_award_point_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFileAwardPointID returns the old "file_award_point_id" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldFileAwardPointID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileAwardPointID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileAwardPointID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileAwardPointID: %w", err)
	}
	return oldValue.FileAwardPointID, nil
}

// AddFileAwardPointID adds i to the "file_award_point_id" field.
func (m *MemberTransactionMutation) AddFileAwardPointID(i int32) {
	if m.addfile_award_point_id != nil {
		*m.addfile_award_point_id += i
	} else {
		m.addfile_award_point_id = &i
	}
}

// AddedFileAwardPointID returns the value that was added to the "file_award_point_id" field in this mutation.
func (m *MemberTransactionMutation) AddedFileAwardPointID() (r int32, exists bool) {
	v := m.addfile_award_point_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileAwardPointID resets all changes to the "file_award_point_id" field.
func (m *MemberTransactionMutation) ResetFileAwardPointID() {
	m.file_award_point_id = nil
	m.addfile_award_point_id = nil
}

// SetPoint sets the "point" field.
func (m *MemberTransactionMutation) SetPoint(i int64) {
	m.point = &i
	m.addpoint = nil
}

// Point returns the value of the "point" field in the mutation.
func (m *MemberTransactionMutation) Point() (r int64, exists bool) {
	v := m.point
	if v == nil {
		return
	}
	return *v, true
}

// OldPoint returns the old "point" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldPoint(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoint: %w", err)
	}
	return oldValue.Point, nil
}

// AddPoint adds i to the "point" field.
func (m *MemberTransactionMutation) AddPoint(i int64) {
	if m.addpoint != nil {
		*m.addpoint += i
	} else {
		m.addpoint = &i
	}
}

// AddedPoint returns the value that was added to the "point" field in this mutation.
func (m *MemberTransactionMutation) AddedPoint() (r int64, exists bool) {
	v := m.addpoint
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoint resets all changes to the "point" field.
func (m *MemberTransactionMutation) ResetPoint() {
	m.point = nil
	m.addpoint = nil
}

// SetPhone sets the "phone" field.
func (m *MemberTransactionMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *MemberTransactionMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *MemberTransactionMutation) ResetPhone() {
	m.phone = nil
}

// SetOrderCode sets the "order_code" field.
func (m *MemberTransactionMutation) SetOrderCode(s string) {
	m.order_code = &s
}

// OrderCode returns the value of the "order_code" field in the mutation.
func (m *MemberTransactionMutation) OrderCode() (r string, exists bool) {
	v := m.order_code
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderCode returns the old "order_code" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldOrderCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderCode: %w", err)
	}
	return oldValue.OrderCode, nil
}

// ResetOrderCode resets all changes to the "order_code" field.
func (m *MemberTransactionMutation) ResetOrderCode() {
	m.order_code = nil
}

// SetRefID sets the "ref_id" field.
func (m *MemberTransactionMutation) SetRefID(s string) {
	m.ref_id = &s
}

// RefID returns the value of the "ref_id" field in the mutation.
func (m *MemberTransactionMutation) RefID() (r string, exists bool) {
	v := m.ref_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRefID returns the old "ref_id" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldRefID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefID: %w", err)
	}
	return oldValue.RefID, nil
}

// ResetRefID resets all changes to the "ref_id" field.
func (m *MemberTransactionMutation) ResetRefID() {
	m.ref_id = nil
}

// SetSentTime sets the "sent_time" field.
func (m *MemberTransactionMutation) SetSentTime(t time.Time) {
	m.sent_time = &t
}

// SentTime returns the value of the "sent_time" field in the mutation.
func (m *MemberTransactionMutation) SentTime() (r time.Time, exists bool) {
	v := m.sent_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSentTime returns the old "sent_time" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldSentTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentTime: %w", err)
	}
	return oldValue.SentTime, nil
}

// ResetSentTime resets all changes to the "sent_time" field.
func (m *MemberTransactionMutation) ResetSentTime() {
	m.sent_time = nil
}

// SetLoyaltyTxnID sets the "loyalty_txn_id" field.
func (m *MemberTransactionMutation) SetLoyaltyTxnID(i int64) {
	m.loyalty_txn_id = &i
	m.addloyalty_txn_id = nil
}

// LoyaltyTxnID returns the value of the "loyalty_txn_id" field in the mutation.
func (m *MemberTransactionMutation) LoyaltyTxnID() (r int64, exists bool) {
	v := m.loyalty_txn_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLoyaltyTxnID returns the old "loyalty_txn_id" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldLoyaltyTxnID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoyaltyTxnID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoyaltyTxnID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoyaltyTxnID: %w", err)
	}
	return oldValue.LoyaltyTxnID, nil
}

// AddLoyaltyTxnID adds i to the "loyalty_txn_id" field.
func (m *MemberTransactionMutation) AddLoyaltyTxnID(i int64) {
	if m.addloyalty_txn_id != nil {
		*m.addloyalty_txn_id += i
	} else {
		m.addloyalty_txn_id = &i
	}
}

// AddedLoyaltyTxnID returns the value that was added to the "loyalty_txn_id" field in this mutation.
func (m *MemberTransactionMutation) AddedLoyaltyTxnID() (r int64, exists bool) {
	v := m.addloyalty_txn_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetLoyaltyTxnID resets all changes to the "loyalty_txn_id" field.
func (m *MemberTransactionMutation) ResetLoyaltyTxnID() {
	m.loyalty_txn_id = nil
	m.addloyalty_txn_id = nil
}

// SetTxnDesc sets the "txn_desc" field.
func (m *MemberTransactionMutation) SetTxnDesc(s string) {
	m.txn_desc = &s
}

// TxnDesc returns the value of the "txn_desc" field in the mutation.
func (m *MemberTransactionMutation) TxnDesc() (r string, exists bool) {
	v := m.txn_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldTxnDesc returns the old "txn_desc" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldTxnDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxnDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxnDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxnDesc: %w", err)
	}
	return oldValue.TxnDesc, nil
}

// ResetTxnDesc resets all changes to the "txn_desc" field.
func (m *MemberTransactionMutation) ResetTxnDesc() {
	m.txn_desc = nil
}

// SetStatus sets the "status" field.
func (m *MemberTransactionMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MemberTransactionMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *MemberTransactionMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MemberTransactionMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *MemberTransactionMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetError sets the "error" field.
func (m *MemberTransactionMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *MemberTransactionMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ResetError resets all changes to the "error" field.
func (m *MemberTransactionMutation) ResetError() {
	m.error = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MemberTransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemberTransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemberTransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MemberTransactionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MemberTransactionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MemberTransaction entity.
// If the MemberTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberTransactionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MemberTransactionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MemberTransactionMutation builder.
func (m *MemberTransactionMutation) Where(ps ...predicate.MemberTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MemberTransactionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MemberTransaction).
func (m *MemberTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberTransactionMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.file_award_point_id != nil {
		fields = append(fields, membertransaction.FieldFileAwardPointID)
	}
	if m.point != nil {
		fields = append(fields, membertransaction.FieldPoint)
	}
	if m.phone != nil {
		fields = append(fields, membertransaction.FieldPhone)
	}
	if m.order_code != nil {
		fields = append(fields, membertransaction.FieldOrderCode)
	}
	if m.ref_id != nil {
		fields = append(fields, membertransaction.FieldRefID)
	}
	if m.sent_time != nil {
		fields = append(fields, membertransaction.FieldSentTime)
	}
	if m.loyalty_txn_id != nil {
		fields = append(fields, membertransaction.FieldLoyaltyTxnID)
	}
	if m.txn_desc != nil {
		fields = append(fields, membertransaction.FieldTxnDesc)
	}
	if m.status != nil {
		fields = append(fields, membertransaction.FieldStatus)
	}
	if m.error != nil {
		fields = append(fields, membertransaction.FieldError)
	}
	if m.created_at != nil {
		fields = append(fields, membertransaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, membertransaction.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		return m.FileAwardPointID()
	case membertransaction.FieldPoint:
		return m.Point()
	case membertransaction.FieldPhone:
		return m.Phone()
	case membertransaction.FieldOrderCode:
		return m.OrderCode()
	case membertransaction.FieldRefID:
		return m.RefID()
	case membertransaction.FieldSentTime:
		return m.SentTime()
	case membertransaction.FieldLoyaltyTxnID:
		return m.LoyaltyTxnID()
	case membertransaction.FieldTxnDesc:
		return m.TxnDesc()
	case membertransaction.FieldStatus:
		return m.Status()
	case membertransaction.FieldError:
		return m.Error()
	case membertransaction.FieldCreatedAt:
		return m.CreatedAt()
	case membertransaction.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		return m.OldFileAwardPointID(ctx)
	case membertransaction.FieldPoint:
		return m.OldPoint(ctx)
	case membertransaction.FieldPhone:
		return m.OldPhone(ctx)
	case membertransaction.FieldOrderCode:
		return m.OldOrderCode(ctx)
	case membertransaction.FieldRefID:
		return m.OldRefID(ctx)
	case membertransaction.FieldSentTime:
		return m.OldSentTime(ctx)
	case membertransaction.FieldLoyaltyTxnID:
		return m.OldLoyaltyTxnID(ctx)
	case membertransaction.FieldTxnDesc:
		return m.OldTxnDesc(ctx)
	case membertransaction.FieldStatus:
		return m.OldStatus(ctx)
	case membertransaction.FieldError:
		return m.OldError(ctx)
	case membertransaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case membertransaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MemberTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileAwardPointID(v)
		return nil
	case membertransaction.FieldPoint:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoint(v)
		return nil
	case membertransaction.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case membertransaction.FieldOrderCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderCode(v)
		return nil
	case membertransaction.FieldRefID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefID(v)
		return nil
	case membertransaction.FieldSentTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentTime(v)
		return nil
	case membertransaction.FieldLoyaltyTxnID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoyaltyTxnID(v)
		return nil
	case membertransaction.FieldTxnDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxnDesc(v)
		return nil
	case membertransaction.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case membertransaction.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case membertransaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case membertransaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MemberTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberTransactionMutation) AddedFields() []string {
	var fields []string
	if m.addfile_award_point_id != nil {
		fields = append(fields, membertransaction.FieldFileAwardPointID)
	}
	if m.addpoint != nil {
		fields = append(fields, membertransaction.FieldPoint)
	}
	if m.addloyalty_txn_id != nil {
		fields = append(fields, membertransaction.FieldLoyaltyTxnID)
	}
	if m.addstatus != nil {
		fields = append(fields, membertransaction.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberTransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		return m.AddedFileAwardPointID()
	case membertransaction.FieldPoint:
		return m.AddedPoint()
	case membertransaction.FieldLoyaltyTxnID:
		return m.AddedLoyaltyTxnID()
	case membertransaction.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileAwardPointID(v)
		return nil
	case membertransaction.FieldPoint:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoint(v)
		return nil
	case membertransaction.FieldLoyaltyTxnID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLoyaltyTxnID(v)
		return nil
	case membertransaction.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown MemberTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberTransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberTransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MemberTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberTransactionMutation) ResetField(name string) error {
	switch name {
	case membertransaction.FieldFileAwardPointID:
		m.ResetFileAwardPointID()
		return nil
	case membertransaction.FieldPoint:
		m.ResetPoint()
		return nil
	case membertransaction.FieldPhone:
		m.ResetPhone()
		return nil
	case membertransaction.FieldOrderCode:
		m.ResetOrderCode()
		return nil
	case membertransaction.FieldRefID:
		m.ResetRefID()
		return nil
	case membertransaction.FieldSentTime:
		m.ResetSentTime()
		return nil
	case membertransaction.FieldLoyaltyTxnID:
		m.ResetLoyaltyTxnID()
		return nil
	case membertransaction.FieldTxnDesc:
		m.ResetTxnDesc()
		return nil
	case membertransaction.FieldStatus:
		m.ResetStatus()
		return nil
	case membertransaction.FieldError:
		m.ResetError()
		return nil
	case membertransaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case membertransaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MemberTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MemberTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MemberTransaction edge %s", name)
}

// ProcessingFileMutation represents an operation that mutates the ProcessingFile nodes in the graph.
type ProcessingFileMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	client_id              *int32
	addclient_id           *int32
	display_name           *string
	file_url               *string
	result_file_url        *string
	status                 *int16
	addstatus              *int16
	total_mapping          *int32
	addtotal_mapping       *int32
	stats_total_row        *int32
	addstats_total_row     *int32
	stats_total_success    *int32
	addstats_total_success *int32
	created_at             *time.Time
	created_by             *string
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*ProcessingFile, error)
	predicates             []predicate.ProcessingFile
}

var _ ent.Mutation = (*ProcessingFileMutation)(nil)

// processingfileOption allows management of the mutation configuration using functional options.
type processingfileOption func(*ProcessingFileMutation)

// newProcessingFileMutation creates new mutation for the ProcessingFile entity.
func newProcessingFileMutation(c config, op Op, opts ...processingfileOption) *ProcessingFileMutation {
	m := &ProcessingFileMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessingFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessingFileID sets the ID field of the mutation.
func withProcessingFileID(id int) processingfileOption {
	return func(m *ProcessingFileMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessingFile
		)
		m.oldValue = func(ctx context.Context) (*ProcessingFile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessingFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessingFile sets the old ProcessingFile of the mutation.
func withProcessingFile(node *ProcessingFile) processingfileOption {
	return func(m *ProcessingFileMutation) {
		m.oldValue = func(context.Context) (*ProcessingFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessingFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessingFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessingFileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessingFileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessingFile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClientID sets the "client_id" field.
func (m *ProcessingFileMutation) SetClientID(i int32) {
	m.client_id = &i
	m.addclient_id = nil
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *ProcessingFileMutation) ClientID() (r int32, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldClientID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// AddClientID adds i to the "client_id" field.
func (m *ProcessingFileMutation) AddClientID(i int32) {
	if m.addclient_id != nil {
		*m.addclient_id += i
	} else {
		m.addclient_id = &i
	}
}

// AddedClientID returns the value that was added to the "client_id" field in this mutation.
func (m *ProcessingFileMutation) AddedClientID() (r int32, exists bool) {
	v := m.addclient_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetClientID resets all changes to the "client_id" field.
func (m *ProcessingFileMutation) ResetClientID() {
	m.client_id = nil
	m.addclient_id = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ProcessingFileMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ProcessingFileMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ProcessingFileMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetFileURL sets the "file_url" field.
func (m *ProcessingFileMutation) SetFileURL(s string) {
	m.file_url = &s
}

// FileURL returns the value of the "file_url" field in the mutation.
func (m *ProcessingFileMutation) FileURL() (r string, exists bool) {
	v := m.file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFileURL returns the old "file_url" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileURL: %w", err)
	}
	return oldValue.FileURL, nil
}

// ResetFileURL resets all changes to the "file_url" field.
func (m *ProcessingFileMutation) ResetFileURL() {
	m.file_url = nil
}

// SetResultFileURL sets the "result_file_url" field.
func (m *ProcessingFileMutation) SetResultFileURL(s string) {
	m.result_file_url = &s
}

// ResultFileURL returns the value of the "result_file_url" field in the mutation.
func (m *ProcessingFileMutation) ResultFileURL() (r string, exists bool) {
	v := m.result_file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldResultFileURL returns the old "result_file_url" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldResultFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResultFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResultFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResultFileURL: %w", err)
	}
	return oldValue.ResultFileURL, nil
}

// ResetResultFileURL resets all changes to the "result_file_url" field.
func (m *ProcessingFileMutation) ResetResultFileURL() {
	m.result_file_url = nil
}

// SetStatus sets the "status" field.
func (m *ProcessingFileMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ProcessingFileMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ProcessingFileMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ProcessingFileMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ProcessingFileMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetTotalMapping sets the "total_mapping" field.
func (m *ProcessingFileMutation) SetTotalMapping(i int32) {
	m.total_mapping = &i
	m.addtotal_mapping = nil
}

// TotalMapping returns the value of the "total_mapping" field in the mutation.
func (m *ProcessingFileMutation) TotalMapping() (r int32, exists bool) {
	v := m.total_mapping
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalMapping returns the old "total_mapping" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldTotalMapping(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalMapping is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalMapping requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalMapping: %w", err)
	}
	return oldValue.TotalMapping, nil
}

// AddTotalMapping adds i to the "total_mapping" field.
func (m *ProcessingFileMutation) AddTotalMapping(i int32) {
	if m.addtotal_mapping != nil {
		*m.addtotal_mapping += i
	} else {
		m.addtotal_mapping = &i
	}
}

// AddedTotalMapping returns the value that was added to the "total_mapping" field in this mutation.
func (m *ProcessingFileMutation) AddedTotalMapping() (r int32, exists bool) {
	v := m.addtotal_mapping
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalMapping resets all changes to the "total_mapping" field.
func (m *ProcessingFileMutation) ResetTotalMapping() {
	m.total_mapping = nil
	m.addtotal_mapping = nil
}

// SetStatsTotalRow sets the "stats_total_row" field.
func (m *ProcessingFileMutation) SetStatsTotalRow(i int32) {
	m.stats_total_row = &i
	m.addstats_total_row = nil
}

// StatsTotalRow returns the value of the "stats_total_row" field in the mutation.
func (m *ProcessingFileMutation) StatsTotalRow() (r int32, exists bool) {
	v := m.stats_total_row
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalRow returns the old "stats_total_row" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldStatsTotalRow(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalRow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalRow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalRow: %w", err)
	}
	return oldValue.StatsTotalRow, nil
}

// AddStatsTotalRow adds i to the "stats_total_row" field.
func (m *ProcessingFileMutation) AddStatsTotalRow(i int32) {
	if m.addstats_total_row != nil {
		*m.addstats_total_row += i
	} else {
		m.addstats_total_row = &i
	}
}

// AddedStatsTotalRow returns the value that was added to the "stats_total_row" field in this mutation.
func (m *ProcessingFileMutation) AddedStatsTotalRow() (r int32, exists bool) {
	v := m.addstats_total_row
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalRow resets all changes to the "stats_total_row" field.
func (m *ProcessingFileMutation) ResetStatsTotalRow() {
	m.stats_total_row = nil
	m.addstats_total_row = nil
}

// SetStatsTotalSuccess sets the "stats_total_success" field.
func (m *ProcessingFileMutation) SetStatsTotalSuccess(i int32) {
	m.stats_total_success = &i
	m.addstats_total_success = nil
}

// StatsTotalSuccess returns the value of the "stats_total_success" field in the mutation.
func (m *ProcessingFileMutation) StatsTotalSuccess() (r int32, exists bool) {
	v := m.stats_total_success
	if v == nil {
		return
	}
	return *v, true
}

// OldStatsTotalSuccess returns the old "stats_total_success" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldStatsTotalSuccess(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatsTotalSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatsTotalSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatsTotalSuccess: %w", err)
	}
	return oldValue.StatsTotalSuccess, nil
}

// AddStatsTotalSuccess adds i to the "stats_total_success" field.
func (m *ProcessingFileMutation) AddStatsTotalSuccess(i int32) {
	if m.addstats_total_success != nil {
		*m.addstats_total_success += i
	} else {
		m.addstats_total_success = &i
	}
}

// AddedStatsTotalSuccess returns the value that was added to the "stats_total_success" field in this mutation.
func (m *ProcessingFileMutation) AddedStatsTotalSuccess() (r int32, exists bool) {
	v := m.addstats_total_success
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatsTotalSuccess resets all changes to the "stats_total_success" field.
func (m *ProcessingFileMutation) ResetStatsTotalSuccess() {
	m.stats_total_success = nil
	m.addstats_total_success = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProcessingFileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProcessingFileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProcessingFileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *ProcessingFileMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ProcessingFileMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ProcessingFileMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProcessingFileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProcessingFileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProcessingFile entity.
// If the ProcessingFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProcessingFileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the ProcessingFileMutation builder.
func (m *ProcessingFileMutation) Where(ps ...predicate.ProcessingFile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProcessingFileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProcessingFile).
func (m *ProcessingFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessingFileMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.client_id != nil {
		fields = append(fields, processingfile.FieldClientID)
	}
	if m.display_name != nil {
		fields = append(fields, processingfile.FieldDisplayName)
	}
	if m.file_url != nil {
		fields = append(fields, processingfile.FieldFileURL)
	}
	if m.result_file_url != nil {
		fields = append(fields, processingfile.FieldResultFileURL)
	}
	if m.status != nil {
		fields = append(fields, processingfile.FieldStatus)
	}
	if m.total_mapping != nil {
		fields = append(fields, processingfile.FieldTotalMapping)
	}
	if m.stats_total_row != nil {
		fields = append(fields, processingfile.FieldStatsTotalRow)
	}
	if m.stats_total_success != nil {
		fields = append(fields, processingfile.FieldStatsTotalSuccess)
	}
	if m.created_at != nil {
		fields = append(fields, processingfile.FieldCreatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, processingfile.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, processingfile.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessingFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processingfile.FieldClientID:
		return m.ClientID()
	case processingfile.FieldDisplayName:
		return m.DisplayName()
	case processingfile.FieldFileURL:
		return m.FileURL()
	case processingfile.FieldResultFileURL:
		return m.ResultFileURL()
	case processingfile.FieldStatus:
		return m.Status()
	case processingfile.FieldTotalMapping:
		return m.TotalMapping()
	case processingfile.FieldStatsTotalRow:
		return m.StatsTotalRow()
	case processingfile.FieldStatsTotalSuccess:
		return m.StatsTotalSuccess()
	case processingfile.FieldCreatedAt:
		return m.CreatedAt()
	case processingfile.FieldCreatedBy:
		return m.CreatedBy()
	case processingfile.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessingFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processingfile.FieldClientID:
		return m.OldClientID(ctx)
	case processingfile.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case processingfile.FieldFileURL:
		return m.OldFileURL(ctx)
	case processingfile.FieldResultFileURL:
		return m.OldResultFileURL(ctx)
	case processingfile.FieldStatus:
		return m.OldStatus(ctx)
	case processingfile.FieldTotalMapping:
		return m.OldTotalMapping(ctx)
	case processingfile.FieldStatsTotalRow:
		return m.OldStatsTotalRow(ctx)
	case processingfile.FieldStatsTotalSuccess:
		return m.OldStatsTotalSuccess(ctx)
	case processingfile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case processingfile.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case processingfile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessingFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessingFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processingfile.FieldClientID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case processingfile.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case processingfile.FieldFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileURL(v)
		return nil
	case processingfile.FieldResultFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResultFileURL(v)
		return nil
	case processingfile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case processingfile.FieldTotalMapping:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalMapping(v)
		return nil
	case processingfile.FieldStatsTotalRow:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalRow(v)
		return nil
	case processingfile.FieldStatsTotalSuccess:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatsTotalSuccess(v)
		return nil
	case processingfile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case processingfile.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case processingfile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessingFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessingFileMutation) AddedFields() []string {
	var fields []string
	if m.addclient_id != nil {
		fields = append(fields, processingfile.FieldClientID)
	}
	if m.addstatus != nil {
		fields = append(fields, processingfile.FieldStatus)
	}
	if m.addtotal_mapping != nil {
		fields = append(fields, processingfile.FieldTotalMapping)
	}
	if m.addstats_total_row != nil {
		fields = append(fields, processingfile.FieldStatsTotalRow)
	}
	if m.addstats_total_success != nil {
		fields = append(fields, processingfile.FieldStatsTotalSuccess)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessingFileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processingfile.FieldClientID:
		return m.AddedClientID()
	case processingfile.FieldStatus:
		return m.AddedStatus()
	case processingfile.FieldTotalMapping:
		return m.AddedTotalMapping()
	case processingfile.FieldStatsTotalRow:
		return m.AddedStatsTotalRow()
	case processingfile.FieldStatsTotalSuccess:
		return m.AddedStatsTotalSuccess()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessingFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processingfile.FieldClientID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClientID(v)
		return nil
	case processingfile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case processingfile.FieldTotalMapping:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalMapping(v)
		return nil
	case processingfile.FieldStatsTotalRow:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalRow(v)
		return nil
	case processingfile.FieldStatsTotalSuccess:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatsTotalSuccess(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessingFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessingFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessingFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessingFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProcessingFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessingFileMutation) ResetField(name string) error {
	switch name {
	case processingfile.FieldClientID:
		m.ResetClientID()
		return nil
	case processingfile.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case processingfile.FieldFileURL:
		m.ResetFileURL()
		return nil
	case processingfile.FieldResultFileURL:
		m.ResetResultFileURL()
		return nil
	case processingfile.FieldStatus:
		m.ResetStatus()
		return nil
	case processingfile.FieldTotalMapping:
		m.ResetTotalMapping()
		return nil
	case processingfile.FieldStatsTotalRow:
		m.ResetStatsTotalRow()
		return nil
	case processingfile.FieldStatsTotalSuccess:
		m.ResetStatsTotalSuccess()
		return nil
	case processingfile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case processingfile.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case processingfile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProcessingFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessingFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessingFileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessingFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessingFileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessingFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessingFileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessingFileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessingFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessingFileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessingFile edge %s", name)
}

// ProcessingFileRowMutation represents an operation that mutates the ProcessingFileRow nodes in the graph.
type ProcessingFileRowMutation struct {
	config
	op                Op
	typ               string
	id                *int
	file_id           *int64
	addfile_id        *int64
	row_index         *int32
	addrow_index      *int32
	row_data_raw      *string
	task_index        *int32
	addtask_index     *int32
	task_mapping      *string
	task_depends_on   *string
	task_request_raw  *string
	task_response_raw *string
	status            *int16
	addstatus         *int16
	error_display     *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*ProcessingFileRow, error)
	predicates        []predicate.ProcessingFileRow
}

var _ ent.Mutation = (*ProcessingFileRowMutation)(nil)

// processingfilerowOption allows management of the mutation configuration using functional options.
type processingfilerowOption func(*ProcessingFileRowMutation)

// newProcessingFileRowMutation creates new mutation for the ProcessingFileRow entity.
func newProcessingFileRowMutation(c config, op Op, opts ...processingfilerowOption) *ProcessingFileRowMutation {
	m := &ProcessingFileRowMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessingFileRow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessingFileRowID sets the ID field of the mutation.
func withProcessingFileRowID(id int) processingfilerowOption {
	return func(m *ProcessingFileRowMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessingFileRow
		)
		m.oldValue = func(ctx context.Context) (*ProcessingFileRow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessingFileRow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessingFileRow sets the old ProcessingFileRow of the mutation.
func withProcessingFileRow(node *ProcessingFileRow) processingfilerowOption {
	return func(m *ProcessingFileRowMutation) {
		m.oldValue = func(context.Context) (*ProcessingFileRow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessingFileRowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessingFileRowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessingFileRowMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessingFileRowMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessingFileRow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileID sets the "file_id" field.
func (m *ProcessingFileRowMutation) SetFileID(i int64) {
	m.file_id = &i
	m.addfile_id = nil
}

// FileID returns the value of the "file_id" field in the mutation.
func (m *ProcessingFileRowMutation) FileID() (r int64, exists bool) {
	v := m.file_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFileID returns the old "file_id" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldFileID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileID: %w", err)
	}
	return oldValue.FileID, nil
}

// AddFileID adds i to the "file_id" field.
func (m *ProcessingFileRowMutation) AddFileID(i int64) {
	if m.addfile_id != nil {
		*m.addfile_id += i
	} else {
		m.addfile_id = &i
	}
}

// AddedFileID returns the value that was added to the "file_id" field in this mutation.
func (m *ProcessingFileRowMutation) AddedFileID() (r int64, exists bool) {
	v := m.addfile_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileID resets all changes to the "file_id" field.
func (m *ProcessingFileRowMutation) ResetFileID() {
	m.file_id = nil
	m.addfile_id = nil
}

// SetRowIndex sets the "row_index" field.
func (m *ProcessingFileRowMutation) SetRowIndex(i int32) {
	m.row_index = &i
	m.addrow_index = nil
}

// RowIndex returns the value of the "row_index" field in the mutation.
func (m *ProcessingFileRowMutation) RowIndex() (r int32, exists bool) {
	v := m.row_index
	if v == nil {
		return
	}
	return *v, true
}

// OldRowIndex returns the old "row_index" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldRowIndex(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowIndex: %w", err)
	}
	return oldValue.RowIndex, nil
}

// AddRowIndex adds i to the "row_index" field.
func (m *ProcessingFileRowMutation) AddRowIndex(i int32) {
	if m.addrow_index != nil {
		*m.addrow_index += i
	} else {
		m.addrow_index = &i
	}
}

// AddedRowIndex returns the value that was added to the "row_index" field in this mutation.
func (m *ProcessingFileRowMutation) AddedRowIndex() (r int32, exists bool) {
	v := m.addrow_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetRowIndex resets all changes to the "row_index" field.
func (m *ProcessingFileRowMutation) ResetRowIndex() {
	m.row_index = nil
	m.addrow_index = nil
}

// SetRowDataRaw sets the "row_data_raw" field.
func (m *ProcessingFileRowMutation) SetRowDataRaw(s string) {
	m.row_data_raw = &s
}

// RowDataRaw returns the value of the "row_data_raw" field in the mutation.
func (m *ProcessingFileRowMutation) RowDataRaw() (r string, exists bool) {
	v := m.row_data_raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRowDataRaw returns the old "row_data_raw" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldRowDataRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowDataRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowDataRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowDataRaw: %w", err)
	}
	return oldValue.RowDataRaw, nil
}

// ResetRowDataRaw resets all changes to the "row_data_raw" field.
func (m *ProcessingFileRowMutation) ResetRowDataRaw() {
	m.row_data_raw = nil
}

// SetTaskIndex sets the "task_index" field.
func (m *ProcessingFileRowMutation) SetTaskIndex(i int32) {
	m.task_index = &i
	m.addtask_index = nil
}

// TaskIndex returns the value of the "task_index" field in the mutation.
func (m *ProcessingFileRowMutation) TaskIndex() (r int32, exists bool) {
	v := m.task_index
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskIndex returns the old "task_index" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldTaskIndex(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskIndex: %w", err)
	}
	return oldValue.TaskIndex, nil
}

// AddTaskIndex adds i to the "task_index" field.
func (m *ProcessingFileRowMutation) AddTaskIndex(i int32) {
	if m.addtask_index != nil {
		*m.addtask_index += i
	} else {
		m.addtask_index = &i
	}
}

// AddedTaskIndex returns the value that was added to the "task_index" field in this mutation.
func (m *ProcessingFileRowMutation) AddedTaskIndex() (r int32, exists bool) {
	v := m.addtask_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskIndex resets all changes to the "task_index" field.
func (m *ProcessingFileRowMutation) ResetTaskIndex() {
	m.task_index = nil
	m.addtask_index = nil
}

// SetTaskMapping sets the "task_mapping" field.
func (m *ProcessingFileRowMutation) SetTaskMapping(s string) {
	m.task_mapping = &s
}

// TaskMapping returns the value of the "task_mapping" field in the mutation.
func (m *ProcessingFileRowMutation) TaskMapping() (r string, exists bool) {
	v := m.task_mapping
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskMapping returns the old "task_mapping" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldTaskMapping(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskMapping is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskMapping requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskMapping: %w", err)
	}
	return oldValue.TaskMapping, nil
}

// ResetTaskMapping resets all changes to the "task_mapping" field.
func (m *ProcessingFileRowMutation) ResetTaskMapping() {
	m.task_mapping = nil
}

// SetTaskDependsOn sets the "task_depends_on" field.
func (m *ProcessingFileRowMutation) SetTaskDependsOn(s string) {
	m.task_depends_on = &s
}

// TaskDependsOn returns the value of the "task_depends_on" field in the mutation.
func (m *ProcessingFileRowMutation) TaskDependsOn() (r string, exists bool) {
	v := m.task_depends_on
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskDependsOn returns the old "task_depends_on" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldTaskDependsOn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskDependsOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskDependsOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskDependsOn: %w", err)
	}
	return oldValue.TaskDependsOn, nil
}

// ResetTaskDependsOn resets all changes to the "task_depends_on" field.
func (m *ProcessingFileRowMutation) ResetTaskDependsOn() {
	m.task_depends_on = nil
}

// SetTaskRequestRaw sets the "task_request_raw" field.
func (m *ProcessingFileRowMutation) SetTaskRequestRaw(s string) {
	m.task_request_raw = &s
}

// TaskRequestRaw returns the value of the "task_request_raw" field in the mutation.
func (m *ProcessingFileRowMutation) TaskRequestRaw() (r string, exists bool) {
	v := m.task_request_raw
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskRequestRaw returns the old "task_request_raw" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldTaskRequestRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskRequestRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskRequestRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskRequestRaw: %w", err)
	}
	return oldValue.TaskRequestRaw, nil
}

// ResetTaskRequestRaw resets all changes to the "task_request_raw" field.
func (m *ProcessingFileRowMutation) ResetTaskRequestRaw() {
	m.task_request_raw = nil
}

// SetTaskResponseRaw sets the "task_response_raw" field.
func (m *ProcessingFileRowMutation) SetTaskResponseRaw(s string) {
	m.task_response_raw = &s
}

// TaskResponseRaw returns the value of the "task_response_raw" field in the mutation.
func (m *ProcessingFileRowMutation) TaskResponseRaw() (r string, exists bool) {
	v := m.task_response_raw
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskResponseRaw returns the old "task_response_raw" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldTaskResponseRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskResponseRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskResponseRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskResponseRaw: %w", err)
	}
	return oldValue.TaskResponseRaw, nil
}

// ResetTaskResponseRaw resets all changes to the "task_response_raw" field.
func (m *ProcessingFileRowMutation) ResetTaskResponseRaw() {
	m.task_response_raw = nil
}

// SetStatus sets the "status" field.
func (m *ProcessingFileRowMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ProcessingFileRowMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ProcessingFileRowMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ProcessingFileRowMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ProcessingFileRowMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetErrorDisplay sets the "error_display" field.
func (m *ProcessingFileRowMutation) SetErrorDisplay(s string) {
	m.error_display = &s
}

// ErrorDisplay returns the value of the "error_display" field in the mutation.
func (m *ProcessingFileRowMutation) ErrorDisplay() (r string, exists bool) {
	v := m.error_display
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorDisplay returns the old "error_display" field's value of the ProcessingFileRow entity.
// If the ProcessingFileRow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessingFileRowMutation) OldErrorDisplay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorDisplay: %w", err)
	}
	return oldValue.ErrorDisplay, nil
}

// ResetErrorDisplay resets all changes to the "error_display" field.
func (m *ProcessingFileRowMutation) ResetErrorDisplay() {
	m.error_display = nil
}

// Where appends a list predicates to the ProcessingFileRowMutation builder.
func (m *ProcessingFileRowMutation) Where(ps ...predicate.ProcessingFileRow) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProcessingFileRowMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProcessingFileRow).
func (m *ProcessingFileRowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessingFileRowMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.file_id != nil {
		fields = append(fields, processingfilerow.FieldFileID)
	}
	if m.row_index != nil {
		fields = append(fields, processingfilerow.FieldRowIndex)
	}
	if m.row_data_raw != nil {
		fields = append(fields, processingfilerow.FieldRowDataRaw)
	}
	if m.task_index != nil {
		fields = append(fields, processingfilerow.FieldTaskIndex)
	}
	if m.task_mapping != nil {
		fields = append(fields, processingfilerow.FieldTaskMapping)
	}
	if m.task_depends_on != nil {
		fields = append(fields, processingfilerow.FieldTaskDependsOn)
	}
	if m.task_request_raw != nil {
		fields = append(fields, processingfilerow.FieldTaskRequestRaw)
	}
	if m.task_response_raw != nil {
		fields = append(fields, processingfilerow.FieldTaskResponseRaw)
	}
	if m.status != nil {
		fields = append(fields, processingfilerow.FieldStatus)
	}
	if m.error_display != nil {
		fields = append(fields, processingfilerow.FieldErrorDisplay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessingFileRowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processingfilerow.FieldFileID:
		return m.FileID()
	case processingfilerow.FieldRowIndex:
		return m.RowIndex()
	case processingfilerow.FieldRowDataRaw:
		return m.RowDataRaw()
	case processingfilerow.FieldTaskIndex:
		return m.TaskIndex()
	case processingfilerow.FieldTaskMapping:
		return m.TaskMapping()
	case processingfilerow.FieldTaskDependsOn:
		return m.TaskDependsOn()
	case processingfilerow.FieldTaskRequestRaw:
		return m.TaskRequestRaw()
	case processingfilerow.FieldTaskResponseRaw:
		return m.TaskResponseRaw()
	case processingfilerow.FieldStatus:
		return m.Status()
	case processingfilerow.FieldErrorDisplay:
		return m.ErrorDisplay()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessingFileRowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processingfilerow.FieldFileID:
		return m.OldFileID(ctx)
	case processingfilerow.FieldRowIndex:
		return m.OldRowIndex(ctx)
	case processingfilerow.FieldRowDataRaw:
		return m.OldRowDataRaw(ctx)
	case processingfilerow.FieldTaskIndex:
		return m.OldTaskIndex(ctx)
	case processingfilerow.FieldTaskMapping:
		return m.OldTaskMapping(ctx)
	case processingfilerow.FieldTaskDependsOn:
		return m.OldTaskDependsOn(ctx)
	case processingfilerow.FieldTaskRequestRaw:
		return m.OldTaskRequestRaw(ctx)
	case processingfilerow.FieldTaskResponseRaw:
		return m.OldTaskResponseRaw(ctx)
	case processingfilerow.FieldStatus:
		return m.OldStatus(ctx)
	case processingfilerow.FieldErrorDisplay:
		return m.OldErrorDisplay(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessingFileRow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessingFileRowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processingfilerow.FieldFileID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileID(v)
		return nil
	case processingfilerow.FieldRowIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowIndex(v)
		return nil
	case processingfilerow.FieldRowDataRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowDataRaw(v)
		return nil
	case processingfilerow.FieldTaskIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskIndex(v)
		return nil
	case processingfilerow.FieldTaskMapping:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskMapping(v)
		return nil
	case processingfilerow.FieldTaskDependsOn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskDependsOn(v)
		return nil
	case processingfilerow.FieldTaskRequestRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskRequestRaw(v)
		return nil
	case processingfilerow.FieldTaskResponseRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskResponseRaw(v)
		return nil
	case processingfilerow.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case processingfilerow.FieldErrorDisplay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorDisplay(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessingFileRow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessingFileRowMutation) AddedFields() []string {
	var fields []string
	if m.addfile_id != nil {
		fields = append(fields, processingfilerow.FieldFileID)
	}
	if m.addrow_index != nil {
		fields = append(fields, processingfilerow.FieldRowIndex)
	}
	if m.addtask_index != nil {
		fields = append(fields, processingfilerow.FieldTaskIndex)
	}
	if m.addstatus != nil {
		fields = append(fields, processingfilerow.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessingFileRowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processingfilerow.FieldFileID:
		return m.AddedFileID()
	case processingfilerow.FieldRowIndex:
		return m.AddedRowIndex()
	case processingfilerow.FieldTaskIndex:
		return m.AddedTaskIndex()
	case processingfilerow.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessingFileRowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processingfilerow.FieldFileID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileID(v)
		return nil
	case processingfilerow.FieldRowIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRowIndex(v)
		return nil
	case processingfilerow.FieldTaskIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskIndex(v)
		return nil
	case processingfilerow.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessingFileRow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessingFileRowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessingFileRowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessingFileRowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProcessingFileRow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessingFileRowMutation) ResetField(name string) error {
	switch name {
	case processingfilerow.FieldFileID:
		m.ResetFileID()
		return nil
	case processingfilerow.FieldRowIndex:
		m.ResetRowIndex()
		return nil
	case processingfilerow.FieldRowDataRaw:
		m.ResetRowDataRaw()
		return nil
	case processingfilerow.FieldTaskIndex:
		m.ResetTaskIndex()
		return nil
	case processingfilerow.FieldTaskMapping:
		m.ResetTaskMapping()
		return nil
	case processingfilerow.FieldTaskDependsOn:
		m.ResetTaskDependsOn()
		return nil
	case processingfilerow.FieldTaskRequestRaw:
		m.ResetTaskRequestRaw()
		return nil
	case processingfilerow.FieldTaskResponseRaw:
		m.ResetTaskResponseRaw()
		return nil
	case processingfilerow.FieldStatus:
		m.ResetStatus()
		return nil
	case processingfilerow.FieldErrorDisplay:
		m.ResetErrorDisplay()
		return nil
	}
	return fmt.Errorf("unknown ProcessingFileRow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessingFileRowMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessingFileRowMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessingFileRowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessingFileRowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessingFileRowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessingFileRowMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessingFileRowMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessingFileRow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessingFileRowMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessingFileRow edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	active        *bool
	email         *string
	phone_number  *string
	password_hash *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldActive:
		return m.Active()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
