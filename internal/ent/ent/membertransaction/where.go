// Code generated by ent, DO NOT EDIT.

package membertransaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FileAwardPointID applies equality check predicate on the "file_award_point_id" field. It's identical to FileAwardPointIDEQ.
func FileAwardPointID(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileAwardPointID), v))
	})
}

// Point applies equality check predicate on the "point" field. It's identical to PointEQ.
func Point(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// OrderCode applies equality check predicate on the "order_code" field. It's identical to OrderCodeEQ.
func OrderCode(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCode), v))
	})
}

// RefID applies equality check predicate on the "ref_id" field. It's identical to RefIDEQ.
func RefID(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// SentTime applies equality check predicate on the "sent_time" field. It's identical to SentTimeEQ.
func SentTime(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentTime), v))
	})
}

// LoyaltyTxnID applies equality check predicate on the "loyalty_txn_id" field. It's identical to LoyaltyTxnIDEQ.
func LoyaltyTxnID(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoyaltyTxnID), v))
	})
}

// TxnDesc applies equality check predicate on the "txn_desc" field. It's identical to TxnDescEQ.
func TxnDesc(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxnDesc), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldError), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FileAwardPointIDEQ applies the EQ predicate on the "file_award_point_id" field.
func FileAwardPointIDEQ(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileAwardPointID), v))
	})
}

// FileAwardPointIDNEQ applies the NEQ predicate on the "file_award_point_id" field.
func FileAwardPointIDNEQ(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileAwardPointID), v))
	})
}

// FileAwardPointIDIn applies the In predicate on the "file_award_point_id" field.
func FileAwardPointIDIn(vs ...int32) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFileAwardPointID), v...))
	})
}

// FileAwardPointIDNotIn applies the NotIn predicate on the "file_award_point_id" field.
func FileAwardPointIDNotIn(vs ...int32) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFileAwardPointID), v...))
	})
}

// FileAwardPointIDGT applies the GT predicate on the "file_award_point_id" field.
func FileAwardPointIDGT(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileAwardPointID), v))
	})
}

// FileAwardPointIDGTE applies the GTE predicate on the "file_award_point_id" field.
func FileAwardPointIDGTE(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileAwardPointID), v))
	})
}

// FileAwardPointIDLT applies the LT predicate on the "file_award_point_id" field.
func FileAwardPointIDLT(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileAwardPointID), v))
	})
}

// FileAwardPointIDLTE applies the LTE predicate on the "file_award_point_id" field.
func FileAwardPointIDLTE(v int32) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileAwardPointID), v))
	})
}

// PointEQ applies the EQ predicate on the "point" field.
func PointEQ(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoint), v))
	})
}

// PointNEQ applies the NEQ predicate on the "point" field.
func PointNEQ(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoint), v))
	})
}

// PointIn applies the In predicate on the "point" field.
func PointIn(vs ...int64) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPoint), v...))
	})
}

// PointNotIn applies the NotIn predicate on the "point" field.
func PointNotIn(vs ...int64) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPoint), v...))
	})
}

// PointGT applies the GT predicate on the "point" field.
func PointGT(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoint), v))
	})
}

// PointGTE applies the GTE predicate on the "point" field.
func PointGTE(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoint), v))
	})
}

// PointLT applies the LT predicate on the "point" field.
func PointLT(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoint), v))
	})
}

// PointLTE applies the LTE predicate on the "point" field.
func PointLTE(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoint), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// OrderCodeEQ applies the EQ predicate on the "order_code" field.
func OrderCodeEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCode), v))
	})
}

// OrderCodeNEQ applies the NEQ predicate on the "order_code" field.
func OrderCodeNEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderCode), v))
	})
}

// OrderCodeIn applies the In predicate on the "order_code" field.
func OrderCodeIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderCode), v...))
	})
}

// OrderCodeNotIn applies the NotIn predicate on the "order_code" field.
func OrderCodeNotIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderCode), v...))
	})
}

// OrderCodeGT applies the GT predicate on the "order_code" field.
func OrderCodeGT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderCode), v))
	})
}

// OrderCodeGTE applies the GTE predicate on the "order_code" field.
func OrderCodeGTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderCode), v))
	})
}

// OrderCodeLT applies the LT predicate on the "order_code" field.
func OrderCodeLT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderCode), v))
	})
}

// OrderCodeLTE applies the LTE predicate on the "order_code" field.
func OrderCodeLTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderCode), v))
	})
}

// OrderCodeContains applies the Contains predicate on the "order_code" field.
func OrderCodeContains(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderCode), v))
	})
}

// OrderCodeHasPrefix applies the HasPrefix predicate on the "order_code" field.
func OrderCodeHasPrefix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderCode), v))
	})
}

// OrderCodeHasSuffix applies the HasSuffix predicate on the "order_code" field.
func OrderCodeHasSuffix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderCode), v))
	})
}

// OrderCodeEqualFold applies the EqualFold predicate on the "order_code" field.
func OrderCodeEqualFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderCode), v))
	})
}

// OrderCodeContainsFold applies the ContainsFold predicate on the "order_code" field.
func OrderCodeContainsFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderCode), v))
	})
}

// RefIDEQ applies the EQ predicate on the "ref_id" field.
func RefIDEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// RefIDNEQ applies the NEQ predicate on the "ref_id" field.
func RefIDNEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefID), v))
	})
}

// RefIDIn applies the In predicate on the "ref_id" field.
func RefIDIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRefID), v...))
	})
}

// RefIDNotIn applies the NotIn predicate on the "ref_id" field.
func RefIDNotIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRefID), v...))
	})
}

// RefIDGT applies the GT predicate on the "ref_id" field.
func RefIDGT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefID), v))
	})
}

// RefIDGTE applies the GTE predicate on the "ref_id" field.
func RefIDGTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefID), v))
	})
}

// RefIDLT applies the LT predicate on the "ref_id" field.
func RefIDLT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefID), v))
	})
}

// RefIDLTE applies the LTE predicate on the "ref_id" field.
func RefIDLTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefID), v))
	})
}

// RefIDContains applies the Contains predicate on the "ref_id" field.
func RefIDContains(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefID), v))
	})
}

// RefIDHasPrefix applies the HasPrefix predicate on the "ref_id" field.
func RefIDHasPrefix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefID), v))
	})
}

// RefIDHasSuffix applies the HasSuffix predicate on the "ref_id" field.
func RefIDHasSuffix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefID), v))
	})
}

// RefIDEqualFold applies the EqualFold predicate on the "ref_id" field.
func RefIDEqualFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefID), v))
	})
}

// RefIDContainsFold applies the ContainsFold predicate on the "ref_id" field.
func RefIDContainsFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefID), v))
	})
}

// SentTimeEQ applies the EQ predicate on the "sent_time" field.
func SentTimeEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSentTime), v))
	})
}

// SentTimeNEQ applies the NEQ predicate on the "sent_time" field.
func SentTimeNEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSentTime), v))
	})
}

// SentTimeIn applies the In predicate on the "sent_time" field.
func SentTimeIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSentTime), v...))
	})
}

// SentTimeNotIn applies the NotIn predicate on the "sent_time" field.
func SentTimeNotIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSentTime), v...))
	})
}

// SentTimeGT applies the GT predicate on the "sent_time" field.
func SentTimeGT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSentTime), v))
	})
}

// SentTimeGTE applies the GTE predicate on the "sent_time" field.
func SentTimeGTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSentTime), v))
	})
}

// SentTimeLT applies the LT predicate on the "sent_time" field.
func SentTimeLT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSentTime), v))
	})
}

// SentTimeLTE applies the LTE predicate on the "sent_time" field.
func SentTimeLTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSentTime), v))
	})
}

// LoyaltyTxnIDEQ applies the EQ predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDEQ(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoyaltyTxnID), v))
	})
}

// LoyaltyTxnIDNEQ applies the NEQ predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDNEQ(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoyaltyTxnID), v))
	})
}

// LoyaltyTxnIDIn applies the In predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDIn(vs ...int64) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoyaltyTxnID), v...))
	})
}

// LoyaltyTxnIDNotIn applies the NotIn predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDNotIn(vs ...int64) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoyaltyTxnID), v...))
	})
}

// LoyaltyTxnIDGT applies the GT predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDGT(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoyaltyTxnID), v))
	})
}

// LoyaltyTxnIDGTE applies the GTE predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDGTE(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoyaltyTxnID), v))
	})
}

// LoyaltyTxnIDLT applies the LT predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDLT(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoyaltyTxnID), v))
	})
}

// LoyaltyTxnIDLTE applies the LTE predicate on the "loyalty_txn_id" field.
func LoyaltyTxnIDLTE(v int64) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoyaltyTxnID), v))
	})
}

// TxnDescEQ applies the EQ predicate on the "txn_desc" field.
func TxnDescEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxnDesc), v))
	})
}

// TxnDescNEQ applies the NEQ predicate on the "txn_desc" field.
func TxnDescNEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxnDesc), v))
	})
}

// TxnDescIn applies the In predicate on the "txn_desc" field.
func TxnDescIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxnDesc), v...))
	})
}

// TxnDescNotIn applies the NotIn predicate on the "txn_desc" field.
func TxnDescNotIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxnDesc), v...))
	})
}

// TxnDescGT applies the GT predicate on the "txn_desc" field.
func TxnDescGT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxnDesc), v))
	})
}

// TxnDescGTE applies the GTE predicate on the "txn_desc" field.
func TxnDescGTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxnDesc), v))
	})
}

// TxnDescLT applies the LT predicate on the "txn_desc" field.
func TxnDescLT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxnDesc), v))
	})
}

// TxnDescLTE applies the LTE predicate on the "txn_desc" field.
func TxnDescLTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxnDesc), v))
	})
}

// TxnDescContains applies the Contains predicate on the "txn_desc" field.
func TxnDescContains(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxnDesc), v))
	})
}

// TxnDescHasPrefix applies the HasPrefix predicate on the "txn_desc" field.
func TxnDescHasPrefix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxnDesc), v))
	})
}

// TxnDescHasSuffix applies the HasSuffix predicate on the "txn_desc" field.
func TxnDescHasSuffix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxnDesc), v))
	})
}

// TxnDescEqualFold applies the EqualFold predicate on the "txn_desc" field.
func TxnDescEqualFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxnDesc), v))
	})
}

// TxnDescContainsFold applies the ContainsFold predicate on the "txn_desc" field.
func TxnDescContainsFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxnDesc), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int16) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int16) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int16) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldError), v))
	})
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldError), v))
	})
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldError), v...))
	})
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldError), v...))
	})
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldError), v))
	})
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldError), v))
	})
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldError), v))
	})
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldError), v))
	})
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldError), v))
	})
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldError), v))
	})
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldError), v))
	})
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldError), v))
	})
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldError), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MemberTransaction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberTransaction) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberTransaction) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberTransaction) predicate.MemberTransaction {
	return predicate.MemberTransaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
