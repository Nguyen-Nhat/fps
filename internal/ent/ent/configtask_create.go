// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/configtask"
)

// ConfigTaskCreate is the builder for creating a ConfigTask entity.
type ConfigTaskCreate struct {
	config
	mutation *ConfigTaskMutation
	hooks    []Hook
}

// SetConfigMappingID sets the "config_mapping_id" field.
func (ctc *ConfigTaskCreate) SetConfigMappingID(i int32) *ConfigTaskCreate {
	ctc.mutation.SetConfigMappingID(i)
	return ctc
}

// SetTaskIndex sets the "task_index" field.
func (ctc *ConfigTaskCreate) SetTaskIndex(i int32) *ConfigTaskCreate {
	ctc.mutation.SetTaskIndex(i)
	return ctc
}

// SetEndPoint sets the "end_point" field.
func (ctc *ConfigTaskCreate) SetEndPoint(s string) *ConfigTaskCreate {
	ctc.mutation.SetEndPoint(s)
	return ctc
}

// SetMethod sets the "method" field.
func (ctc *ConfigTaskCreate) SetMethod(s string) *ConfigTaskCreate {
	ctc.mutation.SetMethod(s)
	return ctc
}

// SetHeader sets the "header" field.
func (ctc *ConfigTaskCreate) SetHeader(s string) *ConfigTaskCreate {
	ctc.mutation.SetHeader(s)
	return ctc
}

// SetRequestParams sets the "request_params" field.
func (ctc *ConfigTaskCreate) SetRequestParams(s string) *ConfigTaskCreate {
	ctc.mutation.SetRequestParams(s)
	return ctc
}

// SetRequestBody sets the "request_body" field.
func (ctc *ConfigTaskCreate) SetRequestBody(s string) *ConfigTaskCreate {
	ctc.mutation.SetRequestBody(s)
	return ctc
}

// SetResponseSuccessHTTPStatus sets the "response_success_http_status" field.
func (ctc *ConfigTaskCreate) SetResponseSuccessHTTPStatus(i int32) *ConfigTaskCreate {
	ctc.mutation.SetResponseSuccessHTTPStatus(i)
	return ctc
}

// SetResponseSuccessCodeSchema sets the "response_success_code_schema" field.
func (ctc *ConfigTaskCreate) SetResponseSuccessCodeSchema(s string) *ConfigTaskCreate {
	ctc.mutation.SetResponseSuccessCodeSchema(s)
	return ctc
}

// SetResponseMessageSchema sets the "response_message_schema" field.
func (ctc *ConfigTaskCreate) SetResponseMessageSchema(i int32) *ConfigTaskCreate {
	ctc.mutation.SetResponseMessageSchema(i)
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *ConfigTaskCreate) SetCreatedAt(t time.Time) *ConfigTaskCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *ConfigTaskCreate) SetNillableCreatedAt(t *time.Time) *ConfigTaskCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetCreatedBy sets the "created_by" field.
func (ctc *ConfigTaskCreate) SetCreatedBy(s string) *ConfigTaskCreate {
	ctc.mutation.SetCreatedBy(s)
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *ConfigTaskCreate) SetUpdatedAt(t time.Time) *ConfigTaskCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *ConfigTaskCreate) SetNillableUpdatedAt(t *time.Time) *ConfigTaskCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// Mutation returns the ConfigTaskMutation object of the builder.
func (ctc *ConfigTaskCreate) Mutation() *ConfigTaskMutation {
	return ctc.mutation
}

// Save creates the ConfigTask in the database.
func (ctc *ConfigTaskCreate) Save(ctx context.Context) (*ConfigTask, error) {
	var (
		err  error
		node *ConfigTask
	)
	ctc.defaults()
	if len(ctc.hooks) == 0 {
		if err = ctc.check(); err != nil {
			return nil, err
		}
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConfigTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctc.check(); err != nil {
				return nil, err
			}
			ctc.mutation = mutation
			if node, err = ctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			if ctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConfigTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConfigTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *ConfigTaskCreate) SaveX(ctx context.Context) *ConfigTask {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *ConfigTaskCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *ConfigTaskCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *ConfigTaskCreate) defaults() {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := configtask.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := configtask.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *ConfigTaskCreate) check() error {
	if _, ok := ctc.mutation.ConfigMappingID(); !ok {
		return &ValidationError{Name: "config_mapping_id", err: errors.New(`ent: missing required field "ConfigTask.config_mapping_id"`)}
	}
	if v, ok := ctc.mutation.ConfigMappingID(); ok {
		if err := configtask.ConfigMappingIDValidator(v); err != nil {
			return &ValidationError{Name: "config_mapping_id", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.config_mapping_id": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.TaskIndex(); !ok {
		return &ValidationError{Name: "task_index", err: errors.New(`ent: missing required field "ConfigTask.task_index"`)}
	}
	if _, ok := ctc.mutation.EndPoint(); !ok {
		return &ValidationError{Name: "end_point", err: errors.New(`ent: missing required field "ConfigTask.end_point"`)}
	}
	if v, ok := ctc.mutation.EndPoint(); ok {
		if err := configtask.EndPointValidator(v); err != nil {
			return &ValidationError{Name: "end_point", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.end_point": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "ConfigTask.method"`)}
	}
	if v, ok := ctc.mutation.Method(); ok {
		if err := configtask.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.method": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Header(); !ok {
		return &ValidationError{Name: "header", err: errors.New(`ent: missing required field "ConfigTask.header"`)}
	}
	if _, ok := ctc.mutation.RequestParams(); !ok {
		return &ValidationError{Name: "request_params", err: errors.New(`ent: missing required field "ConfigTask.request_params"`)}
	}
	if v, ok := ctc.mutation.RequestParams(); ok {
		if err := configtask.RequestParamsValidator(v); err != nil {
			return &ValidationError{Name: "request_params", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_params": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.RequestBody(); !ok {
		return &ValidationError{Name: "request_body", err: errors.New(`ent: missing required field "ConfigTask.request_body"`)}
	}
	if v, ok := ctc.mutation.RequestBody(); ok {
		if err := configtask.RequestBodyValidator(v); err != nil {
			return &ValidationError{Name: "request_body", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.request_body": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.ResponseSuccessHTTPStatus(); !ok {
		return &ValidationError{Name: "response_success_http_status", err: errors.New(`ent: missing required field "ConfigTask.response_success_http_status"`)}
	}
	if _, ok := ctc.mutation.ResponseSuccessCodeSchema(); !ok {
		return &ValidationError{Name: "response_success_code_schema", err: errors.New(`ent: missing required field "ConfigTask.response_success_code_schema"`)}
	}
	if _, ok := ctc.mutation.ResponseMessageSchema(); !ok {
		return &ValidationError{Name: "response_message_schema", err: errors.New(`ent: missing required field "ConfigTask.response_message_schema"`)}
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConfigTask.created_at"`)}
	}
	if _, ok := ctc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ConfigTask.created_by"`)}
	}
	if v, ok := ctc.mutation.CreatedBy(); ok {
		if err := configtask.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ConfigTask.created_by": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ConfigTask.updated_at"`)}
	}
	return nil
}

func (ctc *ConfigTaskCreate) sqlSave(ctx context.Context) (*ConfigTask, error) {
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ctc *ConfigTaskCreate) createSpec() (*ConfigTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigTask{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: configtask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configtask.FieldID,
			},
		}
	)
	if value, ok := ctc.mutation.ConfigMappingID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldConfigMappingID,
		})
		_node.ConfigMappingID = value
	}
	if value, ok := ctc.mutation.TaskIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldTaskIndex,
		})
		_node.TaskIndex = value
	}
	if value, ok := ctc.mutation.EndPoint(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldEndPoint,
		})
		_node.EndPoint = value
	}
	if value, ok := ctc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := ctc.mutation.Header(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldHeader,
		})
		_node.Header = value
	}
	if value, ok := ctc.mutation.RequestParams(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestParams,
		})
		_node.RequestParams = value
	}
	if value, ok := ctc.mutation.RequestBody(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldRequestBody,
		})
		_node.RequestBody = value
	}
	if value, ok := ctc.mutation.ResponseSuccessHTTPStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseSuccessHTTPStatus,
		})
		_node.ResponseSuccessHTTPStatus = value
	}
	if value, ok := ctc.mutation.ResponseSuccessCodeSchema(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldResponseSuccessCodeSchema,
		})
		_node.ResponseSuccessCodeSchema = value
	}
	if value, ok := ctc.mutation.ResponseMessageSchema(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: configtask.FieldResponseMessageSchema,
		})
		_node.ResponseMessageSchema = value
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: configtask.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: configtask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ConfigTaskCreateBulk is the builder for creating many ConfigTask entities in bulk.
type ConfigTaskCreateBulk struct {
	config
	builders []*ConfigTaskCreate
}

// Save creates the ConfigTask entities in the database.
func (ctcb *ConfigTaskCreateBulk) Save(ctx context.Context) ([]*ConfigTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*ConfigTask, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *ConfigTaskCreateBulk) SaveX(ctx context.Context) []*ConfigTask {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *ConfigTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *ConfigTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
