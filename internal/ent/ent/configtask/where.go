// Code generated by ent, DO NOT EDIT.

package configtask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"git.teko.vn/loyalty-system/loyalty-file-processing/internal/ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ConfigMappingID applies equality check predicate on the "config_mapping_id" field. It's identical to ConfigMappingIDEQ.
func ConfigMappingID(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigMappingID), v))
	})
}

// TaskIndex applies equality check predicate on the "task_index" field. It's identical to TaskIndexEQ.
func TaskIndex(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// EndPoint applies equality check predicate on the "end_point" field. It's identical to EndPointEQ.
func EndPoint(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndPoint), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// Header applies equality check predicate on the "header" field. It's identical to HeaderEQ.
func Header(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeader), v))
	})
}

// RequestParams applies equality check predicate on the "request_params" field. It's identical to RequestParamsEQ.
func RequestParams(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestParams), v))
	})
}

// RequestBody applies equality check predicate on the "request_body" field. It's identical to RequestBodyEQ.
func RequestBody(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestBody), v))
	})
}

// ResponseSuccessHTTPStatus applies equality check predicate on the "response_success_http_status" field. It's identical to ResponseSuccessHTTPStatusEQ.
func ResponseSuccessHTTPStatus(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessCodeSchema applies equality check predicate on the "response_success_code_schema" field. It's identical to ResponseSuccessCodeSchemaEQ.
func ResponseSuccessCodeSchema(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseMessageSchema applies equality check predicate on the "response_message_schema" field. It's identical to ResponseMessageSchemaEQ.
func ResponseMessageSchema(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseMessageSchema), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ConfigMappingIDEQ applies the EQ predicate on the "config_mapping_id" field.
func ConfigMappingIDEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigMappingID), v))
	})
}

// ConfigMappingIDNEQ applies the NEQ predicate on the "config_mapping_id" field.
func ConfigMappingIDNEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigMappingID), v))
	})
}

// ConfigMappingIDIn applies the In predicate on the "config_mapping_id" field.
func ConfigMappingIDIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldConfigMappingID), v...))
	})
}

// ConfigMappingIDNotIn applies the NotIn predicate on the "config_mapping_id" field.
func ConfigMappingIDNotIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldConfigMappingID), v...))
	})
}

// ConfigMappingIDGT applies the GT predicate on the "config_mapping_id" field.
func ConfigMappingIDGT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigMappingID), v))
	})
}

// ConfigMappingIDGTE applies the GTE predicate on the "config_mapping_id" field.
func ConfigMappingIDGTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigMappingID), v))
	})
}

// ConfigMappingIDLT applies the LT predicate on the "config_mapping_id" field.
func ConfigMappingIDLT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigMappingID), v))
	})
}

// ConfigMappingIDLTE applies the LTE predicate on the "config_mapping_id" field.
func ConfigMappingIDLTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigMappingID), v))
	})
}

// TaskIndexEQ applies the EQ predicate on the "task_index" field.
func TaskIndexEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexNEQ applies the NEQ predicate on the "task_index" field.
func TaskIndexNEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexIn applies the In predicate on the "task_index" field.
func TaskIndexIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexNotIn applies the NotIn predicate on the "task_index" field.
func TaskIndexNotIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskIndex), v...))
	})
}

// TaskIndexGT applies the GT predicate on the "task_index" field.
func TaskIndexGT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexGTE applies the GTE predicate on the "task_index" field.
func TaskIndexGTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLT applies the LT predicate on the "task_index" field.
func TaskIndexLT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskIndex), v))
	})
}

// TaskIndexLTE applies the LTE predicate on the "task_index" field.
func TaskIndexLTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskIndex), v))
	})
}

// EndPointEQ applies the EQ predicate on the "end_point" field.
func EndPointEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndPoint), v))
	})
}

// EndPointNEQ applies the NEQ predicate on the "end_point" field.
func EndPointNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndPoint), v))
	})
}

// EndPointIn applies the In predicate on the "end_point" field.
func EndPointIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndPoint), v...))
	})
}

// EndPointNotIn applies the NotIn predicate on the "end_point" field.
func EndPointNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndPoint), v...))
	})
}

// EndPointGT applies the GT predicate on the "end_point" field.
func EndPointGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndPoint), v))
	})
}

// EndPointGTE applies the GTE predicate on the "end_point" field.
func EndPointGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndPoint), v))
	})
}

// EndPointLT applies the LT predicate on the "end_point" field.
func EndPointLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndPoint), v))
	})
}

// EndPointLTE applies the LTE predicate on the "end_point" field.
func EndPointLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndPoint), v))
	})
}

// EndPointContains applies the Contains predicate on the "end_point" field.
func EndPointContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEndPoint), v))
	})
}

// EndPointHasPrefix applies the HasPrefix predicate on the "end_point" field.
func EndPointHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEndPoint), v))
	})
}

// EndPointHasSuffix applies the HasSuffix predicate on the "end_point" field.
func EndPointHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEndPoint), v))
	})
}

// EndPointEqualFold applies the EqualFold predicate on the "end_point" field.
func EndPointEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEndPoint), v))
	})
}

// EndPointContainsFold applies the ContainsFold predicate on the "end_point" field.
func EndPointContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEndPoint), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// HeaderEQ applies the EQ predicate on the "header" field.
func HeaderEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeader), v))
	})
}

// HeaderNEQ applies the NEQ predicate on the "header" field.
func HeaderNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeader), v))
	})
}

// HeaderIn applies the In predicate on the "header" field.
func HeaderIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeader), v...))
	})
}

// HeaderNotIn applies the NotIn predicate on the "header" field.
func HeaderNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeader), v...))
	})
}

// HeaderGT applies the GT predicate on the "header" field.
func HeaderGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeader), v))
	})
}

// HeaderGTE applies the GTE predicate on the "header" field.
func HeaderGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeader), v))
	})
}

// HeaderLT applies the LT predicate on the "header" field.
func HeaderLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeader), v))
	})
}

// HeaderLTE applies the LTE predicate on the "header" field.
func HeaderLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeader), v))
	})
}

// HeaderContains applies the Contains predicate on the "header" field.
func HeaderContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeader), v))
	})
}

// HeaderHasPrefix applies the HasPrefix predicate on the "header" field.
func HeaderHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeader), v))
	})
}

// HeaderHasSuffix applies the HasSuffix predicate on the "header" field.
func HeaderHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeader), v))
	})
}

// HeaderEqualFold applies the EqualFold predicate on the "header" field.
func HeaderEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeader), v))
	})
}

// HeaderContainsFold applies the ContainsFold predicate on the "header" field.
func HeaderContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeader), v))
	})
}

// RequestParamsEQ applies the EQ predicate on the "request_params" field.
func RequestParamsEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestParams), v))
	})
}

// RequestParamsNEQ applies the NEQ predicate on the "request_params" field.
func RequestParamsNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestParams), v))
	})
}

// RequestParamsIn applies the In predicate on the "request_params" field.
func RequestParamsIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequestParams), v...))
	})
}

// RequestParamsNotIn applies the NotIn predicate on the "request_params" field.
func RequestParamsNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequestParams), v...))
	})
}

// RequestParamsGT applies the GT predicate on the "request_params" field.
func RequestParamsGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestParams), v))
	})
}

// RequestParamsGTE applies the GTE predicate on the "request_params" field.
func RequestParamsGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestParams), v))
	})
}

// RequestParamsLT applies the LT predicate on the "request_params" field.
func RequestParamsLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestParams), v))
	})
}

// RequestParamsLTE applies the LTE predicate on the "request_params" field.
func RequestParamsLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestParams), v))
	})
}

// RequestParamsContains applies the Contains predicate on the "request_params" field.
func RequestParamsContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequestParams), v))
	})
}

// RequestParamsHasPrefix applies the HasPrefix predicate on the "request_params" field.
func RequestParamsHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequestParams), v))
	})
}

// RequestParamsHasSuffix applies the HasSuffix predicate on the "request_params" field.
func RequestParamsHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequestParams), v))
	})
}

// RequestParamsEqualFold applies the EqualFold predicate on the "request_params" field.
func RequestParamsEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequestParams), v))
	})
}

// RequestParamsContainsFold applies the ContainsFold predicate on the "request_params" field.
func RequestParamsContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequestParams), v))
	})
}

// RequestBodyEQ applies the EQ predicate on the "request_body" field.
func RequestBodyEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestBody), v))
	})
}

// RequestBodyNEQ applies the NEQ predicate on the "request_body" field.
func RequestBodyNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestBody), v))
	})
}

// RequestBodyIn applies the In predicate on the "request_body" field.
func RequestBodyIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequestBody), v...))
	})
}

// RequestBodyNotIn applies the NotIn predicate on the "request_body" field.
func RequestBodyNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequestBody), v...))
	})
}

// RequestBodyGT applies the GT predicate on the "request_body" field.
func RequestBodyGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestBody), v))
	})
}

// RequestBodyGTE applies the GTE predicate on the "request_body" field.
func RequestBodyGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestBody), v))
	})
}

// RequestBodyLT applies the LT predicate on the "request_body" field.
func RequestBodyLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestBody), v))
	})
}

// RequestBodyLTE applies the LTE predicate on the "request_body" field.
func RequestBodyLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestBody), v))
	})
}

// RequestBodyContains applies the Contains predicate on the "request_body" field.
func RequestBodyContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequestBody), v))
	})
}

// RequestBodyHasPrefix applies the HasPrefix predicate on the "request_body" field.
func RequestBodyHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequestBody), v))
	})
}

// RequestBodyHasSuffix applies the HasSuffix predicate on the "request_body" field.
func RequestBodyHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequestBody), v))
	})
}

// RequestBodyEqualFold applies the EqualFold predicate on the "request_body" field.
func RequestBodyEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequestBody), v))
	})
}

// RequestBodyContainsFold applies the ContainsFold predicate on the "request_body" field.
func RequestBodyContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequestBody), v))
	})
}

// ResponseSuccessHTTPStatusEQ applies the EQ predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessHTTPStatusNEQ applies the NEQ predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusNEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessHTTPStatusIn applies the In predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponseSuccessHTTPStatus), v...))
	})
}

// ResponseSuccessHTTPStatusNotIn applies the NotIn predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusNotIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponseSuccessHTTPStatus), v...))
	})
}

// ResponseSuccessHTTPStatusGT applies the GT predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusGT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessHTTPStatusGTE applies the GTE predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusGTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessHTTPStatusLT applies the LT predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusLT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessHTTPStatusLTE applies the LTE predicate on the "response_success_http_status" field.
func ResponseSuccessHTTPStatusLTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseSuccessHTTPStatus), v))
	})
}

// ResponseSuccessCodeSchemaEQ applies the EQ predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaNEQ applies the NEQ predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaIn applies the In predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponseSuccessCodeSchema), v...))
	})
}

// ResponseSuccessCodeSchemaNotIn applies the NotIn predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponseSuccessCodeSchema), v...))
	})
}

// ResponseSuccessCodeSchemaGT applies the GT predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaGTE applies the GTE predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaLT applies the LT predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaLTE applies the LTE predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaContains applies the Contains predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaHasPrefix applies the HasPrefix predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaHasSuffix applies the HasSuffix predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaEqualFold applies the EqualFold predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseSuccessCodeSchemaContainsFold applies the ContainsFold predicate on the "response_success_code_schema" field.
func ResponseSuccessCodeSchemaContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResponseSuccessCodeSchema), v))
	})
}

// ResponseMessageSchemaEQ applies the EQ predicate on the "response_message_schema" field.
func ResponseMessageSchemaEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponseMessageSchema), v))
	})
}

// ResponseMessageSchemaNEQ applies the NEQ predicate on the "response_message_schema" field.
func ResponseMessageSchemaNEQ(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponseMessageSchema), v))
	})
}

// ResponseMessageSchemaIn applies the In predicate on the "response_message_schema" field.
func ResponseMessageSchemaIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponseMessageSchema), v...))
	})
}

// ResponseMessageSchemaNotIn applies the NotIn predicate on the "response_message_schema" field.
func ResponseMessageSchemaNotIn(vs ...int32) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponseMessageSchema), v...))
	})
}

// ResponseMessageSchemaGT applies the GT predicate on the "response_message_schema" field.
func ResponseMessageSchemaGT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponseMessageSchema), v))
	})
}

// ResponseMessageSchemaGTE applies the GTE predicate on the "response_message_schema" field.
func ResponseMessageSchemaGTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponseMessageSchema), v))
	})
}

// ResponseMessageSchemaLT applies the LT predicate on the "response_message_schema" field.
func ResponseMessageSchemaLT(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponseMessageSchema), v))
	})
}

// ResponseMessageSchemaLTE applies the LTE predicate on the "response_message_schema" field.
func ResponseMessageSchemaLTE(v int32) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponseMessageSchema), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConfigTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConfigTask) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConfigTask) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConfigTask) predicate.ConfigTask {
	return predicate.ConfigTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
